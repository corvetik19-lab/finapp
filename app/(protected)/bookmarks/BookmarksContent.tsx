"use client";

import { useState, useEffect, useCallback } from "react";
import styles from "./Bookmarks.module.css";
import BookmarkCard from "./BookmarkCard";
import BookmarkModal from "./BookmarkModal";

type Bookmark = {
  id: string;
  title: string;
  url: string;
  description: string | null;
  category: string | null;
  tags: string[];
  is_favorite: boolean;
  favicon_url: string | null;
  visit_count: number;
  created_at: string;
  last_visited_at: string | null;
};

export default function BookmarksContent() {
  const [bookmarks, setBookmarks] = useState<Bookmark[]>([]);
  const [filteredBookmarks, setFilteredBookmarks] = useState<Bookmark[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingBookmark, setEditingBookmark] = useState<Bookmark | null>(null);
  
  // –§–∏–ª—å—Ç—Ä—ã
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [showFavorites, setShowFavorites] = useState(false);

  const categories = ["–†–∞–±–æ—Ç–∞", "–û–±—É—á–µ–Ω–∏–µ", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–°–æ—Ü—Å–µ—Ç–∏", "–î—Ä—É–≥–æ–µ"];

  useEffect(() => {
    loadBookmarks();
  }, []);

  const filterBookmarks = useCallback(() => {
    let filtered = [...bookmarks];

    // –ü–æ–∏—Å–∫
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(
        (b) =>
          b.title.toLowerCase().includes(query) ||
          b.description?.toLowerCase().includes(query) ||
          b.url.toLowerCase().includes(query) ||
          b.tags.some((tag) => tag.toLowerCase().includes(query))
      );
    }

    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    if (selectedCategory !== "all") {
      filtered = filtered.filter((b) => b.category === selectedCategory);
    }

    // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
    if (showFavorites) {
      filtered = filtered.filter((b) => b.is_favorite);
    }

    setFilteredBookmarks(filtered);
  }, [bookmarks, searchQuery, selectedCategory, showFavorites]);

  useEffect(() => {
    filterBookmarks();
  }, [filterBookmarks]);

  async function loadBookmarks() {
    try {
      setIsLoading(true);
      const res = await fetch("/api/bookmarks");
      const data = await res.json();
      
      if (res.ok) {
        setBookmarks(data.bookmarks || []);
      } else {
        console.error("Error loading bookmarks:", data.error);
      }
    } catch (error) {
      console.error("Load bookmarks error:", error);
    } finally {
      setIsLoading(false);
    }
  }

  function handleCreate() {
    setEditingBookmark(null);
    setIsModalOpen(true);
  }

  function handleEdit(bookmark: Bookmark) {
    setEditingBookmark(bookmark);
    setIsModalOpen(true);
  }

  async function handleDelete(id: string) {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–∫–ª–∞–¥–∫—É?")) return;

    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - —Å—Ä–∞–∑—É —É–±–∏—Ä–∞–µ–º –∏–∑ UI
    const deletedBookmark = bookmarks.find((b) => b.id === id);
    setBookmarks((prev) => prev.filter((b) => b.id !== id));

    try {
      const res = await fetch(`/api/bookmarks/${id}`, {
        method: "DELETE",
      });

      if (!res.ok) {
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (deletedBookmark) {
          setBookmarks((prev) => [...prev, deletedBookmark]);
        }
        const data = await res.json();
        alert(`–û—à–∏–±–∫–∞: ${data.error}`);
      }
    } catch (error) {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (deletedBookmark) {
        setBookmarks((prev) => [...prev, deletedBookmark]);
      }
      console.error("Delete error:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
    }
  }

  async function handleToggleFavorite(id: string, isFavorite: boolean) {
    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º UI
    setBookmarks((prev) =>
      prev.map((b) =>
        b.id === id ? { ...b, is_favorite: !isFavorite } : b
      )
    );

    try {
      const res = await fetch(`/api/bookmarks/${id}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ is_favorite: !isFavorite }),
      });

      if (!res.ok) {
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        setBookmarks((prev) =>
          prev.map((b) =>
            b.id === id ? { ...b, is_favorite: isFavorite } : b
          )
        );
        const data = await res.json();
        alert(`–û—à–∏–±–∫–∞: ${data.error}`);
      }
    } catch (error) {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setBookmarks((prev) =>
        prev.map((b) =>
          b.id === id ? { ...b, is_favorite: isFavorite } : b
        )
      );
      console.error("Toggle favorite error:", error);
    }
  }

  async function handleVisit(url: string, id: string) {
    try {
      // –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
      window.open(url, "_blank", "noopener,noreferrer");

      // –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –ø–æ—Å–µ—â–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
      fetch(`/api/bookmarks/${id}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ increment_visits: true }),
      });
    } catch (error) {
      console.error("Visit error:", error);
    }
  }

  async function handleModalClose(updatedBookmark?: Bookmark) {
    setIsModalOpen(false);
    setEditingBookmark(null);
    
    if (updatedBookmark) {
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—É—é –∑–∞–∫–ª–∞–¥–∫—É
      setBookmarks((prev) =>
        prev.map((b) => (b.id === updatedBookmark.id ? updatedBookmark : b))
      );
    } else {
      // –ï—Å–ª–∏ –Ω–æ–≤–∞—è –∑–∞–∫–ª–∞–¥–∫–∞ - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
      await loadBookmarks();
    }
  }

  return (
    <div className={styles.container}>
      <header className={styles.header}>
        <div className={styles.titleGroup}>
          <h1 className={styles.title}>
            <span className={styles.icon}>üîñ</span>
            –ó–∞–∫–ª–∞–¥–∫–∏
          </h1>
          <p className={styles.subtitle}>
            –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
          </p>
        </div>
        <button onClick={handleCreate} className={styles.createBtn}>
          <span className="material-icons">add</span>
          –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É
        </button>
      </header>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className={styles.filters}>
        <div className={styles.searchBox}>
          <span className="material-icons">search</span>
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é, URL, —Ç–µ–≥–∞–º..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className={styles.searchInput}
          />
        </div>

        <div className={styles.filterRow}>
          <select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            className={styles.select}
          >
            <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
            {categories.map((cat) => (
              <option key={cat} value={cat}>
                {cat}
              </option>
            ))}
          </select>

          <button
            onClick={() => setShowFavorites(!showFavorites)}
            className={`${styles.filterBtn} ${showFavorites ? styles.active : ""}`}
          >
            <span className="material-icons">
              {showFavorites ? "star" : "star_border"}
            </span>
            –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
          </button>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className={styles.stats}>
        <div className={styles.statCard}>
          <span className={styles.statValue}>{bookmarks.length}</span>
          <span className={styles.statLabel}>–í—Å–µ–≥–æ –∑–∞–∫–ª–∞–¥–æ–∫</span>
        </div>
        <div className={styles.statCard}>
          <span className={styles.statValue}>
            {bookmarks.filter((b) => b.is_favorite).length}
          </span>
          <span className={styles.statLabel}>–ò–∑–±—Ä–∞–Ω–Ω—ã—Ö</span>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥–æ–∫ */}
      {isLoading ? (
        <div className={styles.loading}>
          <div className={styles.spinner}></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–ª–∞–¥–æ–∫...</p>
        </div>
      ) : filteredBookmarks.length === 0 ? (
        <div className={styles.empty}>
          <span className={styles.emptyIcon}>üîñ</span>
          <h3>–ó–∞–∫–ª–∞–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p>
            {searchQuery || selectedCategory !== "all" || showFavorites
              ? "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
              : "–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–∫–ª–∞–¥–∫—É"}
          </p>
          {!searchQuery && selectedCategory === "all" && !showFavorites && (
            <button onClick={handleCreate} className={styles.emptyBtn}>
              –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É
            </button>
          )}
        </div>
      ) : (
        <div className={styles.grid}>
          {filteredBookmarks.map((bookmark) => (
            <BookmarkCard
              key={bookmark.id}
              bookmark={bookmark}
              onEdit={handleEdit}
              onDelete={handleDelete}
              onToggleFavorite={handleToggleFavorite}
              onVisit={handleVisit}
            />
          ))}
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      {isModalOpen && (
        <BookmarkModal
          bookmark={editingBookmark}
          onClose={handleModalClose}
          categories={categories}
        />
      )}
    </div>
  );
}

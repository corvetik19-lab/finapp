"use client";

import { useEffect, useState } from "react";
import { Line } from "react-chartjs-2";
import styles from "./Forecasts.module.css";

interface ExpenseForecast {
  month: string;
  predicted_expense: number;
  confidence: number;
  trend: "increasing" | "decreasing" | "stable";
  factors: string[];
}

interface WhatIfScenario {
  name: string;
  description: string;
  monthly_change: number;
  affects: "income" | "expense";
  category?: string;
}

interface ScenarioResult {
  scenario: WhatIfScenario;
  original_balance: number;
  new_balance: number;
  difference: number;
  impact_percentage: number;
  recommendation: string;
  timeline: { month: string; balance: number }[];
}

export default function ForecastsClient() {
  const [forecast, setForecast] = useState<ExpenseForecast | null>(null);
  const [insights, setInsights] = useState<string>("");
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<"forecast" | "scenarios">("forecast");
  
  // –°—Ü–µ–Ω–∞—Ä–∏–∏
  const [selectedScenario, setSelectedScenario] = useState<WhatIfScenario | null>(null);
  const [scenarioResult, setScenarioResult] = useState<ScenarioResult | null>(null);

  const predefinedScenarios: WhatIfScenario[] = [
    {
      name: "–ü–æ–≤—ã—à–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã",
      description: "–ï—Å–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤—ã—Ä–∞—Å—Ç–µ—Ç –Ω–∞ 20%",
      monthly_change: 3000000, // 30k —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
      affects: "income",
    },
    {
      name: "–û—Ç–∫–∞–∑ –æ—Ç –∫–∞—Ñ–µ",
      description: "–ü–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç—å –∫–æ—Ñ–µ –∏ –æ–±–µ–¥—ã –≤–Ω–µ –¥–æ–º–∞",
      monthly_change: -1000000, // -10k
      affects: "expense",
      category: "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
    },
    {
      name: "–ü–µ—Ä–µ–µ–∑–¥ –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥",
      description: "–°–Ω–∏–∂–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã –Ω–∞ 30%",
      monthly_change: -1500000, // -15k
      affects: "expense",
      category: "–ñ–∏–ª—å–µ",
    },
    {
      name: "–ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ",
      description: "–ù–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
      monthly_change: 2000000, // +20k
      affects: "expense",
      category: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    },
  ];

  useEffect(() => {
    fetchForecast();
  }, []);

  async function fetchForecast() {
    try {
      const res = await fetch("/api/ai/forecast?type=expense");
      if (res.ok) {
        const data = await res.json();
        setForecast(data.forecast);
        setInsights(data.insights);
      }
    } catch (error) {
      console.error("Failed to fetch forecast:", error);
    } finally {
      setLoading(false);
    }
  }

  async function simulateScenario(scenario: WhatIfScenario) {
    setSelectedScenario(scenario);
    try {
      const res = await fetch(
        `/api/ai/forecast?type=scenario&scenario=${encodeURIComponent(JSON.stringify(scenario))}&months=12`
      );
      if (res.ok) {
        const data = await res.json();
        setScenarioResult(data.scenario_result);
      }
    } catch (error) {
      console.error("Failed to simulate scenario:", error);
    }
  }

  function formatMoney(amount: number) {
    return new Intl.NumberFormat("ru-RU", {
      style: "currency",
      currency: "RUB",
      minimumFractionDigits: 0,
    }).format(amount / 100);
  }

  function getTrendIcon(trend: string) {
    switch (trend) {
      case "increasing":
        return "üìà";
      case "decreasing":
        return "üìâ";
      default:
        return "‚û°Ô∏è";
    }
  }

  function getTrendText(trend: string) {
    switch (trend) {
      case "increasing":
        return "–†–∞—Å—Ö–æ–¥—ã —Ä–∞—Å—Ç—É—Ç";
      case "decreasing":
        return "–†–∞—Å—Ö–æ–¥—ã —Å–Ω–∏–∂–∞—é—Ç—Å—è";
      default:
        return "–†–∞—Å—Ö–æ–¥—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã";
    }
  }

  if (loading) {
    return <div className={styles.loading}>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã...</div>;
  }

  if (!forecast) {
    return (
      <div className={styles.container}>
        <div className={styles.error}>
          <div className={styles.errorIcon}>üìä</div>
          <h2>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö</h2>
          <p>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2 –º–µ—Å—è—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p>
        </div>
      </div>
    );
  }

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
  const scenarioChartData = scenarioResult ? {
    labels: scenarioResult.timeline.map(t => t.month),
    datasets: [
      {
        label: "–° –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º",
        data: scenarioResult.timeline.map(t => t.balance / 100),
        borderColor: "rgb(79, 70, 229)",
        backgroundColor: "rgba(79, 70, 229, 0.1)",
        tension: 0.4,
      },
      {
        label: "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
        data: scenarioResult.timeline.map((_, i) => 
          (scenarioResult.original_balance * (i + 1)) / 100
        ),
        borderColor: "rgb(156, 163, 175)",
        backgroundColor: "rgba(156, 163, 175, 0.1)",
        borderDash: [5, 5],
        tension: 0.4,
      },
    ],
  } : null;

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <div>
          <h1 className={styles.title}>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã</h1>
          <p className={styles.subtitle}>AI –∞–Ω–∞–ª–∏–∑ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏ &quot;–ß—Ç–æ –µ—Å–ª–∏?&quot;</p>
        </div>
      </div>

      <div className={styles.tabs}>
        <button
          className={activeTab === "forecast" ? styles.activeTab : ""}
          onClick={() => setActiveTab("forecast")}
        >
          üìä –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
        </button>
        <button
          className={activeTab === "scenarios" ? styles.activeTab : ""}
          onClick={() => setActiveTab("scenarios")}
        >
          üéØ –°—Ü–µ–Ω–∞—Ä–∏–∏ &quot;–ß—Ç–æ –µ—Å–ª–∏?&quot;
        </button>
      </div>

      {activeTab === "forecast" && (
        <div className={styles.content}>
          {/* –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ */}
          <div className={styles.forecastCard}>
            <div className={styles.forecastHeader}>
              <h2>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {forecast.month}</h2>
              <div className={styles.confidence}>
                –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {forecast.confidence}%
              </div>
            </div>

            <div className={styles.forecastAmount}>
              {formatMoney(forecast.predicted_expense)}
              <span className={styles.trend}>
                {getTrendIcon(forecast.trend)} {getTrendText(forecast.trend)}
              </span>
            </div>

            {insights && (
              <div className={styles.insights}>
                <div className={styles.insightsIcon}>üí°</div>
                <div className={styles.insightsText}>{insights}</div>
              </div>
            )}

            <div className={styles.factors}>
              <h3>–§–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è:</h3>
              <ul>
                {forecast.factors.map((factor, idx) => (
                  <li key={idx}>{factor}</li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      )}

      {activeTab === "scenarios" && (
        <div className={styles.content}>
          <div className={styles.scenariosGrid}>
            <div className={styles.scenariosList}>
              <h3>–ì–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏</h3>
              {predefinedScenarios.map((scenario, idx) => (
                <button
                  key={idx}
                  className={`${styles.scenarioCard} ${
                    selectedScenario?.name === scenario.name ? styles.selected : ""
                  }`}
                  onClick={() => simulateScenario(scenario)}
                >
                  <div className={styles.scenarioName}>{scenario.name}</div>
                  <div className={styles.scenarioDesc}>{scenario.description}</div>
                  <div
                    className={`${styles.scenarioChange} ${
                      scenario.monthly_change > 0 && scenario.affects === "income"
                        ? styles.positive
                        : scenario.monthly_change < 0 && scenario.affects === "expense"
                        ? styles.positive
                        : styles.negative
                    }`}
                  >
                    {scenario.monthly_change > 0 ? "+" : ""}
                    {formatMoney(Math.abs(scenario.monthly_change))}/–º–µ—Å
                  </div>
                </button>
              ))}
            </div>

            {scenarioResult && (
              <div className={styles.scenarioResult}>
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏</h3>
                
                <div className={styles.impactSummary}>
                  <div className={styles.impactItem}>
                    <div className={styles.impactLabel}>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</div>
                    <div className={styles.impactValue}>
                      {formatMoney(scenarioResult.original_balance)}/–º–µ—Å
                    </div>
                  </div>
                  <div className={styles.arrow}>‚Üí</div>
                  <div className={styles.impactItem}>
                    <div className={styles.impactLabel}>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å</div>
                    <div className={`${styles.impactValue} ${
                      scenarioResult.new_balance > scenarioResult.original_balance
                        ? styles.positive
                        : styles.negative
                    }`}>
                      {formatMoney(scenarioResult.new_balance)}/–º–µ—Å
                    </div>
                  </div>
                </div>

                <div className={styles.difference}>
                  <strong>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</strong>{" "}
                  {scenarioResult.difference > 0 ? "+" : ""}
                  {formatMoney(scenarioResult.difference)}/–º–µ—Å
                  <span className={styles.percentage}>
                    ({scenarioResult.impact_percentage > 0 ? "+" : ""}
                    {scenarioResult.impact_percentage.toFixed(1)}%)
                  </span>
                </div>

                <div className={styles.recommendation}>
                  <strong>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong>
                  <p>{scenarioResult.recommendation}</p>
                </div>

                {scenarioChartData && (
                  <div className={styles.chart}>
                    <h4>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤</h4>
                    <Line
                      data={scenarioChartData}
                      options={{
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                          legend: {
                            position: "top",
                          },
                        },
                        scales: {
                          y: {
                            beginAtZero: true,
                            ticks: {
                              callback: (value) => `${value} ‚ÇΩ`,
                            },
                          },
                        },
                      }}
                    />
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

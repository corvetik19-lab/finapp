/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
"use client";

import { useChat, type Message } from "ai/react";
import styles from "./AiChat.module.css";
import { useState, useRef, useEffect } from "react";

export default function AiChatPage() {
  const { messages, input, handleInputChange, handleSubmit, isLoading, error } = useChat({
    api: "/api/ai/chat",
    onError: (error) => {
      console.error("AI Chat Error:", error);
      setConnectionStatus("error");
    },
    onResponse: () => {
      setConnectionStatus("connected");
    },
  });

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [suggestions] = useState([
    "–ü–æ–∫–∞–∂–∏ –º–æ–π –±–∞–ª–∞–Ω—Å –∑–∞ –º–µ—Å—è—Ü",
    "–°–æ–∑–¥–∞–π —Ä–∞—Å—Ö–æ–¥ 1500‚ÇΩ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã",
    "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏?",
    "–°–æ–∑–¥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–°–ø–æ—Ä—Ç' –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤",
    "–ü–æ–∫–∞–∂–∏ –º–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–ª–∞–Ω—ã",
  ]);
  const [connectionStatus, setConnectionStatus] = useState<"idle" | "connecting" | "connected" | "error">("idle");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    async function checkAPI() {
      try {
        const res = await fetch("/api/ai/test");
        const data = await res.json();
        
        if (!data.hasOpenAIKey) {
          setConnectionStatus("error");
          console.error("OpenAI API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!");
        } else {
          console.log("‚úÖ API –ø—Ä–æ–≤–µ—Ä–µ–Ω:", data.message);
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API:", err);
        setConnectionStatus("error");
      }
    }
    
    checkAPI();
  }, []);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleSuggestionClick = (suggestion: string) => {
    handleInputChange({ target: { value: suggestion } } as React.ChangeEvent<HTMLInputElement>);
  };

  const onSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setConnectionStatus("connecting");
    try {
      await handleSubmit(e);
    } catch (err) {
      setConnectionStatus("error");
      console.error("Submit error:", err);
    }
  };

  const getStatusBadge = () => {
    switch (connectionStatus) {
      case "connecting":
        return <span className={styles.statusConnecting}>üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</span>;
      case "connected":
        return <span className={styles.statusConnected}>‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ</span>;
      case "error":
        return <span className={styles.statusError}>‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</span>;
      default:
        return <span className={styles.statusIdle}>‚ö™ –ì–æ—Ç–æ–≤</span>;
    }
  };

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <div className={styles.titleGroup}>
          <h1 className={styles.title}>
            <span className={styles.icon}>ü§ñ</span>
            AI –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç
          </h1>
          <p className={styles.subtitle}>
            –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
          </p>
        </div>
        <div className={styles.statusBadge}>
          {getStatusBadge()}
        </div>
      </div>

      <div className={styles.chatContainer}>
        <div className={styles.messagesArea}>
          {messages.length === 0 && (
            <div className={styles.welcome}>
              <div className={styles.welcomeIcon}>üí¨</div>
              <h2>–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</h2>
              <p>–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:</p>
              <ul className={styles.features}>
                <li>üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã</li>
                <li>üí∞ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</li>
                <li>üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –±—é–¥–∂–µ—Ç—ã –∏ –ø–ª–∞–Ω—ã</li>
                <li>üí° –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏</li>
              </ul>
              <p className={styles.tryExamples}>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:</p>
              <div className={styles.suggestions}>
                {suggestions.map((suggestion, i) => (
                  <button
                    key={i}
                    onClick={() => handleSuggestionClick(suggestion)}
                    className={styles.suggestionBtn}
                  >
                    {suggestion}
                  </button>
                ))}
              </div>
            </div>
          )}

          {messages.map((message: Message) => (
            <div
              key={message.id}
              className={`${styles.message} ${
                message.role === "user" ? styles.userMessage : styles.aiMessage
              }`}
            >
              <div className={styles.messageAvatar}>
                {message.role === "user" ? "üë§" : "ü§ñ"}
              </div>
              <div className={styles.messageContent}>
                <div className={styles.messageText}>
                  {message.content}
                </div>
              </div>
            </div>
          ))}

          {isLoading && (
            <div className={`${styles.message} ${styles.aiMessage}`}>
              <div className={styles.messageAvatar}>ü§ñ</div>
              <div className={styles.messageContent}>
                <div className={styles.typing}>
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
                <p className={styles.typingText}>AI –¥—É–º–∞–µ—Ç...</p>
              </div>
            </div>
          )}

          {(error || connectionStatus === "error") && (
            <div className={styles.errorMessage}>
              <span className={styles.errorIcon}>‚ö†Ô∏è</span>
              <div className={styles.errorContent}>
                <strong>–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å AI</strong>
                <p>{error?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenAI API."}</p>
                
                <div className={styles.errorHelp}>
                  <p><strong>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</strong></p>
                  <ul>
                    <li>OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</li>
                    <li>–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º</li>
                    <li>API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç</li>
                  </ul>
                  
                  <p><strong>–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:</strong></p>
                  <ol>
                    <li>–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª <code>.env.local</code> –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞</li>
                    <li>–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: <code>OPENAI_API_KEY=–≤–∞—à_–∫–ª—é—á</code></li>
                    <li>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: <code>npm run dev</code></li>
                  </ol>
                  
                  <p className={styles.helpLink}>
                    –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á: <a href="https://platform.openai.com/api-keys" target="_blank" rel="noopener noreferrer">platform.openai.com/api-keys</a>
                  </p>
                </div>
                
                <button 
                  onClick={() => window.location.reload()} 
                  className={styles.retryBtn}
                >
                  –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
              </div>
            </div>
          )}

          <div ref={messagesEndRef} />
        </div>

        <form onSubmit={onSubmit} className={styles.inputForm}>
          <input
            type="text"
            value={input}
            onChange={handleInputChange}
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É..."
            className={styles.input}
            disabled={isLoading}
          />
          <button
            type="submit"
            className={styles.sendBtn}
            disabled={isLoading || !input.trim()}
          >
            <span className={styles.sendIcon}>üì§</span>
          </button>
        </form>
      </div>
    </div>
  );
}

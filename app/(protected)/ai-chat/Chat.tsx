"use client";

// @ts-expect-error - useChat from ai package
import { useChat } from "ai/react";
import { useRef, useEffect } from "react";
import styles from "./Chat.module.css";

interface ChatMessage {
  id: string;
  role: "user" | "assistant";
  content: string;
}

export default function Chat() {
  const { messages, input, setInput, handleSubmit, isLoading, stop } = useChat({
    api: "/api/chat",
  });

  const messagesEndRef = useRef<HTMLDivElement>(null);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const quickQuestions = [
    "üí∞ –ö–∞–∫–æ–π —É –º–µ–Ω—è –±–∞–ª–∞–Ω—Å?",
    "üìä –ù–∞ —á—Ç–æ —è –±–æ–ª—å—à–µ —Ç—Ä–∞—á—É?",
    "üí∏ –°–∫–æ–ª—å–∫–æ —è –ø–æ—Ç—Ä–∞—Ç–∏–ª –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ?",
    "üí° –ö–∞–∫ –º–Ω–µ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å?",
  ];

  return (
    <div className={styles.chatContainer}>
      <div className={styles.chatHeader}>
        <div className={styles.headerContent}>
          <div className={styles.headerIcon}>ü§ñ</div>
          <div>
            <h2 className={styles.headerTitle}>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫</h2>
            <p className={styles.headerSubtitle}>
              {isLoading ? "–ü–µ—á–∞—Ç–∞–µ—Ç..." : "–û–Ω–ª–∞–π–Ω"}
            </p>
          </div>
        </div>
      </div>

      <div className={styles.chatMessages}>
        {messages.length === 0 ? (
          <div className={styles.welcomeScreen}>
            <div className={styles.welcomeIcon}>üí¨</div>
            <h3 className={styles.welcomeTitle}>
              –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫
            </h3>
            <p className={styles.welcomeText}>
              –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–∞—Å—Ö–æ–¥–æ–≤, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±—é–¥–∂–µ—Ç–∞ –∏
              –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö.
            </p>

            <div className={styles.quickQuestions}>
              <p className={styles.quickQuestionsTitle}>
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å:
              </p>
              {quickQuestions.map((question, idx) => (
                <button
                  key={idx}
                  className={styles.quickQuestionBtn}
                  onClick={() => setInput(question)}
                  disabled={isLoading}
                >
                  {question}
                </button>
              ))}
            </div>
          </div>
        ) : (
          messages.map((message: ChatMessage) => (
            <div
              key={message.id}
              className={`${styles.message} ${
                message.role === "user"
                  ? styles.userMessage
                  : styles.assistantMessage
              }`}
            >
              <div className={styles.messageAvatar}>
                {message.role === "user" ? "üë§" : "ü§ñ"}
              </div>
              <div className={styles.messageContent}>
                <div className={styles.messageText}>
                  {message.content}
                </div>
              </div>
            </div>
          ))
        )}

        {isLoading && (
          <div className={`${styles.message} ${styles.assistantMessage}`}>
            <div className={styles.messageAvatar}>ü§ñ</div>
            <div className={styles.messageContent}>
              <div className={styles.typingIndicator}>
                <span></span>
                <span></span>
                <span></span>
              </div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      <div className={styles.chatInputContainer}>
        {isLoading && (
          <button className={styles.stopButton} onClick={() => stop()}>
            ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
          </button>
        )}

        <form onSubmit={handleSubmit} className={styles.chatForm}>
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            disabled={isLoading}
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            className={styles.chatInput}
          />
          <button
            type="submit"
            disabled={isLoading || !input.trim()}
            className={styles.sendButton}
          >
            {isLoading ? "‚è≥" : "üì§"}
          </button>
        </form>
      </div>
    </div>
  );
}

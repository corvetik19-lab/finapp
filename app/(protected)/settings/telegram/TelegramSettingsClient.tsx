"use client";

import { useState, useEffect } from "react";
import styles from "./TelegramSettings.module.css";

interface TelegramSettings {
  telegram_user_id: string | null;
  telegram_username: string | null;
  telegram_linked_at: string | null;
  telegram_chat_id: number | null;
}

export default function TelegramSettingsClient() {
  const [settings, setSettings] = useState<TelegramSettings | null>(null);
  const [loading, setLoading] = useState(true);
  const [linkCode, setLinkCode] = useState<string | null>(null);
  const [generatingCode, setGeneratingCode] = useState(false);
  const [message, setMessage] = useState<{ type: "success" | "error"; text: string } | null>(null);

  useEffect(() => {
    loadSettings();
  }, []);

  async function loadSettings() {
    try {
      const res = await fetch("/api/settings/telegram");
      if (res.ok) {
        const data = await res.json();
        setSettings(data);
      }
    } catch (error) {
      console.error("Failed to load settings:", error);
    } finally {
      setLoading(false);
    }
  }

  async function generateLinkCode() {
    setGeneratingCode(true);
    setMessage(null);

    try {
      const res = await fetch("/api/settings/telegram/link-code", {
        method: "POST",
      });

      if (!res.ok) throw new Error("Failed to generate code");

      const data = await res.json();
      setLinkCode(data.code);
      setMessage({
        type: "success",
        text: "–ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.",
      });
    } catch {
      setMessage({
        type: "error",
        text: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞",
      });
    } finally {
      setGeneratingCode(false);
    }
  }

  async function unlinkTelegram() {
    if (!confirm("–û—Ç–≤—è–∑–∞—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç?")) {
      return;
    }

    try {
      const res = await fetch("/api/settings/telegram", {
        method: "DELETE",
      });

      if (!res.ok) throw new Error("Failed to unlink");

      setMessage({
        type: "success",
        text: "Telegram –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–≤—è–∑–∞–Ω",
      });
      loadSettings();
      setLinkCode(null);
    } catch {
      setMessage({
        type: "error",
        text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ",
      });
    }
  }

  if (loading) {
    return <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  const isLinked = settings?.telegram_user_id !== null;

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>üí¨ Telegram –ë–æ—Ç</h1>
        <p className={styles.subtitle}>
          –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –ø—Ä—è–º–æ –∏–∑ Telegram
        </p>
      </div>

      {message && (
        <div className={`${styles.message} ${styles[message.type]}`}>
          {message.type === "success" ? "‚úÖ" : "‚ùå"} {message.text}
        </div>
      )}

      {isLinked && settings ? (
        <div className={styles.linkedCard}>
          <div className={styles.linkedHeader}>
            <div className={styles.linkedIcon}>‚úÖ</div>
            <div>
              <div className={styles.linkedTitle}>Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω</div>
              <div className={styles.linkedUsername}>
                @{settings.telegram_username || "–±–µ–∑ username"}
              </div>
            </div>
          </div>

          <div className={styles.linkedInfo}>
            <div className={styles.infoItem}>
              <div className={styles.infoLabel}>User ID:</div>
              <div className={styles.infoValue}>{settings.telegram_user_id}</div>
            </div>
            {settings.telegram_linked_at && (
              <div className={styles.infoItem}>
                <div className={styles.infoLabel}>–ü–æ–¥–∫–ª—é—á–µ–Ω–æ:</div>
                <div className={styles.infoValue}>
                  {new Date(settings.telegram_linked_at).toLocaleDateString("ru-RU")}
                </div>
              </div>
            )}
          </div>

          <button className={styles.unlinkBtn} onClick={unlinkTelegram}>
            –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
          </button>

          <div className={styles.commands}>
            <h3>üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</h3>
            <div className={styles.commandsList}>
              <div className={styles.command}>
                <code>/balance</code>
                <span>–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å</span>
              </div>
              <div className={styles.command}>
                <code>/stats</code>
                <span>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü</span>
              </div>
              <div className={styles.command}>
                <code>/budgets</code>
                <span>–°–æ—Å—Ç–æ—è–Ω–∏–µ –±—é–¥–∂–µ—Ç–æ–≤</span>
              </div>
              <div className={styles.command}>
                <code>/add 500 –∫–æ—Ñ–µ</code>
                <span>–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥</span>
              </div>
            </div>
            <p className={styles.commandsNote}>
              –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: &quot;–ü–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å&quot;, &quot;–î–æ–±–∞–≤—å 1000—Ä –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã&quot;
            </p>
          </div>
        </div>
      ) : (
        <div className={styles.unlinkCard}>
          <div className={styles.steps}>
            <h3>üöÄ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å:</h3>
            <div className={styles.step}>
              <div className={styles.stepNumber}>1</div>
              <div className={styles.stepContent}>
                <div className={styles.stepTitle}>–ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞</div>
                <div className={styles.stepDesc}>
                  –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞:
                  <br />
                  <strong>@finapp_tracker_bot</strong>
                </div>
              </div>
            </div>

            <div className={styles.step}>
              <div className={styles.stepNumber}>2</div>
              <div className={styles.stepContent}>
                <div className={styles.stepTitle}>–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–¥</div>
                <div className={styles.stepDesc}>
                  –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏
                </div>
              </div>
            </div>

            {linkCode ? (
              <div className={styles.codeCard}>
                <div className={styles.codeLabel}>–í–∞—à –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏:</div>
                <div className={styles.code}>{linkCode}</div>
                <div className={styles.codeHint}>
                  ‚è±Ô∏è –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç
                </div>
              </div>
            ) : (
              <button
                className={styles.generateBtn}
                onClick={generateLinkCode}
                disabled={generatingCode}
              >
                {generatingCode ? "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º..." : "üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"}
              </button>
            )}

            <div className={styles.step}>
              <div className={styles.stepNumber}>3</div>
              <div className={styles.stepContent}>
                <div className={styles.stepTitle}>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –±–æ—Ç—É</div>
                <div className={styles.stepDesc}>
                  –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É:
                  <br />
                  <code>/start {linkCode || "–í–ê–®_–ö–û–î"}</code>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className={styles.info}>
        <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
        <ul>
          <li>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Telegram API</li>
          <li>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏</li>
          <li>–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–æ –∑–∞—â–∏—â—ë–Ω–Ω–æ–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é</li>
          <li>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å –±–æ—Ç–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç</li>
        </ul>
      </div>
    </div>
  );
}

"use client";

import { useState, useEffect } from "react";
import styles from "./styles.module.css";

interface EmailPreferences {
  budget_alerts_enabled: boolean;
  transaction_alerts_enabled: boolean;
  weekly_summary_enabled: boolean;
  weekly_summary_day: number;
  weekly_summary_time: string;
  custom_email: string | null;
}

const DAYS_OF_WEEK = [
  { value: 1, label: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" },
  { value: 2, label: "–í—Ç–æ—Ä–Ω–∏–∫" },
  { value: 3, label: "–°—Ä–µ–¥–∞" },
  { value: 4, label: "–ß–µ—Ç–≤–µ—Ä–≥" },
  { value: 5, label: "–ü—è—Ç–Ω–∏—Ü–∞" },
  { value: 6, label: "–°—É–±–±–æ—Ç–∞" },
  { value: 7, label: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ" },
];

export default function EmailSettingsPage() {
  const [preferences, setPreferences] = useState<EmailPreferences>({
    budget_alerts_enabled: true,
    transaction_alerts_enabled: true,
    weekly_summary_enabled: false,
    weekly_summary_day: 1,
    weekly_summary_time: "09:00",
    custom_email: null,
  });
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [message, setMessage] = useState<{ type: "success" | "error"; text: string } | null>(null);

  useEffect(() => {
    loadPreferences();
  }, []);

  const loadPreferences = async () => {
    try {
      const response = await fetch("/api/user/email-preferences");
      if (!response.ok) throw new Error("Failed to load preferences");
      
      const data = await response.json();
      setPreferences({
        ...data,
        weekly_summary_time: data.weekly_summary_time?.substring(0, 5) || "09:00",
      });
    } catch (error) {
      console.error("Error loading preferences:", error);
      setMessage({ type: "error", text: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" });
    } finally {
      setLoading(false);
    }
  };

  const savePreferences = async () => {
    setSaving(true);
    setMessage(null);

    try {
      const response = await fetch("/api/user/email-preferences", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(preferences),
      });

      if (!response.ok) throw new Error("Failed to save preferences");

      setMessage({ type: "success", text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!" });
      
      // –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => setMessage(null), 3000);
    } catch (error) {
      console.error("Error saving preferences:", error);
      setMessage({ type: "error", text: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" });
    } finally {
      setSaving(false);
    }
  };

  const updatePreference = (key: keyof EmailPreferences, value: boolean | number | string | null) => {
    setPreferences((prev) => ({ ...prev, [key]: value }));
  };

  if (loading) {
    return (
      <div className={styles.container}>
        <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Email –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h1>
        <p className={styles.subtitle}>
          –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–∏–ø–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ email
        </p>
      </div>

      {message && (
        <div className={`${styles.message} ${styles[message.type]}`}>
          {message.text}
        </div>
      )}

      <div className={styles.section}>
        <h2 className={styles.sectionTitle}>–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h2>

        {/* –ë—é–¥–∂–µ—Ç–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã */}
        <div className={styles.setting}>
          <div className={styles.settingInfo}>
            <div className={styles.settingIcon}>üí∞</div>
            <div>
              <h3 className={styles.settingLabel}>–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞</h3>
              <p className={styles.settingDescription}>
                –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ —Ä–∞—Å—Ö–æ–¥—ã –¥–æ—Å—Ç–∏–≥–∞—é—Ç 80% –æ—Ç –±—é–¥–∂–µ—Ç–∞
              </p>
            </div>
          </div>
          <label className={styles.switch}>
            <input
              type="checkbox"
              checked={preferences.budget_alerts_enabled}
              onChange={(e) => updatePreference("budget_alerts_enabled", e.target.checked)}
            />
            <span className={styles.slider}></span>
          </label>
        </div>

        {/* –ê–ª–µ—Ä—Ç—ã –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
        <div className={styles.setting}>
          <div className={styles.settingInfo}>
            <div className={styles.settingIcon}>üí∏</div>
            <div>
              <h3 className={styles.settingLabel}>–ö—Ä—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</h3>
              <p className={styles.settingDescription}>
                –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–æ–±—ã—á–Ω–æ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞—Ç–∞—Ö
              </p>
            </div>
          </div>
          <label className={styles.switch}>
            <input
              type="checkbox"
              checked={preferences.transaction_alerts_enabled}
              onChange={(e) => updatePreference("transaction_alerts_enabled", e.target.checked)}
            />
            <span className={styles.slider}></span>
          </label>
        </div>

        {/* –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ */}
        <div className={styles.setting}>
          <div className={styles.settingInfo}>
            <div className={styles.settingIcon}>üìä</div>
            <div>
              <h3 className={styles.settingLabel}>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞</h3>
              <p className={styles.settingDescription}>
                –ü–æ–ª—É—á–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é
              </p>
            </div>
          </div>
          <label className={styles.switch}>
            <input
              type="checkbox"
              checked={preferences.weekly_summary_enabled}
              onChange={(e) => updatePreference("weekly_summary_enabled", e.target.checked)}
            />
            <span className={styles.slider}></span>
          </label>
        </div>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏ */}
        {preferences.weekly_summary_enabled && (
          <div className={styles.subsection}>
            <div className={styles.subsectionTitle}>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏</div>
            
            <div className={styles.row}>
              <div className={styles.field}>
                <label className={styles.fieldLabel}>–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏</label>
                <select
                  className={styles.select}
                  value={preferences.weekly_summary_day}
                  onChange={(e) => updatePreference("weekly_summary_day", parseInt(e.target.value))}
                >
                  {DAYS_OF_WEEK.map((day) => (
                    <option key={day.value} value={day.value}>
                      {day.label}
                    </option>
                  ))}
                </select>
              </div>

              <div className={styles.field}>
                <label className={styles.fieldLabel}>–í—Ä–µ–º—è</label>
                <input
                  type="time"
                  className={styles.input}
                  value={preferences.weekly_summary_time}
                  onChange={(e) => updatePreference("weekly_summary_time", e.target.value)}
                />
              </div>
            </div>
          </div>
        )}
      </div>

      {/* –ö–∞—Å—Ç–æ–º–Ω—ã–π email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) */}
      <div className={styles.section}>
        <h2 className={styles.sectionTitle}>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</h2>
        
        <div className={styles.field}>
          <label className={styles.fieldLabel}>
            –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π email –∞–¥—Ä–µ—Å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
          </label>
          <p className={styles.fieldHint}>
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π email
          </p>
          <input
            type="email"
            className={styles.input}
            placeholder="your.email@example.com"
            value={preferences.custom_email || ""}
            onChange={(e) => updatePreference("custom_email", e.target.value || null)}
          />
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
      <div className={styles.actions}>
        <button
          className={styles.saveButton}
          onClick={savePreferences}
          disabled={saving}
        >
          {saving ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"}
        </button>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className={styles.info}>
        <div className={styles.infoIcon}>‚ÑπÔ∏è</div>
        <div>
          <p className={styles.infoText}>
            <strong>–í–∞–∂–Ω–æ:</strong> –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ —É–∫–∞–∑–∞–Ω –∫–ª—é—á Resend API.
          </p>
          <p className={styles.infoText}>
            –ü–æ–¥—Ä–æ–±–Ω–µ–µ: <code>docs/EMAIL_SETUP.md</code>
          </p>
        </div>
      </div>
    </div>
  );
}

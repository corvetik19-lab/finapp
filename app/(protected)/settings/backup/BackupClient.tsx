"use client";

import { useState, useEffect } from "react";
import styles from "./Backup.module.css";

interface Backup {
  name: string;
  path: string;
  size: number;
  created_at: string;
}

export default function BackupClient() {
  const [backups, setBackups] = useState<Backup[]>([]);
  const [loading, setLoading] = useState(true);
  const [creating, setCreating] = useState(false);
  const [restoring, setRestoring] = useState(false);
  const [message, setMessage] = useState<{ type: "success" | "error"; text: string } | null>(null);

  useEffect(() => {
    loadBackups();
  }, []);

  async function loadBackups() {
    try {
      const res = await fetch("/api/backup");
      if (res.ok) {
        const data = await res.json();
        setBackups(data.backups || []);
      }
    } catch {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ backup");
    } finally {
      setLoading(false);
    }
  }

  async function createBackup(downloadLocally = false) {
    setCreating(true);
    setMessage(null);

    try {
      const res = await fetch("/api/backup", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          uploadToStorage: true,
          downloadLocally,
        }),
      });

      if (!res.ok) throw new Error("Failed to create backup");

      const data = await res.json();

      if (downloadLocally && data.backup) {
        // –°–∫–∞—á–∏–≤–∞–µ–º JSON —Ñ–∞–π–ª
        const blob = new Blob([JSON.stringify(data.backup, null, 2)], {
          type: "application/json",
        });
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.href = url;
        link.download = `finapp-backup-${new Date().toISOString()}.json`;
        document.body.appendChild(link);
        link.click();
        link.remove();
        window.URL.revokeObjectURL(url);
      }

      setMessage({ type: "success", text: "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" });
      loadBackups();
    } catch {
      setMessage({
        type: "error",
        text: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é",
      });
    } finally {
      setCreating(false);
    }
  }

  async function restoreBackup(path: string) {
    if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.")) {
      return;
    }

    setRestoring(true);
    setMessage(null);

    try {
      const res = await fetch("/api/backup", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          path,
          clearExisting: false, // –ù–µ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
        }),
      });

      if (!res.ok) throw new Error("Failed to restore backup");

      const data = await res.json();

      setMessage({
        type: "success",
        text: `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${data.imported.transactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${data.imported.accounts} —Å—á–µ—Ç–æ–≤`,
      });
    } catch {
      setMessage({ type: "error", text: "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è" });
    } finally {
      setRestoring(false);
    }
  }

  function formatSize(bytes: number): string {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  }

  function formatDate(dateStr: string): string {
    return new Date(dateStr).toLocaleString("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ</h1>
        <p className={styles.subtitle}>
          –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ
        </p>
      </div>

      {message && (
        <div className={`${styles.message} ${styles[message.type]}`}>
          {message.type === "success" ? "‚úÖ" : "‚ùå"} {message.text}
        </div>
      )}

      <div className={styles.actions}>
        <button
          className={styles.createBtn}
          onClick={() => createBackup(false)}
          disabled={creating}
        >
          {creating ? "–°–æ–∑–¥–∞—ë–º..." : "üì¶ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"}
        </button>
        <button
          className={styles.downloadBtn}
          onClick={() => createBackup(true)}
          disabled={creating}
        >
          {creating ? "–°–æ–∑–¥–∞—ë–º..." : "‚¨áÔ∏è –°–æ–∑–¥–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å"}
        </button>
      </div>

      <div className={styles.info}>
        <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
        <ul>
          <li>–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 02:00</li>
          <li>–•—Ä–∞–Ω—è—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–ø–∏–π</li>
          <li>–í–∫–ª—é—á–∞—é—Ç: —Å—á–µ—Ç–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –±—é–¥–∂–µ—Ç—ã, –ø–ª–∞–Ω—ã</li>
          <li>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ</li>
        </ul>
      </div>

      <div className={styles.backupsList}>
        <h2>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏</h2>

        {loading ? (
          <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        ) : backups.length === 0 ? (
          <div className={styles.empty}>
            <div className={styles.emptyIcon}>üì¶</div>
            <p>–†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>
            <p className={styles.emptyHint}>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–ø–∏—é –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ</p>
          </div>
        ) : (
          <div className={styles.grid}>
            {backups.map((backup) => (
              <div key={backup.path} className={styles.backupCard}>
                <div className={styles.backupHeader}>
                  <div className={styles.backupIcon}>üíæ</div>
                  <div className={styles.backupInfo}>
                    <div className={styles.backupName}>{backup.name}</div>
                    <div className={styles.backupMeta}>
                      {formatDate(backup.created_at)} ‚Ä¢ {formatSize(backup.size)}
                    </div>
                  </div>
                </div>
                <button
                  className={styles.restoreBtn}
                  onClick={() => restoreBackup(backup.path)}
                  disabled={restoring}
                >
                  {restoring ? "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..." : "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"}
                </button>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

"use client";

import { useState, useEffect } from "react";
import styles from "./APIKeys.module.css";

interface APIKey {
  id: string;
  name: string;
  key_prefix: string;
  scopes: string[];
  rate_limit: number;
  is_active: boolean;
  last_used_at: string | null;
  expires_at: string | null;
  created_at: string;
}

export default function APIKeysClient() {
  const [keys, setKeys] = useState<APIKey[]>([]);
  const [loading, setLoading] = useState(true);
  const [creating, setCreating] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [newKey, setNewKey] = useState<string | null>(null);
  
  const [formData, setFormData] = useState({
    name: "",
    scopes: ["read"],
    rate_limit: 1000,
    expires_in_days: 0,
  });

  useEffect(() => {
    loadKeys();
  }, []);

  async function loadKeys() {
    try {
      const res = await fetch("/api/api-keys");
      if (res.ok) {
        const data = await res.json();
        setKeys(data.keys || []);
      }
    } catch (error) {
      console.error("Failed to load API keys:", error);
    } finally {
      setLoading(false);
    }
  }

  async function createKey() {
    setCreating(true);
    try {
      const res = await fetch("/api/api-keys", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      if (res.ok) {
        const data = await res.json();
        setNewKey(data.key);
        setShowForm(false);
        setFormData({ name: "", scopes: ["read"], rate_limit: 1000, expires_in_days: 0 });
        loadKeys();
      }
    } catch (error) {
      console.error("Failed to create API key:", error);
    } finally {
      setCreating(false);
    }
  }

  async function deleteKey(id: string) {
    if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")) return;

    try {
      const res = await fetch(`/api/api-keys?id=${id}`, { method: "DELETE" });
      if (res.ok) {
        loadKeys();
      }
    } catch (error) {
      console.error("Failed to delete API key:", error);
    }
  }

  function toggleScope(scope: string) {
    setFormData(prev => ({
      ...prev,
      scopes: prev.scopes.includes(scope)
        ? prev.scopes.filter(s => s !== scope)
        : [...prev.scopes, scope],
    }));
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <div>
          <h1 className={styles.title}>üîë API Keys</h1>
          <p className={styles.subtitle}>
            –°–æ–∑–¥–∞–≤–∞–π—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
          </p>
        </div>
        <button
          className={styles.createBtn}
          onClick={() => setShowForm(!showForm)}
        >
          ‚ûï –°–æ–∑–¥–∞—Ç—å API –∫–ª—é—á
        </button>
      </div>

      {newKey && (
        <div className={styles.newKeyAlert}>
          <div className={styles.alertHeader}>
            <span>‚úÖ API –∫–ª—é—á —Å–æ–∑–¥–∞–Ω!</span>
            <button onClick={() => setNewKey(null)}>‚úï</button>
          </div>
          <p className={styles.warning}>
            ‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ. –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.
          </p>
          <div className={styles.keyDisplay}>
            <code>{newKey}</code>
            <button
              onClick={() => {
                navigator.clipboard.writeText(newKey);
                alert("–ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!");
              }}
            >
              üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
            </button>
          </div>
        </div>
      )}

      {showForm && (
        <div className={styles.form}>
          <h3>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á</h3>
          
          <label>
            –ù–∞–∑–≤–∞–Ω–∏–µ
            <input
              type="text"
              value={formData.name}
              onChange={(e) => setFormData({...formData, name: e.target.value})}
              placeholder="My App API Key"
            />
          </label>

          <label>
            –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
            <div className={styles.scopesGrid}>
              {["read", "write", "delete"].map(scope => (
                <label key={scope} className={styles.checkbox}>
                  <input
                    type="checkbox"
                    checked={formData.scopes.includes(scope)}
                    onChange={() => toggleScope(scope)}
                  />
                  {scope}
                </label>
              ))}
            </div>
          </label>

          <label>
            Rate Limit (–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å)
            <input
              type="number"
              value={formData.rate_limit}
              onChange={(e) => setFormData({...formData, rate_limit: parseInt(e.target.value)})}
              min="100"
              max="10000"
            />
          </label>

          <label>
            –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–¥–Ω–µ–π, 0 = –±–µ–∑ —Å—Ä–æ–∫–∞)
            <input
              type="number"
              value={formData.expires_in_days}
              onChange={(e) => setFormData({...formData, expires_in_days: parseInt(e.target.value)})}
              min="0"
              max="365"
            />
          </label>

          <div className={styles.formActions}>
            <button onClick={() => setShowForm(false)}>–û—Ç–º–µ–Ω–∞</button>
            <button
              onClick={createKey}
              disabled={creating || !formData.name}
              className={styles.submitBtn}
            >
              {creating ? "–°–æ–∑–¥–∞—ë–º..." : "–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á"}
            </button>
          </div>
        </div>
      )}

      <div className={styles.keysList}>
        {loading ? (
          <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        ) : keys.length === 0 ? (
          <div className={styles.empty}>
            <div className={styles.emptyIcon}>üîë</div>
            <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç API –∫–ª—é—á–µ–π</p>
            <p className={styles.emptyHint}>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–ª—é—á –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å API</p>
          </div>
        ) : (
          keys.map(key => (
            <div key={key.id} className={styles.keyCard}>
              <div className={styles.keyHeader}>
                <div>
                  <h3>{key.name}</h3>
                  <code>{key.key_prefix}‚Ä¢‚Ä¢‚Ä¢</code>
                </div>
                <button
                  className={styles.deleteBtn}
                  onClick={() => deleteKey(key.id)}
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
              
              <div className={styles.keyDetails}>
                <div className={styles.detail}>
                  <span className={styles.label}>–†–∞–∑—Ä–µ—à–µ–Ω–∏—è:</span>
                  <span>{key.scopes.join(", ")}</span>
                </div>
                <div className={styles.detail}>
                  <span className={styles.label}>Rate Limit:</span>
                  <span>{key.rate_limit} req/hour</span>
                </div>
                <div className={styles.detail}>
                  <span className={styles.label}>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</span>
                  <span>
                    {key.last_used_at
                      ? new Date(key.last_used_at).toLocaleString("ru-RU")
                      : "–ù–∏–∫–æ–≥–¥–∞"}
                  </span>
                </div>
                {key.expires_at && (
                  <div className={styles.detail}>
                    <span className={styles.label}>–ò—Å—Ç–µ–∫–∞–µ—Ç:</span>
                    <span>{new Date(key.expires_at).toLocaleDateString("ru-RU")}</span>
                  </div>
                )}
              </div>
            </div>
          ))
        )}
      </div>

      <div className={styles.docs}>
        <h2>üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API</h2>
        <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π API –∫–ª—é—á –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ <code>X-API-Key</code></p>
        
        <h3>–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:</h3>
        <pre className={styles.codeBlock}>
{`curl -X GET "https://finappka.vercel.app/api/v1/transactions?limit=10" \\
  -H "X-API-Key: your-api-key-here"`}
        </pre>

        <h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:</h3>
        <ul className={styles.endpointsList}>
          <li><code>GET /api/v1/transactions</code> - –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</li>
          <li><code>POST /api/v1/transactions</code> - –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é</li>
          <li><code>GET /api/v1/accounts</code> - –ü–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç–∞</li>
          <li><code>GET /api/v1/categories</code> - –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</li>
          <li><code>GET /api/v1/budgets</code> - –ü–æ–ª—É—á–∏—Ç—å –±—é–¥–∂–µ—Ç—ã</li>
        </ul>
      </div>
    </div>
  );
}

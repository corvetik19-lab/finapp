"use client";

import { useState } from "react";
import styles from "./Export.module.css";

export default function ExportClient() {
  const [format, setFormat] = useState<"pdf" | "excel">("pdf");
  const [period, setPeriod] = useState<"month" | "quarter" | "year" | "custom">("month");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  function getDateRange(): { start: string; end: string } {
    const now = new Date();
    const start = new Date();

    switch (period) {
      case "month":
        start.setMonth(now.getMonth() - 1);
        break;
      case "quarter":
        start.setMonth(now.getMonth() - 3);
        break;
      case "year":
        start.setFullYear(now.getFullYear() - 1);
        break;
      case "custom":
        if (!startDate || !endDate) {
          throw new Error("–£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É");
        }
        return { start: startDate, end: endDate };
    }

    return {
      start: start.toISOString().split("T")[0],
      end: now.toISOString().split("T")[0],
    };
  }

  async function handleExport() {
    setLoading(true);
    setError(null);

    try {
      const { start, end } = getDateRange();

      const url = `/api/export?format=${format}&start=${start}&end=${end}`;
      const res = await fetch(url);

      if (!res.ok) {
        const data = await res.json();
        throw new Error(data.details || data.error || "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞");
      }

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const blob = await res.blob();
      const downloadUrl = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = downloadUrl;
      link.download = `finapp-report-${start}-${end}.${format === "excel" ? "xlsx" : "pdf"}`;
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(downloadUrl);
    } catch (err) {
      setError(err instanceof Error ? err.message : "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å");
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–æ–≤</h1>
        <p className={styles.subtitle}>
          –°–∫–∞—á–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –≤ PDF –∏–ª–∏ Excel
        </p>
      </div>

      <div className={styles.card}>
        {/* –§–æ—Ä–º–∞—Ç */}
        <div className={styles.section}>
          <label className={styles.label}>–§–æ—Ä–º–∞—Ç</label>
          <div className={styles.formatGrid}>
            <button
              className={`${styles.formatBtn} ${format === "pdf" ? styles.active : ""}`}
              onClick={() => setFormat("pdf")}
            >
              <div className={styles.formatIcon}>üìÑ</div>
              <div className={styles.formatName}>PDF</div>
              <div className={styles.formatDesc}>–ß–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç</div>
            </button>
            <button
              className={`${styles.formatBtn} ${format === "excel" ? styles.active : ""}`}
              onClick={() => setFormat("excel")}
            >
              <div className={styles.formatIcon}>üìä</div>
              <div className={styles.formatName}>Excel</div>
              <div className={styles.formatDesc}>–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö</div>
            </button>
          </div>
        </div>

        {/* –ü–µ—Ä–∏–æ–¥ */}
        <div className={styles.section}>
          <label className={styles.label}>–ü–µ—Ä–∏–æ–¥</label>
          <div className={styles.periodGrid}>
            <button
              className={`${styles.periodBtn} ${period === "month" ? styles.active : ""}`}
              onClick={() => setPeriod("month")}
            >
              –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
            </button>
            <button
              className={`${styles.periodBtn} ${period === "quarter" ? styles.active : ""}`}
              onClick={() => setPeriod("quarter")}
            >
              –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
            </button>
            <button
              className={`${styles.periodBtn} ${period === "year" ? styles.active : ""}`}
              onClick={() => setPeriod("year")}
            >
              –ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
            </button>
            <button
              className={`${styles.periodBtn} ${period === "custom" ? styles.active : ""}`}
              onClick={() => setPeriod("custom")}
            >
              –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            </button>
          </div>

          {period === "custom" && (
            <div className={styles.customPeriod}>
              <div className={styles.inputGroup}>
                <label>–û—Ç</label>
                <input
                  type="date"
                  value={startDate}
                  onChange={(e) => setStartDate(e.target.value)}
                  className={styles.dateInput}
                />
              </div>
              <div className={styles.inputGroup}>
                <label>–î–æ</label>
                <input
                  type="date"
                  value={endDate}
                  onChange={(e) => setEndDate(e.target.value)}
                  className={styles.dateInput}
                />
              </div>
            </div>
          )}
        </div>

        {/* –ß—Ç–æ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω–æ */}
        <div className={styles.section}>
          <label className={styles.label}>–ß—Ç–æ –±—É–¥–µ—Ç –≤ –æ—Ç—á—ë—Ç–µ</label>
          <div className={styles.included}>
            <div className={styles.includedItem}>
              ‚úÖ –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã, –±–∞–ª–∞–Ω—Å)
            </div>
            <div className={styles.includedItem}>
              ‚úÖ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
            </div>
            <div className={styles.includedItem}>
              ‚úÖ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            </div>
            {format === "excel" && (
              <>
                <div className={styles.includedItem}>
                  ‚úÖ –ê–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                </div>
                <div className={styles.includedItem}>
                  ‚úÖ –ù–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤ (–°–≤–æ–¥–∫–∞, –ö–∞—Ç–µ–≥–æ—Ä–∏–∏, –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
                </div>
              </>
            )}
          </div>
        </div>

        {/* –û—à–∏–±–∫–∞ */}
        {error && (
          <div className={styles.error}>
            ‚ö†Ô∏è {error}
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
        <button
          className={styles.exportBtn}
          onClick={handleExport}
          disabled={loading}
        >
          {loading ? (
            <>
              <span className={styles.spinner}>‚è≥</span>
              –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç...
            </>
          ) : (
            <>
              ‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å {format === "pdf" ? "PDF" : "Excel"}
            </>
          )}
        </button>
      </div>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
      <div className={styles.info}>
        <h3>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</h3>
        <p>
          <strong>PDF</strong> ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ email
        </p>
        <p>
          <strong>Excel</strong> ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–∞–ª—å—à–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, —Å—Ç—Ä–æ–∏—Ç—å
          —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–µ–ª–∞—Ç—å —Å–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        </p>
      </div>
    </div>
  );
}

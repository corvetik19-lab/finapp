"use client";

import { useEffect, useState } from "react";
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from "chart.js";
import { Doughnut } from "react-chartjs-2";
import styles from "./AIAdvisor.module.css";
import type { FinancialHealthReport } from "@/lib/analytics/financial-health";
import { getScoreColor, getGradeLabel } from "@/lib/analytics/financial-health";

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Chart.js
ChartJS.register(ArcElement, Tooltip, Legend);

interface HealthScore {
  overall_score: number;
  breakdown: {
    savings_rate: number;
    expense_stability: number;
    budget_adherence: number;
    debt_management: number;
    emergency_fund: number;
  };
  grade: string;
}

interface MoneyLeak {
  category: string;
  amount: number;
  percentage_of_income: number;
  recommendation: string;
  potential_savings: number;
}

interface Advice {
  type: string;
  title: string;
  description: string;
  action_items: string[];
  impact: string;
  priority: number;
  expected_result?: string;
}

interface AdvisorData {
  health_score: HealthScore;
  money_leaks: MoneyLeak[];
  ideal_budget: {
    needs: number;
    wants: number;
    savings: number;
    user_actual: {
      needs: number;
      wants: number;
      savings: number;
    };
    recommendations: string[];
  };
  advice: Advice[];
  action_plan: {
    steps: { step: number; title: string; description: string; duration_months: number }[];
    total_months: number;
  };
  stats: {
    monthly_income: number;
    monthly_expense: number;
    monthly_savings: number;
    emergency_fund: number;
  };
}

export default function AIAdvisorClient() {
  const [data, setData] = useState<AdvisorData | null>(null);
  const [healthReport, setHealthReport] = useState<FinancialHealthReport | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchAllData();
  }, []);

  async function fetchAllData() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [advisorRes, healthRes] = await Promise.all([
        fetch("/api/ai/advisor"),
        fetch("/api/analytics/financial-health"),
      ]);

      if (advisorRes.ok) {
        const advisorData = await advisorRes.json();
        setData(advisorData);
      }

      if (healthRes.ok) {
        const healthData = await healthRes.json();
        setHealthReport(healthData.report);
      }

      if (!advisorRes.ok && !healthRes.ok) {
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ");
      }
    } catch {
      setError("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
    } finally {
      setLoading(false);
    }
  }

  function formatMoney(amount: number) {
    return new Intl.NumberFormat("ru-RU", {
      style: "currency",
      currency: "RUB",
      minimumFractionDigits: 0,
    }).format(amount / 100);
  }

  function getGradeColor(grade: string) {
    switch (grade) {
      case "Excellent":
        return "#10b981";
      case "Good":
        return "#3b82f6";
      case "Fair":
        return "#f59e0b";
      case "Poor":
        return "#ef4444";
      default:
        return "#dc2626";
    }
  }

  function getGradeText(grade: string) {
    switch (grade) {
      case "Excellent":
        return "–û—Ç–ª–∏—á–Ω–æ";
      case "Good":
        return "–•–æ—Ä–æ—à–æ";
      case "Fair":
        return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ";
      case "Poor":
        return "–ü–ª–æ—Ö–æ";
      default:
        return "–ö—Ä–∏—Ç–∏—á–Ω–æ";
    }
  }

  function getImpactIcon(impact: string) {
    switch (impact) {
      case "high":
        return "üî•";
      case "medium":
        return "‚ö°";
      default:
        return "üí°";
    }
  }

  function getTypeIcon(type: string) {
    switch (type) {
      case "optimization":
        return "üìä";
      case "warning":
        return "‚ö†Ô∏è";
      case "opportunity":
        return "üéØ";
      case "goal":
        return "üèÜ";
      case "automation":
        return "‚öôÔ∏è";
      default:
        return "üí°";
    }
  }

  function getTypeLabel(type: string) {
    switch (type) {
      case "optimization":
        return "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è";
      case "warning":
        return "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ";
      case "opportunity":
        return "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å";
      case "goal":
        return "–¶–µ–ª—å";
      case "automation":
        return "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è";
      default:
        return "–°–æ–≤–µ—Ç";
    }
  }

  function getPriorityColor(priority: number) {
    if (priority <= 2) return "#ef4444"; // –í—ã—Å–æ–∫–∏–π - –∫—Ä–∞—Å–Ω—ã–π
    if (priority <= 3) return "#f59e0b"; // –°—Ä–µ–¥–Ω–∏–π - –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    return "#10b981"; // –ù–∏–∑–∫–∏–π - –∑–µ–ª—ë–Ω—ã–π
  }

  if (loading) {
    return <div className={styles.loading}>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã...</div>;
  }

  if (error || !data) {
    return (
      <div className={styles.container}>
        <div className={styles.error}>
          <div className={styles.errorIcon}>ü§ñ</div>
          <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
          <p>{error || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞"}</p>
        </div>
      </div>
    );
  }

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞
  const budgetChartData = {
    labels: ["–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏", "–ñ–µ–ª–∞–Ω–∏—è", "–°–±–µ—Ä–µ–∂–µ–Ω–∏—è"],
    datasets: [
      {
        label: "–ò–¥–µ–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç",
        data: [
          data.ideal_budget.needs,
          data.ideal_budget.wants,
          data.ideal_budget.savings,
        ],
        backgroundColor: ["#3b82f6", "#8b5cf6", "#10b981"],
        borderWidth: 0,
      },
    ],
  };

  const userBudgetChartData = {
    labels: ["–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏", "–ñ–µ–ª–∞–Ω–∏—è", "–°–±–µ—Ä–µ–∂–µ–Ω–∏—è"],
    datasets: [
      {
        label: "–í–∞—à –±—é–¥–∂–µ—Ç",
        data: [
          data.ideal_budget.user_actual.needs,
          data.ideal_budget.user_actual.wants,
          data.ideal_budget.user_actual.savings,
        ],
        backgroundColor: ["#3b82f6", "#8b5cf6", "#10b981"],
        borderWidth: 0,
      },
    ],
  };

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>üß† AI –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫</h1>
        <p className={styles.subtitle}>
          –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        </p>
      </div>

      {/* –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
      {healthReport && (
        <div className={styles.healthCard}>
          <div className={styles.healthHeader}>
            <h2>üíä –í–∞—à–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ</h2>
            <div
              className={styles.grade}
              style={{ backgroundColor: getScoreColor(healthReport.overall_score) }}
            >
              {getGradeLabel(healthReport.grade)}
            </div>
          </div>

          <div className={styles.scoreCircle}>
            <svg viewBox="0 0 200 200" className={styles.scoreSvg}>
              <circle
                cx="100"
                cy="100"
                r="80"
                fill="none"
                stroke="#e5e7eb"
                strokeWidth="20"
              />
              <circle
                cx="100"
                cy="100"
                r="80"
                fill="none"
                stroke={getScoreColor(healthReport.overall_score)}
                strokeWidth="20"
                strokeDasharray={`${healthReport.overall_score * 5.03} 503`}
                strokeLinecap="round"
                transform="rotate(-90 100 100)"
              />
            </svg>
            <div className={styles.scoreValue}>{healthReport.overall_score}</div>
            <div className={styles.scoreLabel}>–∏–∑ 100</div>
          </div>

          <div className={styles.breakdown}>
            <h3>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</h3>
            <div className={styles.breakdownGrid}>
              {Object.entries(healthReport.categories).map(([key, category]) => (
                <div key={key} className={styles.breakdownItem}>
                  <div className={styles.breakdownLabel}>
                    {key === "savings"
                      ? "üí∞ –°–±–µ—Ä–µ–∂–µ–Ω–∏—è"
                      : key === "budget"
                      ? "üìä –ë—é–¥–∂–µ—Ç"
                      : key === "debt"
                      ? "üí≥ –î–æ–ª–≥–∏"
                      : "üìà –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"}
                  </div>
                  <div className={styles.breakdownBar}>
                    <div
                      className={styles.breakdownProgress}
                      style={{
                        width: `${category.score}%`,
                        backgroundColor: getScoreColor(category.score),
                      }}
                    />
                  </div>
                  <div className={styles.breakdownValue}>{category.score}%</div>
                </div>
              ))}
            </div>
          </div>

          {/* –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã */}
          {healthReport.insights && healthReport.insights.length > 0 && (
            <div className={styles.insights}>
              <h3>üìä –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:</h3>
              <div className={styles.insightsList}>
                {healthReport.insights.map((insight, idx) => (
                  <div key={idx} className={styles.insightItem}>
                    ‚Ä¢ {insight}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é */}
          {healthReport.recommendations && healthReport.recommendations.length > 0 && (
            <div className={styles.recommendations}>
              <h3>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:</h3>
              <div className={styles.recommendationsList}>
                {healthReport.recommendations.slice(0, 3).map((rec, idx) => (
                  <div key={idx} className={styles.recommendationItem}>
                    <div className={styles.recHeader}>
                      <span className={styles.recPriority}>
                        {rec.priority === "high" ? "üî•" : rec.priority === "medium" ? "‚ö°" : "üí°"}
                      </span>
                      <strong>{rec.title}</strong>
                    </div>
                    <p>{rec.description}</p>
                    {rec.impact && (
                      <div className={styles.recImpact}>
                        –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: <strong>+{rec.impact} –±–∞–ª–ª–æ–≤</strong>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* –°—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç healthReport */}
      {!healthReport && data && (
        <div className={styles.healthCard}>
          <div className={styles.healthHeader}>
            <h2>–í–∞—à–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ</h2>
            <div
              className={styles.grade}
              style={{ backgroundColor: getGradeColor(data.health_score.grade) }}
            >
              {getGradeText(data.health_score.grade)}
            </div>
          </div>

          <div className={styles.scoreCircle}>
            <svg viewBox="0 0 200 200" className={styles.scoreSvg}>
              <circle
                cx="100"
                cy="100"
                r="80"
                fill="none"
                stroke="#e5e7eb"
                strokeWidth="20"
              />
              <circle
                cx="100"
                cy="100"
                r="80"
                fill="none"
                stroke={getGradeColor(data.health_score.grade)}
                strokeWidth="20"
                strokeDasharray={`${data.health_score.overall_score * 5.03} 503`}
                strokeLinecap="round"
                transform="rotate(-90 100 100)"
              />
            </svg>
            <div className={styles.scoreValue}>{data.health_score.overall_score}</div>
            <div className={styles.scoreLabel}>–∏–∑ 100</div>
          </div>

          <div className={styles.breakdown}>
            <h3>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</h3>
            <div className={styles.breakdownGrid}>
              {Object.entries(data.health_score.breakdown).map(([key, value]) => (
                <div key={key} className={styles.breakdownItem}>
                  <div className={styles.breakdownLabel}>
                    {key === "savings_rate"
                      ? "–ù–æ—Ä–º–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π"
                      : key === "expense_stability"
                      ? "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥–æ–≤"
                      : key === "budget_adherence"
                      ? "–°–æ–±–ª—é–¥–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞"
                      : key === "debt_management"
                      ? "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏"
                      : "–ê–≤–∞—Ä–∏–π–Ω—ã–π —Ñ–æ–Ω–¥"}
                  </div>
                  <div className={styles.breakdownBar}>
                    <div
                      className={styles.breakdownProgress}
                      style={{
                        width: `${value}%`,
                        backgroundColor:
                          value >= 70 ? "#10b981" : value >= 40 ? "#f59e0b" : "#ef4444",
                      }}
                    />
                  </div>
                  <div className={styles.breakdownValue}>{value}%</div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* –î–µ–Ω–µ–∂–Ω—ã–µ —É—Ç–µ—á–∫–∏ */}
      {data.money_leaks.length > 0 && (
        <div className={styles.section}>
          <div className={styles.sectionHeader}>
            <div>
              <h2 className={styles.sectionTitle}>üí∏ –î–µ–Ω–µ–∂–Ω—ã–µ —É—Ç–µ—á–∫–∏</h2>
              <p className={styles.sectionDesc}>
                –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≥–¥–µ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –±–æ–ª—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ. –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –º–µ–ª–∫–∏–µ —Ç—Ä–∞—Ç—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é —É—Ç–µ—á–∫—É –±—é–¥–∂–µ—Ç–∞.
              </p>
            </div>
            <div className={styles.totalSavingsPotential}>
              <div className={styles.totalSavingsLabel}>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è:</div>
              <div className={styles.totalSavingsAmount}>
                {formatMoney(data.money_leaks.reduce((sum, l) => sum + l.potential_savings, 0))}/–º–µ—Å
              </div>
              <div className={styles.totalSavingsYear}>
                {formatMoney(data.money_leaks.reduce((sum, l) => sum + l.potential_savings, 0) * 12)}/–≥–æ–¥
              </div>
            </div>
          </div>
          
          <div className={styles.leaksGrid}>
            {data.money_leaks.map((leak, idx) => {
              const yearlyWaste = leak.amount * 12;
              const yearlySavings = leak.potential_savings * 12;
              const savingsPercentage = leak.amount > 0 ? (leak.potential_savings / leak.amount * 100) : 0;
              
              return (
                <div key={idx} className={styles.leakCard}>
                  <div className={styles.leakHeader}>
                    <div className={styles.leakRank}>#{idx + 1}</div>
                    <div className={styles.leakCategory}>
                      <span className={styles.leakCategoryIcon}>üí∞</span>
                      {leak.category}
                    </div>
                    <div className={styles.leakPercentage}>
                      {leak.percentage_of_income.toFixed(1)}%
                    </div>
                  </div>
                  
                  <div className={styles.leakStats}>
                    <div className={styles.leakStat}>
                      <span className={styles.leakStatLabel}>–¢—Ä–∞—Ç–∏—Ç—Å—è:</span>
                      <span className={styles.leakStatValue}>{formatMoney(leak.amount)}/–º–µ—Å</span>
                    </div>
                    <div className={styles.leakStat}>
                      <span className={styles.leakStatLabel}>–ó–∞ –≥–æ–¥:</span>
                      <span className={styles.leakStatValue}>{formatMoney(yearlyWaste)}</span>
                    </div>
                  </div>

                  <div className={styles.leakSavingsBox}>
                    <div className={styles.leakSavingsHeader}>
                      <span>üí° –ú–æ–∂–Ω–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å</span>
                      <span className={styles.leakSavingsPercent}>–¥–æ {savingsPercentage.toFixed(0)}%</span>
                    </div>
                    <div className={styles.leakSavingsAmount}>
                      <div className={styles.leakSavingsMonthly}>
                        <strong>{formatMoney(leak.potential_savings)}</strong>/–º–µ—Å
                      </div>
                      <div className={styles.leakSavingsYearly}>
                        = <strong>{formatMoney(yearlySavings)}</strong>/–≥–æ–¥
                      </div>
                    </div>
                  </div>

                  <div className={styles.leakRecommendation}>
                    <span className={styles.leakRecommendationIcon}>üí¨</span>
                    {leak.recommendation}
                  </div>
                </div>
              );
            })}
          </div>

          {/* –°–æ–≤–µ—Ç –ø–æ —É—Ç–µ—á–∫–∞–º */}
          <div className={styles.leaksTip}>
            <div className={styles.leaksTipIcon}>üí°</div>
            <div className={styles.leaksTipContent}>
              <strong>–°–æ–≤–µ—Ç:</strong> –ù–∞—á–Ω–∏—Ç–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #{1} ‚Äî –æ–Ω–∞ –¥–∞—ë—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç–∫–æ–Ω–æ–º–∏—é. 
              –î–∞–∂–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ 30% –º–æ–∂–µ—Ç –≤—ã—Å–≤–æ–±–æ–¥–∏—Ç—å {formatMoney(data.money_leaks[0].potential_savings * 0.3)}/–º–µ—Å 
              = {formatMoney(data.money_leaks[0].potential_savings * 0.3 * 12)}/–≥–æ–¥!
            </div>
          </div>
        </div>
      )}

      {/* –ò–¥–µ–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç */}
      <div className={styles.section}>
        <h2 className={styles.sectionTitle}>üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏–¥–µ–∞–ª—å–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º</h2>
        <p className={styles.sectionDesc}>
          –ü—Ä–∞–≤–∏–ª–æ 50/30/20: –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –∂–µ–ª–∞–Ω–∏—è, —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è
        </p>
        <div className={styles.budgetComparison}>
          <div className={styles.budgetChart}>
            <h3>–ò–¥–µ–∞–ª—å–Ω—ã–π</h3>
            <div className={styles.budgetChartContainer}>
              <Doughnut
                data={budgetChartData}
                options={{
                  responsive: true,
                  maintainAspectRatio: false,
                  plugins: {
                    legend: { 
                      position: "bottom",
                      labels: {
                        boxWidth: 12,
                        padding: 10,
                        font: { size: 12 }
                      }
                    },
                  },
                }}
              />
            </div>
          </div>
          <div className={styles.budgetChart}>
            <h3>–í–∞—à –±—é–¥–∂–µ—Ç</h3>
            <div className={styles.budgetChartContainer}>
              <Doughnut
                data={userBudgetChartData}
                options={{
                  responsive: true,
                  maintainAspectRatio: false,
                  plugins: {
                    legend: { 
                      position: "bottom",
                      labels: {
                        boxWidth: 12,
                        padding: 10,
                        font: { size: 12 }
                      }
                    },
                  },
                }}
              />
            </div>
          </div>
        </div>
        <div className={styles.budgetRecommendations}>
          {data.ideal_budget.recommendations.map((rec, idx) => (
            <div key={idx} className={styles.budgetRec}>
              ‚Ä¢ {rec}
            </div>
          ))}
        </div>
      </div>

      {/* AI –°–æ–≤–µ—Ç—ã */}
      {data.advice.length > 0 && (
        <div className={styles.section}>
          <h2 className={styles.sectionTitle}>üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–¢–æ–ø-5)</h2>
          <div className={styles.adviceGrid}>
            {data.advice
              .sort((a, b) => a.priority - b.priority) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (1 = —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π)
              .map((advice, idx) => (
                <div key={idx} className={styles.adviceCard} style={{
                  borderLeft: `4px solid ${getPriorityColor(advice.priority)}`
                }}>
                  <div className={styles.adviceHeader}>
                    <div className={styles.adviceHeaderLeft}>
                      <span className={styles.adviceTypeIcon}>{getTypeIcon(advice.type)}</span>
                      <span className={styles.adviceTypeBadge} style={{
                        background: `${getPriorityColor(advice.priority)}15`,
                        color: getPriorityColor(advice.priority),
                        border: `1px solid ${getPriorityColor(advice.priority)}30`
                      }}>
                        {getTypeLabel(advice.type)}
                      </span>
                    </div>
                    <div className={styles.advicePriority} style={{
                      background: getPriorityColor(advice.priority),
                      color: "#fff"
                    }}>
                      #{advice.priority}
                    </div>
                  </div>
                  <h3 className={styles.adviceTitle}>
                    <span className={styles.adviceImpact}>{getImpactIcon(advice.impact)}</span>
                    {advice.title}
                  </h3>
                  <p className={styles.adviceDesc}>{advice.description}</p>
                  
                  {advice.action_items && advice.action_items.length > 0 && (
                    <div className={styles.actionItems}>
                      <strong>üéØ –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:</strong>
                      <ul>
                        {advice.action_items.map((item, i) => (
                          <li key={i}>{item}</li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {advice.expected_result && (
                    <div className={styles.expectedResult}>
                      <strong>‚ú® –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</strong> {advice.expected_result}
                    </div>
                  )}
                  
                  <div className={styles.adviceMeta}>
                    <span className={styles.adviceImpactLabel}>
                      –í–ª–∏—è–Ω–∏–µ: <strong>{advice.impact === "high" ? "–í—ã—Å–æ–∫–æ–µ" : advice.impact === "medium" ? "–°—Ä–µ–¥–Ω–µ–µ" : "–ù–∏–∑–∫–æ–µ"}</strong>
                    </span>
                  </div>
                </div>
              ))}
          </div>
        </div>
      )}

      {/* –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π */}
      {data.action_plan.steps.length > 0 && (
        <div className={styles.section}>
          <div className={styles.sectionHeader}>
            <div>
              <h2 className={styles.sectionTitle}>üéØ –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π</h2>
              <p className={styles.sectionDesc}>
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π
              </p>
            </div>
            <a href="/plans" className={styles.createPlanButton}>
              üìù –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω
            </a>
          </div>
          
          <div className={styles.actionPlanSummary}>
            <div className={styles.planStat}>
              <span className={styles.planStatLabel}>–í—Å–µ–≥–æ —à–∞–≥–æ–≤:</span>
              <span className={styles.planStatValue}>{data.action_plan.steps.length}</span>
            </div>
            <div className={styles.planStat}>
              <span className={styles.planStatLabel}>–û–±—â–µ–µ –≤—Ä–µ–º—è:</span>
              <span className={styles.planStatValue}>{data.action_plan.total_months} –º–µ—Å</span>
            </div>
            <div className={styles.planStat}>
              <span className={styles.planStatLabel}>–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</span>
              <span className={styles.planStatValue}>
                {new Date(Date.now() + data.action_plan.total_months * 30 * 24 * 60 * 60 * 1000).toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}
              </span>
            </div>
          </div>

          <div className={styles.timeline}>
            {data.action_plan.steps.map((step, idx) => {
              // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å—á–∏—Ç–∞–µ–º "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
              const status = idx === 0 ? 'current' : 'pending';
              const cumulativeMonths = data.action_plan.steps
                .slice(0, idx)
                .reduce((sum, s) => sum + s.duration_months, 0);
              
              return (
                <div 
                  key={step.step} 
                  className={`${styles.timelineItem} ${status === 'current' ? styles.timelineItemCurrent : ''}`}
                >
                  <div className={styles.timelineMarker}>
                    <div className={`${styles.timelineNumber} ${status === 'current' ? styles.timelineNumberCurrent : ''}`}>
                      {status === 'current' ? '‚è≥' : step.step}
                    </div>
                    {idx < data.action_plan.steps.length - 1 && (
                      <div className={styles.timelineLine}></div>
                    )}
                  </div>
                  <div className={styles.timelineContent}>
                    <div className={styles.timelineHeader}>
                      <h3>{step.title}</h3>
                      {status === 'current' && (
                        <span className={styles.currentBadge}>–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø</span>
                      )}
                    </div>
                    <p>{step.description}</p>
                    <div className={styles.timelineMeta}>
                      <div className={styles.timelineDuration}>
                        <span className={styles.timelineDurationIcon}>‚è±Ô∏è</span>
                        <span>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <strong>{step.duration_months} –º–µ—Å</strong></span>
                      </div>
                      <div className={styles.timelineStart}>
                        <span className={styles.timelineStartIcon}>üìÖ</span>
                        <span>–ù–∞—á–∞–ª–æ: <strong>
                          {new Date(Date.now() + cumulativeMonths * 30 * 24 * 60 * 60 * 1000).toLocaleDateString('ru-RU', { month: 'short', year: 'numeric' })}
                        </strong></span>
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>

          <div className={styles.planFooter}>
            <div className={styles.planProgress}>
              <div className={styles.planProgressBar}>
                <div className={styles.planProgressFill} style={{ width: '0%' }}></div>
              </div>
              <span className={styles.planProgressText}>–ü—Ä–æ–≥—Ä–µ—Å—Å: 0% (0 –∏–∑ {data.action_plan.steps.length} —à–∞–≥–æ–≤)</span>
            </div>
            <p className={styles.planTip}>
              üí° <strong>–°–æ–≤–µ—Ç:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª <a href="/plans">&quot;–ü–ª–∞–Ω—ã&quot;</a> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
            </p>
          </div>
        </div>
      )}
    </div>
  );
}

"use client";

import { useState, useEffect } from 'react';
import styles from './Achievements.module.css';
import type { AchievementWithProgress, ActivityStreak, UserLevel, AchievementCategory } from '@/lib/gamification/types';
import { ACHIEVEMENT_CATEGORIES, ACHIEVEMENT_TIERS } from '@/lib/gamification/types';

export default function AchievementsClient() {
  const [achievements, setAchievements] = useState<AchievementWithProgress[]>([]);
  const [streak, setStreak] = useState<ActivityStreak | null>(null);
  const [userLevel, setUserLevel] = useState<UserLevel | null>(null);
  const [levelProgress, setLevelProgress] = useState({ current: 0, next: 100, percentage: 0 });
  const [isLoading, setIsLoading] = useState(true);
  const [selectedCategory, setSelectedCategory] = useState<AchievementCategory | 'all'>('all');

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setIsLoading(true);
    try {
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      const [achievementsRes, streaksRes, levelRes] = await Promise.all([
        fetch('/api/gamification/achievements'),
        fetch('/api/gamification/streaks'),
        fetch('/api/gamification/level'),
      ]);

      if (achievementsRes.ok) {
        const { achievements: data } = await achievementsRes.json();
        setAchievements(data);
      }

      if (streaksRes.ok) {
        const { streak: data } = await streaksRes.json();
        setStreak(data);
      }

      if (levelRes.ok) {
        const { level, progress } = await levelRes.json();
        setUserLevel(level);
        setLevelProgress(progress);
      }
    } catch (error) {
      console.error('Failed to load gamification data:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const filteredAchievements = selectedCategory === 'all'
    ? achievements
    : achievements.filter(a => a.category === selectedCategory);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const unlockedCount = achievements.filter(a => a.unlocked).length;
  const totalPoints = achievements
    .filter(a => a.unlocked)
    .reduce((sum, a) => sum + a.points, 0);

  if (isLoading) {
    return (
      <div className={styles.page}>
        <div className={styles.loading}>
          <div className={styles.spinner}></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...</p>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.page}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className={styles.header}>
        <h1>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h1>
        <p>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –Ω–∞–≥—Ä–∞–¥—ã</p>
      </div>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Ä–æ–≤–Ω—è */}
      {userLevel && (
        <div className={styles.levelCard}>
          <div className={styles.levelInfo}>
            <div className={styles.levelBadge}>
              <span className={styles.levelNumber}>{userLevel.level}</span>
            </div>
            <div className={styles.levelDetails}>
              <h2>–£—Ä–æ–≤–µ–Ω—å {userLevel.level}</h2>
              <p>{userLevel.total_xp} XP</p>
            </div>
          </div>

          <div className={styles.levelProgressBar}>
            <div 
              className={styles.levelProgressFill}
              style={{ width: `${levelProgress.percentage}%` }}
            />
          </div>

          <div className={styles.levelStats}>
            <div className={styles.levelStat}>
              <span className={styles.levelStatValue}>{levelProgress.current}</span>
              <span className={styles.levelStatLabel}>/ {levelProgress.next} XP</span>
            </div>
            <div className={styles.levelStat}>
              <span className={styles.levelStatLabel}>–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è</span>
            </div>
          </div>
        </div>
      )}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className={styles.statsGrid}>
        <div className={styles.statCard}>
          <div className={styles.statIcon}>üèÜ</div>
          <div className={styles.statValue}>{unlockedCount}/{achievements.length}</div>
          <div className={styles.statLabel}>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</div>
        </div>

        <div className={styles.statCard}>
          <div className={styles.statIcon}>‚≠ê</div>
          <div className={styles.statValue}>{totalPoints}</div>
          <div className={styles.statLabel}>–û—á–∫–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
        </div>

        {streak && streak.current_streak > 0 && (
          <div className={styles.statCard}>
            <div className={styles.statIcon}>üî•</div>
            <div className={styles.statValue}>{streak.current_streak || 0}</div>
            <div className={styles.statLabel}>–î–Ω–µ–π –ø–æ–¥—Ä—è–¥</div>
          </div>
        )}

        {streak && streak.longest_streak > 0 && (
          <div className={styles.statCard}>
            <div className={styles.statIcon}>‚ö°</div>
            <div className={styles.statValue}>{streak.longest_streak || 0}</div>
            <div className={styles.statLabel}>–†–µ–∫–æ—Ä–¥</div>
          </div>
        )}
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
      <div className={styles.categories}>
        <button
          className={`${styles.categoryBtn} ${selectedCategory === 'all' ? styles.active : ''}`}
          onClick={() => setSelectedCategory('all')}
        >
          –í—Å–µ ({achievements.length})
        </button>
        {Object.entries(ACHIEVEMENT_CATEGORIES).map(([key, cat]) => {
          const count = achievements.filter(a => a.category === key).length;
          return (
            <button
              key={key}
              className={`${styles.categoryBtn} ${selectedCategory === key ? styles.active : ''}`}
              onClick={() => setSelectedCategory(key as AchievementCategory)}
            >
              {cat.icon} {cat.name} ({count})
            </button>
          );
        })}
      </div>

      {/* –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */}
      <div className={styles.achievementsGrid}>
        {filteredAchievements.map((achievement) => {
          const rarity = (achievement.rarity || 'common') as 'common' | 'rare' | 'epic' | 'legendary';
          const category = achievement.category as keyof typeof ACHIEVEMENT_CATEGORIES;
          const tierInfo = ACHIEVEMENT_TIERS[rarity];
          const catInfo = ACHIEVEMENT_CATEGORIES[category] || ACHIEVEMENT_CATEGORIES.transactions;

          return (
            <div
              key={achievement.id}
              className={`${styles.achievementCard} ${achievement.unlocked ? styles.unlocked : styles.locked}`}
            >
              <div 
                className={styles.achievementIcon}
                style={{
                  backgroundColor: achievement.unlocked ? catInfo.color : '#e5e7eb',
                  boxShadow: achievement.unlocked ? `0 0 20px ${tierInfo.glow}` : 'none',
                }}
              >
                {achievement.unlocked ? achievement.icon : 'üîí'}
              </div>

              <div className={styles.achievementContent}>
                <h3>{achievement.title}</h3>
                <p>{achievement.description}</p>

                {!achievement.unlocked && achievement.requirement_value && (
                  <div className={styles.progressSection}>
                    <div className={styles.progressBar}>
                      <div 
                        className={styles.progressFill}
                        style={{ 
                          width: `${achievement.percentage}%`,
                          backgroundColor: catInfo.color,
                        }}
                      />
                    </div>
                    <div className={styles.progressText}>
                      {achievement.progress} / {achievement.maxProgress}
                    </div>
                  </div>
                )}

                {achievement.unlocked && achievement.unlocked_at && (
                  <div className={styles.unlockedDate}>
                    –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ {new Date(achievement.unlocked_at).toLocaleDateString('ru-RU')}
                  </div>
                )}
              </div>

              <div className={styles.achievementMeta}>
                <div 
                  className={styles.tierBadge}
                  style={{ 
                    backgroundColor: tierInfo.color,
                    color: achievement.rarity === 'legendary' ? '#000' : '#fff',
                  }}
                >
                  {tierInfo.name}
                </div>
                <div className={styles.points}>+{achievement.points} XP</div>
              </div>
            </div>
          );
        })}
      </div>

      {filteredAchievements.length === 0 && (
        <div className={styles.emptyState}>
          <div className={styles.emptyIcon}>üéØ</div>
          <h3>–ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</p>
        </div>
      )}
    </div>
  );
}

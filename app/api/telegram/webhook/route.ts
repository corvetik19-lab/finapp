import { NextResponse } from "next/server";
import { createClient, SupabaseClient } from "@supabase/supabase-js";
import {
  sendTelegramMessage,
  parseTelegramCommand,
  formatFinancialMessage,
  getQuickCommandsKeyboard,
  formatErrorMessage,
  answerCallbackQuery,
  editMessageText,
  type TelegramUpdate,
} from "@/lib/telegram/bot";
import { parseCommand, executeCommand } from "@/lib/ai/commands";

export const dynamic = "force-dynamic";

// Service client –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
function getServiceClient() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
  return createClient(supabaseUrl, supabaseServiceKey);
}

/**
 * POST - Webhook –æ—Ç Telegram
 */
export async function POST(request: Request) {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;

    if (!botToken) {
      console.error("TELEGRAM_BOT_TOKEN not configured");
      return NextResponse.json({ error: "Bot not configured" }, { status: 500 });
    }

    const update: TelegramUpdate = await request.json();
    console.log("Telegram update:", update);

    const supabase = getServiceClient();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É)
    if (update.callback_query) {
      await handleCallbackQuery(botToken, update.callback_query, supabase);
      return NextResponse.json({ ok: true });
    }

    const message = update.message;
    if (!message || !message.text) {
      return NextResponse.json({ ok: true });
    }

    const chatId = message.chat.id;
    const text = message.text;
    const telegramUserId = message.from.id;

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_user_id
    const { data: userPrefs } = await supabase
      .from("notification_preferences")
      .select("user_id")
      .eq("telegram_user_id", telegramUserId.toString())
      .single();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    const { command, args } = parseTelegramCommand(text);

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start —Å –∫–æ–¥–æ–º
    if (!userPrefs && command === "start" && args && args.length > 0) {
      await handleLinkAccount(botToken, chatId, telegramUserId, message.from.username, args[0], supabase);
      return NextResponse.json({ ok: true });
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω
    if (!userPrefs) {
      await sendTelegramMessage(botToken, {
        chat_id: chatId,
        text: formatErrorMessage(
          "‚ùå –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É.\n\n" +
          "üîó –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å:\n" +
          "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FinApp\n" +
          "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí Telegram\n" +
          "3. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏\n" +
          "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ: /start –í–ê–®_–ö–û–î"
        ),
        parse_mode: "Markdown",
      });
      return NextResponse.json({ ok: true });
    }

    const userId = userPrefs.user_id;

    switch (command) {
      case "start":
        await handleStart(botToken, chatId);
        break;

      case "help":
        await handleHelp(botToken, chatId);
        break;

      case "balance":
        await handleBalance(botToken, chatId, supabase, userId);
        break;

      case "stats":
        await handleStats(botToken, chatId, supabase, userId);
        break;

      case "budgets":
        await handleBudgets(botToken, chatId, supabase, userId);
        break;

      case "add":
        await handleAdd(botToken, chatId, supabase, userId, args.join(" "));
        break;

      case "settings":
        await handleSettings(botToken, chatId, supabase, userId);
        break;

      default:
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        await handleNaturalCommand(botToken, chatId, supabase, userId, text);
        break;
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error("Telegram webhook error:", error);
    return NextResponse.json({ ok: true }); // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ok —á—Ç–æ–±—ã Telegram –Ω–µ —Å–ø–∞–º–∏–ª
  }
}

async function handleStart(botToken: string, chatId: number) {
  await sendTelegramMessage(botToken, {
    chat_id: chatId,
    text: formatFinancialMessage({
      title: "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
      items: [
        { label: "üì±", value: "–ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" },
        { label: "üí∞", value: "–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –±–∞–ª–∞–Ω—Å" },
        { label: "üìä", value: "–°–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" },
        { label: "üîî", value: "–ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" },
      ],
      footer: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
    }),
    parse_mode: "Markdown",
    reply_markup: getQuickCommandsKeyboard(),
  });
}

async function handleHelp(botToken: string, chatId: number) {
  const helpText = `*üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ç –∑–∞ –º–µ—Å—è—Ü
/budgets - –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—é–¥–∂–µ—Ç–æ–≤
/add <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
/settings - ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*üí¨ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
"–î–æ–±–∞–≤—å 500—Ä –Ω–∞ –∫–æ—Ñ–µ"
"–ü–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å"
"–°–∫–æ–ª—å–∫–æ —è –ø–æ—Ç—Ä–∞—Ç–∏–ª?"

*üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞:*
–ü—Ä–∏–≤—è–∂–∏—Ç–µ Telegram –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è`;

  await sendTelegramMessage(botToken, {
    chat_id: chatId,
    text: helpText,
    parse_mode: "Markdown",
  });
}

async function handleBalance(
  botToken: string,
  chatId: number,
  supabase: SupabaseClient,
  userId: string
) {
  const { data: accounts } = await supabase
    .from("accounts")
    .select("name, balance, currency")
    .eq("user_id", userId);

  if (!accounts || accounts.length === 0) {
    await sendTelegramMessage(botToken, {
      chat_id: chatId,
      text: "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤",
    });
    return;
  }

  const total = accounts.reduce((sum: number, acc: { balance: number }) => sum + acc.balance, 0);

  await sendTelegramMessage(botToken, {
    chat_id: chatId,
    text: formatFinancialMessage({
      title: "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å",
      items: [
        ...accounts.map((acc: { name: string; balance: number }) => ({
          label: acc.name,
          value: formatMoney(acc.balance),
        })),
        { label: "\n*–ò—Ç–æ–≥–æ*", value: formatMoney(total) },
      ],
    }),
    parse_mode: "Markdown",
  });
}

async function handleStats(
  botToken: string,
  chatId: number,
  supabase: SupabaseClient,
  userId: string
) {
  const oneMonthAgo = new Date();
  oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);

  const { data: transactions } = await supabase
    .from("transactions")
    .select("amount, direction")
    .eq("user_id", userId)
    .gte("date", oneMonthAgo.toISOString().split("T")[0]);

  if (!transactions || transactions.length === 0) {
    await sendTelegramMessage(botToken, {
      chat_id: chatId,
      text: "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
    });
    return;
  }

  const income = transactions
    .filter((t: { direction: string }) => t.direction === "income")
    .reduce((sum: number, t: { amount: number }) => sum + t.amount, 0);

  const expense = transactions
    .filter((t: { direction: string }) => t.direction === "expense")
    .reduce((sum: number, t: { amount: number }) => sum + t.amount, 0);

  await sendTelegramMessage(botToken, {
    chat_id: chatId,
    text: formatFinancialMessage({
      title: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü",
      items: [
        { label: "–î–æ—Ö–æ–¥—ã", value: formatMoney(income) },
        { label: "–†–∞—Å—Ö–æ–¥—ã", value: formatMoney(expense) },
        { label: "*–ë–∞–ª–∞–Ω—Å*", value: formatMoney(income - expense) },
        { label: "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", value: transactions.length.toString() },
      ],
    }),
    parse_mode: "Markdown",
  });
}

async function handleBudgets(
  botToken: string,
  chatId: number,
  supabase: SupabaseClient,
  userId: string
) {
  const { data: budgets } = await supabase
    .from("budgets")
    .select("amount, spent, categories(name)")
    .eq("user_id", userId);

  if (!budgets || budgets.length === 0) {
    await sendTelegramMessage(botToken, {
      chat_id: chatId,
      text: "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—é–¥–∂–µ—Ç–æ–≤",
    });
    return;
  }

  const items = budgets.map((b: { spent: number; amount: number; categories?: { name: string } | { name: string }[] | null }) => {
    const percentage = (b.spent / b.amount) * 100;
    const emoji = percentage >= 100 ? "‚ùå" : percentage >= 80 ? "‚ö†Ô∏è" : "‚úÖ";
    return {
      label: `${emoji} ${Array.isArray(b.categories) ? b.categories[0]?.name : b.categories?.name || "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}`,
      value: `${formatMoney(b.spent)} / ${formatMoney(b.amount)} (${percentage.toFixed(0)}%)`,
    };
  });

  await sendTelegramMessage(botToken, {
    chat_id: chatId,
    text: formatFinancialMessage({
      title: "üéØ –í–∞—à–∏ –±—é–¥–∂–µ—Ç—ã",
      items,
    }),
    parse_mode: "Markdown",
  });
}

async function handleAdd(
  botToken: string,
  chatId: number,
  supabase: SupabaseClient,
  userId: string,
  commandText: string
) {
  if (!commandText) {
    await sendTelegramMessage(botToken, {
      chat_id: chatId,
      text: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>\n–ü—Ä–∏–º–µ—Ä: /add 500 –∫–æ—Ñ–µ",
    });
    return;
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥
  const parsed = await parseCommand(`–î–æ–±–∞–≤—å ${commandText}`);
  const result = await executeCommand(parsed, supabase, userId);

  await sendTelegramMessage(botToken, {
    chat_id: chatId,
    text: result.message,
    parse_mode: "Markdown",
  });
}

async function handleNaturalCommand(
  botToken: string,
  chatId: number,
  supabase: SupabaseClient,
  userId: string,
  text: string
) {
  const parsed = await parseCommand(text);

  if (parsed.type === "unknown" || parsed.confidence < 50) {
    await sendTelegramMessage(botToken, {
      chat_id: chatId,
      text: formatErrorMessage(
        "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n\n" + (parsed.suggestion || "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")
      ),
      parse_mode: "Markdown",
    });
    return;
  }

  const result = await executeCommand(parsed, supabase, userId);

  await sendTelegramMessage(botToken, {
    chat_id: chatId,
    text: result.message,
    parse_mode: "Markdown",
  });
}

async function handleLinkAccount(
  botToken: string,
  chatId: number,
  telegramUserId: number,
  telegramUsername: string | undefined,
  code: string,
  supabase: SupabaseClient
) {
  try {
    // –ò—â–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ
    const { data: linkCode } = await supabase
      .from("telegram_link_codes")
      .select("user_id, expires_at, used_at")
      .eq("code", code.toUpperCase())
      .single();

    if (!linkCode) {
      await sendTelegramMessage(botToken, {
        chat_id: chatId,
        text: formatErrorMessage(
          "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏.\n\n" +
          "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
        ),
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (new Date(linkCode.expires_at) < new Date()) {
      await sendTelegramMessage(botToken, {
        chat_id: chatId,
        text: formatErrorMessage(
          "‚ùå –ö–æ–¥ –∏—Å—Ç—ë–∫.\n\n" +
          "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
        ),
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ –∫–æ–¥
    if (linkCode.used_at) {
      await sendTelegramMessage(botToken, {
        chat_id: chatId,
        text: formatErrorMessage(
          "‚ùå –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.\n\n" +
          "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
        ),
      });
      return;
    }

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç (UPSERT - —Å–æ–∑–¥–∞—ë–º –µ—Å–ª–∏ –Ω–µ—Ç)
    const { error: upsertError } = await supabase
      .from("notification_preferences")
      .upsert({
        user_id: linkCode.user_id,
        telegram_user_id: telegramUserId.toString(),
        telegram_username: telegramUsername || null,
        telegram_chat_id: chatId,
        telegram_linked_at: new Date().toISOString(),
      }, {
        onConflict: 'user_id'
      });

    if (upsertError) throw upsertError;

    // –û—Ç–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await supabase
      .from("telegram_link_codes")
      .update({ used_at: new Date().toISOString() })
      .eq("code", code.toUpperCase());

    await sendTelegramMessage(botToken, {
      chat_id: chatId,
      text: "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n" +
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.\n\n" +
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
        "/balance - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n" +
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü\n" +
        "/budgets - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—é–¥–∂–µ—Ç–æ–≤\n" +
        "/add 500 –∫–æ—Ñ–µ - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n\n" +
        "–¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n" +
        "\"–ü–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å\" –∏–ª–∏ \"–î–æ–±–∞–≤—å 1000—Ä –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã\"",
      parse_mode: "Markdown",
    });
  } catch (error) {
    console.error("Link account error:", error);
    await sendTelegramMessage(botToken, {
      chat_id: chatId,
      text: formatErrorMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."),
    });
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
async function handleSettings(
  botToken: string,
  chatId: number,
  supabase: SupabaseClient,
  userId: string
) {
  const { data: settings } = await supabase
    .from("notification_preferences")
    .select("*")
    .eq("user_id", userId)
    .single();

  if (!settings) {
    await sendTelegramMessage(botToken, {
      chat_id: chatId,
      text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
    });
    return;
  }

  const emoji = (enabled: boolean) => (enabled ? "‚úÖ" : "‚ùå");
  const days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"];
  const selectedDays = (settings.schedule_days || [])
    .map((d: number) => days[d - 1])
    .join(", ");

  const text = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n` +
    `üì± *Telegram:* ${emoji(settings.telegram_enabled)}\n` +
    `‚è∞ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:* ${emoji(settings.schedule_enabled)}\n` +
    `üïê *–í—Ä–µ–º—è:* ${settings.schedule_time || "09:00"}\n` +
    `üìÖ *–î–Ω–∏:* ${selectedDays || "–í—Å–µ"}\n\n` +
    `*–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n` +
    `${emoji(settings.overspend_alerts)} –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ç—Ä–∞—Ç\n` +
    `${emoji(settings.budget_warnings)} –ë—é–¥–∂–µ—Ç—ã\n` +
    `${emoji(settings.missing_transaction_reminders)} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n` +
    `${emoji(settings.upcoming_payment_reminders)} –ü–ª–∞—Ç–µ–∂–∏\n` +
    `${emoji(settings.ai_insights)} AI –∏–Ω—Å–∞–π—Ç—ã\n` +
    `${emoji(settings.ai_recommendations)} AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏`;

  await sendTelegramMessage(botToken, {
    chat_id: chatId,
    text,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [
          { text: settings.telegram_enabled ? "üîï Telegram OFF" : "üîî Telegram ON", callback_data: "toggle_telegram" },
          { text: settings.schedule_enabled ? "‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ OFF" : "‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ON", callback_data: "toggle_schedule" },
        ],
        [
          { text: settings.overspend_alerts ? "üí∞ –¢—Ä–∞—Ç—ã OFF" : "üí∞ –¢—Ä–∞—Ç—ã ON", callback_data: "toggle_spending" },
          { text: settings.budget_warnings ? "üéØ –ë—é–¥–∂–µ—Ç—ã OFF" : "üéØ –ë—é–¥–∂–µ—Ç—ã ON", callback_data: "toggle_budgets" },
        ],
        [
          { text: settings.missing_transaction_reminders ? "üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è OFF" : "üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ON", callback_data: "toggle_reminders" },
          { text: settings.upcoming_payment_reminders ? "üí≥ –ü–ª–∞—Ç–µ–∂–∏ OFF" : "üí≥ –ü–ª–∞—Ç–µ–∂–∏ ON", callback_data: "toggle_payments" },
        ],
        [
          { text: settings.ai_insights ? "ü§ñ AI –ò–Ω—Å–∞–π—Ç—ã OFF" : "ü§ñ AI –ò–Ω—Å–∞–π—Ç—ã ON", callback_data: "toggle_insights" },
          { text: settings.ai_recommendations ? "üí° AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ OFF" : "üí° AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ON", callback_data: "toggle_recommendations" },
        ],
        [
          { text: "üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", callback_data: "open_web" },
        ],
      ],
    },
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
 */
async function handleCallbackQuery(
  botToken: string,
  query: NonNullable<TelegramUpdate["callback_query"]>,
  supabase: SupabaseClient
) {
  const callbackData = query.data;
  const telegramUserId = query.from.id;
  const chatId = query.message?.chat.id;
  const messageId = query.message?.message_id;

  if (!callbackData || !chatId || !messageId) {
    await answerCallbackQuery(botToken, query.id, "–û—à–∏–±–∫–∞", true);
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: userPrefs } = await supabase
    .from("notification_preferences")
    .select("user_id")
    .eq("telegram_user_id", telegramUserId.toString())
    .single();

  if (!userPrefs) {
    await answerCallbackQuery(botToken, query.id, "Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω", true);
    return;
  }

  const userId = userPrefs.user_id;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
  if (callbackData === "open_web") {
    await answerCallbackQuery(
      botToken,
      query.id,
      "–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫",
      true
    );
    return;
  }

  // –ú–∞–ø–ø–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –ø–æ–ª—è –ë–î
  const fieldMap: Record<string, string> = {
    toggle_telegram: "telegram_enabled",
    toggle_schedule: "schedule_enabled",
    toggle_spending: "overspend_alerts",
    toggle_budgets: "budget_warnings",
    toggle_reminders: "missing_transaction_reminders",
    toggle_payments: "upcoming_payment_reminders",
    toggle_insights: "ai_insights",
    toggle_recommendations: "ai_recommendations",
  };

  const field = fieldMap[callbackData];
  if (!field) {
    await answerCallbackQuery(botToken, query.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const { data: currentSettings } = await supabase
    .from("notification_preferences")
    .select(field)
    .eq("user_id", userId)
    .single();

  if (!currentSettings) {
    await answerCallbackQuery(botToken, query.id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", true);
    return;
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
  const newValue = !currentSettings[field as keyof typeof currentSettings];

  const { error } = await supabase
    .from("notification_preferences")
    .update({ [field]: newValue })
    .eq("user_id", userId);

  if (error) {
    await answerCallbackQuery(botToken, query.id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", true);
    return;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  const { data: updatedSettings } = await supabase
    .from("notification_preferences")
    .select("*")
    .eq("user_id", userId)
    .single();

  if (updatedSettings) {
    const emoji = (enabled: boolean) => (enabled ? "‚úÖ" : "‚ùå");
    const days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"];
    const selectedDays = (updatedSettings.schedule_days || [])
      .map((d: number) => days[d - 1])
      .join(", ");

    const text = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n` +
      `üì± *Telegram:* ${emoji(updatedSettings.telegram_enabled)}\n` +
      `‚è∞ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:* ${emoji(updatedSettings.schedule_enabled)}\n` +
      `üïê *–í—Ä–µ–º—è:* ${updatedSettings.schedule_time || "09:00"}\n` +
      `üìÖ *–î–Ω–∏:* ${selectedDays || "–í—Å–µ"}\n\n` +
      `*–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n` +
      `${emoji(updatedSettings.overspend_alerts)} –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ç—Ä–∞—Ç\n` +
      `${emoji(updatedSettings.budget_warnings)} –ë—é–¥–∂–µ—Ç—ã\n` +
      `${emoji(updatedSettings.missing_transaction_reminders)} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n` +
      `${emoji(updatedSettings.upcoming_payment_reminders)} –ü–ª–∞—Ç–µ–∂–∏\n` +
      `${emoji(updatedSettings.ai_insights)} AI –∏–Ω—Å–∞–π—Ç—ã\n` +
      `${emoji(updatedSettings.ai_recommendations)} AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏`;

    await editMessageText(botToken, chatId, messageId, text, {
      inline_keyboard: [
        [
          { text: updatedSettings.telegram_enabled ? "üîï Telegram OFF" : "üîî Telegram ON", callback_data: "toggle_telegram" },
          { text: updatedSettings.schedule_enabled ? "‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ OFF" : "‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ON", callback_data: "toggle_schedule" },
        ],
        [
          { text: updatedSettings.overspend_alerts ? "üí∞ –¢—Ä–∞—Ç—ã OFF" : "üí∞ –¢—Ä–∞—Ç—ã ON", callback_data: "toggle_spending" },
          { text: updatedSettings.budget_warnings ? "üéØ –ë—é–¥–∂–µ—Ç—ã OFF" : "üéØ –ë—é–¥–∂–µ—Ç—ã ON", callback_data: "toggle_budgets" },
        ],
        [
          { text: updatedSettings.missing_transaction_reminders ? "üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è OFF" : "üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ON", callback_data: "toggle_reminders" },
          { text: updatedSettings.upcoming_payment_reminders ? "üí≥ –ü–ª–∞—Ç–µ–∂–∏ OFF" : "üí≥ –ü–ª–∞—Ç–µ–∂–∏ ON", callback_data: "toggle_payments" },
        ],
        [
          { text: updatedSettings.ai_insights ? "ü§ñ AI –ò–Ω—Å–∞–π—Ç—ã OFF" : "ü§ñ AI –ò–Ω—Å–∞–π—Ç—ã ON", callback_data: "toggle_insights" },
          { text: updatedSettings.ai_recommendations ? "üí° AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ OFF" : "üí° AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ON", callback_data: "toggle_recommendations" },
        ],
        [
          { text: "üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", callback_data: "open_web" },
        ],
      ],
    });
  }

  await answerCallbackQuery(botToken, query.id, newValue ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ");
}

function formatMoney(amount: number): string {
  return new Intl.NumberFormat("ru-RU", {
    style: "currency",
    currency: "RUB",
    minimumFractionDigits: 0,
  }).format(amount / 100);
}

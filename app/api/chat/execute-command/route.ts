import { NextRequest, NextResponse } from 'next/server';
import { createRSCClient } from '@/lib/supabase/server';
import type { SupabaseClient } from '@supabase/supabase-js';
import {
  parseCommand,
  formatBalanceResponse,
  formatStatsResponse,
  formatTransactionConfirmation,
  type TransactionCommand
} from '@/lib/ai/command-parser';

export const dynamic = 'force-dynamic';

/**
 * POST /api/chat/execute-command
 * 
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * Body: { command: string }
 * Response: { success: boolean, message: string, data?: any }
 */
export async function POST(request: NextRequest) {
  try {
    const supabase = await createRSCClient();
    const {
      data: { user },
    } = await supabase.auth.getUser();

    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await request.json();
    const { command } = body;

    if (!command || typeof command !== 'string') {
      return NextResponse.json(
        { error: 'Command is required' },
        { status: 400 }
      );
    }

    console.log('üéØ Parsing command:', command);

    // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    const parsed = parseCommand(command);
    console.log('üìã Parsed:', parsed);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (parsed.type) {
      case 'add_transaction': {
        const result = await handleAddTransaction(
          supabase,
          user.id,
          parsed.data as TransactionCommand
        );
        return NextResponse.json(result);
      }

      case 'show_balance': {
        const result = await handleShowBalance(supabase, user.id);
        return NextResponse.json(result);
      }

      case 'show_stats': {
        const result = await handleShowStats(
          supabase,
          user.id,
          parsed.data?.category
        );
        return NextResponse.json(result);
      }

      case 'unknown':
      default: {
        // –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –ø–µ—Ä–µ–¥–∞—ë–º –≤ –æ–±—ã—á–Ω—ã–π AI —á–∞—Ç
        return NextResponse.json({
          success: false,
          message: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å AI.',
          isUnknown: true
        });
      }
    }
  } catch (error) {
    console.error('‚ùå Execute command error:', error);
    return NextResponse.json(
      {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã',
        error: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
async function handleAddTransaction(
  supabase: SupabaseClient,
  userId: string,
  transaction: TransactionCommand
) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: accounts } = await supabase
      .from('accounts')
      .select('id, name')
      .eq('user_id', userId)
      .is('deleted_at', null)
      .limit(1);

    if (!accounts || accounts.length === 0) {
      return {
        success: false,
        message: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å—á—ë—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ "–ö–∞—Ä—Ç—ã".'
      };
    }

    const account = accounts[0];

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    let categoryId: string | null = null;

    if (transaction.category) {
      // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏
      const { data: categories } = await supabase
        .from('categories')
        .select('id')
        .eq('user_id', userId)
        .eq('type', transaction.type === 'income' ? 'income' : 'expense')
        .ilike('name', transaction.category)
        .limit(1);

      if (categories && categories.length > 0) {
        categoryId = categories[0].id;
      } else {
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const { data: newCategory } = await supabase
          .from('categories')
          .insert({
            user_id: userId,
            name: transaction.category,
            type: transaction.type === 'income' ? 'income' : 'expense',
            icon: transaction.type === 'income' ? 'üí∞' : 'üí∏',
            color: transaction.type === 'income' ? '#10b981' : '#ef4444'
          })
          .select('id')
          .single();

        if (newCategory) {
          categoryId = newCategory.id;
        }
      }
    }

    // –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const amount = transaction.type === 'expense' ? -Math.abs(transaction.amount) : Math.abs(transaction.amount);
    
    const { data: newTransaction, error } = await supabase
      .from('transactions')
      .insert({
        user_id: userId,
        account_id: account.id,
        category_id: categoryId,
        amount,
        direction: transaction.type === 'income' ? 'income' : 'expense',
        description: transaction.description || (transaction.type === 'income' ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥'),
        occurred_at: new Date().toISOString()
      })
      .select()
      .single();

    if (error) {
      console.error('Database error:', error);
      return {
        success: false,
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ' + error.message
      };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞
    const { error: updateError } = await supabase.rpc('update_account_balance', {
      p_account_id: account.id
    });

    if (updateError) {
      console.error('Balance update error:', updateError);
    }

    console.log('‚úÖ Transaction created:', newTransaction);

    return {
      success: true,
      message: formatTransactionConfirmation(transaction),
      data: {
        transaction: newTransaction,
        account: account.name
      }
    };
  } catch (error) {
    console.error('Add transaction error:', error);
    return {
      success: false,
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
    };
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞
 */
async function handleShowBalance(supabase: SupabaseClient, userId: string) {
  try {
    const { data: accounts, error } = await supabase
      .from('accounts')
      .select('id, name, balance, currency')
      .eq('user_id', userId)
      .is('deleted_at', null)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Database error:', error);
      return {
        success: false,
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤'
      };
    }

    const message = formatBalanceResponse(accounts || []);

    return {
      success: true,
      message,
      data: {
        accounts: accounts || []
      }
    };
  } catch (error) {
    console.error('Show balance error:', error);
    return {
      success: false,
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤'
    };
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
async function handleShowStats(
  supabase: SupabaseClient,
  userId: string,
  category?: string
) {
  try {
    // –ü–µ—Ä–∏–æ–¥ - —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const now = new Date();
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);

    let query = supabase
      .from('transactions')
      .select('id, amount, direction, categories(name)')
      .eq('user_id', userId)
      .eq('direction', 'expense')
      .gte('occurred_at', startOfMonth.toISOString())
      .lte('occurred_at', endOfMonth.toISOString());

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    if (category) {
      // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const { data: categories } = await supabase
        .from('categories')
        .select('id, name')
        .eq('user_id', userId)
        .ilike('name', `%${category}%`)
        .limit(1);

      if (categories && categories.length > 0) {
        query = query.eq('category_id', categories[0].id);
        category = categories[0].name; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –∏–º—è
      } else {
        return {
          success: false,
          message: `‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`
        };
      }
    }

    const { data: transactions, error } = await query;

    if (error) {
      console.error('Database error:', error);
      return {
        success: false,
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
      };
    }

    const total = Math.abs(
      (transactions || []).reduce((sum: number, t: { amount: number }) => sum + t.amount, 0)
    );
    const count = transactions?.length || 0;

    const message = formatStatsResponse(category, total, count, '—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü');

    return {
      success: true,
      message,
      data: {
        category,
        amount: total,
        count,
        period: 'month'
      }
    };
  } catch (error) {
    console.error('Show stats error:', error);
    return {
      success: false,
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    };
  }
}

import { NextRequest, NextResponse } from 'next/server';
import { createRSCClient } from '@/lib/supabase/helpers';

// OpenRouter API –¥–ª—è AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
// eslint-disable-next-line @typescript-eslint/no-explicit-any
async function categorizeWithAI(items: any[], shopName: string) {
  const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY || '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';
  
  const prompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–æ–∫. –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ —Ç–æ–≤–∞—Ä—ã –∏–∑ —á–µ–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
- –ü—Ä–æ–¥—É–∫—Ç—ã (–µ–¥–∞, –Ω–∞–ø–∏—Ç–∫–∏)
- –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç (—Ç–∞–∫—Å–∏, –±–µ–Ω–∑–∏–Ω, –ø–∞—Ä–∫–æ–≤–∫–∞)
- –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è (–∫–∏–Ω–æ, –∏–≥—Ä—ã, –ø–æ–¥–ø–∏—Å–∫–∏)
- –ó–¥–æ—Ä–æ–≤—å–µ (–∞–ø—Ç–µ–∫–∞, –≤—Ä–∞—á–∏, —Å–ø–æ—Ä—Ç)
- –û–¥–µ–∂–¥–∞ (–æ–¥–µ–∂–¥–∞, –æ–±—É–≤—å)
- –î–æ–º (–º–µ–±–µ–ª—å, —Ç–µ—Ö–Ω–∏–∫–∞, —Ä–µ–º–æ–Ω—Ç)
- –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–∫–Ω–∏–≥–∏, –∫—É—Ä—Å—ã)
- –ö–∞—Ñ–µ/–†–µ—Å—Ç–æ—Ä–∞–Ω—ã (–∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã)
- –ü—Ä–æ—á–µ–µ

–ú–∞–≥–∞–∑–∏–Ω: ${shopName}
–¢–æ–≤–∞—Ä—ã:
${items.map((item) => `- ${item.name}: ${item.price}‚ÇΩ`).join('\n')}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON:
{
  "items": [{"name": "...", "price": 0, "category": "..."}],
  "main_category": "..."
}`;

  try {
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'openai/gpt-4o-mini',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.3,
      }),
    });

    if (!response.ok) {
      throw new Error('OpenRouter API error');
    }

    const data = await response.json();
    const content = data.choices[0].message.content;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }
    
    return null;
  } catch (error) {
    console.error('AI categorization error:', error);
    return null;
  }
}

export async function POST(req: NextRequest) {
  try {
    const supabase = await createRSCClient();
    
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const body = await req.json();
    const { shop_name, date, items } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!shop_name || !items || !Array.isArray(items) || items.length === 0) {
      return NextResponse.json({ error: 'Invalid data' }, { status: 400 });
    }

    // AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenRouter
    const categorized = await categorizeWithAI(items, shop_name);
    const categorizedItems = categorized?.items || items;
    const mainCategory = categorized?.main_category || '–ü—Ä–æ—á–µ–µ';

    // –ü–æ–ª—É—á–∏—Ç—å workspace
    const { data: membership } = await supabase
      .from('workspace_members')
      .select('workspace_id')
      .eq('user_id', user.id)
      .single();

    if (!membership) {
      return NextResponse.json({ error: 'No workspace' }, { status: 400 });
    }

    const workspaceId = membership.workspace_id;

    // –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—á—ë—Ç
    const { data: account } = await supabase
      .from('accounts')
      .select('id')
      .eq('workspace_id', workspaceId)
      .is('deleted_at', null)
      .limit(1)
      .single();

    if (!account) {
      return NextResponse.json({ error: 'No account found. Create an account first.' }, { status: 400 });
    }

    // –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    const iconMap: Record<string, string> = {
      '–ü—Ä–æ–¥—É–∫—Ç—ã': 'üõí',
      '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'üöó',
      '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'üéÆ',
      '–ó–¥–æ—Ä–æ–≤—å–µ': 'üíä',
      '–û–¥–µ–∂–¥–∞': 'üëï',
      '–î–æ–º': 'üè†',
      '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'üìö',
      '–ö–∞—Ñ–µ/–†–µ—Å—Ç–æ—Ä–∞–Ω—ã': 'üçî',
      '–ü—Ä–æ—á–µ–µ': 'üì¶',
    };

    const transactions = [];
    
    for (const item of categorizedItems) {
      // –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      const categoryName = item.category || mainCategory;
      
      let categoryId: string | null = null;
      
      const { data: existingCategory } = await supabase
        .from('categories')
        .select('id')
        .eq('name', categoryName)
        .eq('workspace_id', workspaceId)
        .is('deleted_at', null)
        .single();

      if (existingCategory) {
        categoryId = existingCategory.id;
      } else {
        // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const { data: newCategory } = await supabase
          .from('categories')
          .insert({
            workspace_id: workspaceId,
            name: categoryName,
            type: 'expense',
            icon: iconMap[categoryName] || 'üì¶',
          })
          .select('id')
          .single();
        
        if (newCategory) {
          categoryId = newCategory.id;
        }
      }

      transactions.push({
        workspace_id: workspaceId,
        account_id: account.id,
        category_id: categoryId,
        amount_minor: Math.round(item.price * 100), // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        currency: 'RUB',
        direction: 'expense',
        occurred_at: date || new Date().toISOString(),
        note: `${item.name} (${shop_name})`,
        counterparty: shop_name,
      });
    }

    const { data: createdTransactions, error } = await supabase
      .from('transactions')
      .insert(transactions)
      .select('id');

    if (error) {
      console.error('Transaction insert error:', error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    return NextResponse.json({ 
      success: true, 
      count: createdTransactions?.length || 0,
      category: mainCategory,
      shop: shop_name,
      categorized_by_ai: !!categorized,
    });
  } catch (error) {
    console.error('Receipt import error:', error);
    return NextResponse.json({ error: 'Internal error' }, { status: 500 });
  }
}

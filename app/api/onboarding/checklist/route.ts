import { NextResponse } from "next/server";
import { createRouteClient } from "@/lib/supabase/helpers";
import type { SupabaseClient } from "@supabase/supabase-js";

// GET /api/onboarding/checklist - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ–∫-–ª–∏—Å—Ç–∞
export async function GET() {
  try {
    const supabase = await createRouteClient();
    const { data: { user }, error: authError } = await supabase.auth.getUser();

    if (authError || !user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞
    const checks = await Promise.all([
      checkAccounts(supabase, user.id),
      checkTransactions(supabase, user.id),
      checkCategories(supabase, user.id),
      checkBudgets(supabase, user.id),
      checkAIUsage(supabase, user.id),
    ]);

    const items = [
      {
        id: "add_account",
        title: "–î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç",
        description: "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å—á—ë—Ç (–Ω–∞–ª–∏—á–Ω—ã–µ, –∫–∞—Ä—Ç–∞ –∏–ª–∏ –±–∞–Ω–∫)",
        completed: checks[0],
        action: "/accounts",
        icon: "üí≥",
      },
      {
        id: "add_transaction",
        title: "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é",
        description: "–ó–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥",
        completed: checks[1],
        action: "/transactions",
        icon: "üí∞",
      },
      {
        id: "create_category",
        title: "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        description: "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã",
        completed: checks[2],
        action: "/categories",
        icon: "üìÇ",
      },
      {
        id: "set_budget",
        title: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç",
        description: "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –±—é–¥–∂–µ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç—Ä–∞—Ç",
        completed: checks[3],
        action: "/budgets",
        icon: "üéØ",
      },
      {
        id: "try_ai",
        title: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å AI",
        description: "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å AI –ø–æ–º–æ—â–Ω–∏–∫—É –æ –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö",
        completed: checks[4],
        action: "/ai-chat",
        icon: "ü§ñ",
      },
    ];

    const all_completed = items.every((item) => item.completed);

    return NextResponse.json({ items, all_completed });
  } catch (error) {
    console.error("GET /api/onboarding/checklist error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

// PUT /api/onboarding/checklist - –æ—Ç–º–µ—Ç–∏—Ç—å –ø—É–Ω–∫—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
export async function PUT(req: Request) {
  try {
    const supabase = await createRouteClient();
    const { data: { user }, error: authError } = await supabase.auth.getUser();

    if (authError || !user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const body = await req.json();
    const { item_id, completed } = body;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: updateError } = await supabase.auth.updateUser({
      data: {
        [`checklist_${item_id}`]: completed,
        checklist_updated_at: new Date().toISOString(),
      },
    });

    if (updateError) {
      console.error("Failed to update checklist:", updateError);
      return NextResponse.json(
        { error: "Failed to update checklist" },
        { status: 500 }
      );
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("PUT /api/onboarding/checklist error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

async function checkAccounts(supabase: SupabaseClient, userId: string): Promise<boolean> {
  const { count } = await supabase
    .from("accounts")
    .select("*", { count: "exact", head: true })
    .eq("user_id", userId);
  return (count || 0) > 0;
}

async function checkTransactions(supabase: SupabaseClient, userId: string): Promise<boolean> {
  const { count } = await supabase
    .from("transactions")
    .select("*", { count: "exact", head: true })
    .eq("user_id", userId);
  return (count || 0) > 0;
}

async function checkCategories(supabase: SupabaseClient, userId: string): Promise<boolean> {
  const { count } = await supabase
    .from("categories")
    .select("*", { count: "exact", head: true })
    .eq("user_id", userId);
  return (count || 0) > 0;
}

async function checkBudgets(supabase: SupabaseClient, userId: string): Promise<boolean> {
  const { count } = await supabase
    .from("budgets")
    .select("*", { count: "exact", head: true })
    .eq("user_id", userId);
  return (count || 0) > 0;
}

async function checkAIUsage(supabase: SupabaseClient, userId: string): Promise<boolean> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ AI summaries
  const { count } = await supabase
    .from("ai_summaries")
    .select("*", { count: "exact", head: true })
    .eq("user_id", userId);
  return (count || 0) > 0;
}

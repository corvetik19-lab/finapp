import { NextRequest, NextResponse } from 'next/server';
import { createRSCClient } from '@/lib/supabase/server';
import { generateExcelReport } from '@/lib/export/excel-generator';

export const dynamic = 'force-dynamic';

/**
 * GET /api/export/excel
 * 
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Excel –æ—Ç—á—ë—Ç
 * 
 * Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
 * - startDate (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
 * - endDate (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
 */
export async function GET(request: NextRequest) {
  try {
    const supabase = await createRSCClient();
    const {
      data: { user },
    } = await supabase.auth.getUser();

    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query
    const { searchParams } = new URL(request.url);
    const startDate = searchParams.get('startDate') || undefined;
    const endDate = searchParams.get('endDate') || undefined;

    console.log('üìä Generating Excel report for user:', user.id);
    console.log('üìÖ Period:', startDate || 'all', '-', endDate || 'all');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel
    const buffer = await generateExcelReport(supabase, {
      userId: user.id,
      startDate,
      endDate,
    });

    console.log('‚úÖ Excel report generated:', buffer.length, 'bytes');

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const dateStr = new Date().toISOString().split('T')[0];
    const filename = `finapp_report_${dateStr}.xlsx`;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Buffer –≤ Uint8Array)
    return new NextResponse(Uint8Array.from(buffer), {
      status: 200,
      headers: {
        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Length': buffer.length.toString(),
      },
    });
  } catch (error) {
    console.error('‚ùå Excel export error:', error);
    return NextResponse.json(
      {
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –æ—Ç—á—ë—Ç–∞',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

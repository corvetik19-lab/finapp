{
  "name": "Finappka: Webhook ‚Üí Telegram (Instant)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "finappka-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [250, 300],
      "webhookId": "finappka-transaction-created"
    },
    {
      "parameters": {
        "jsCode": "// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å webhook (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)\nconst crypto = require('crypto');\n\nconst payload = JSON.stringify($input.all()[0].json);\nconst signature = $input.all()[0].headers['x-webhook-signature'];\nconst secret = $env.FINAPPKA_WEBHOOK_SECRET;\n\n// –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å—å\nconst expectedSignature = crypto\n  .createHmac('sha256', secret)\n  .update(payload)\n  .digest('hex');\n\n// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ\nif (signature !== expectedSignature) {\n  throw new Error('Invalid webhook signature');\n}\n\n// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\nconst event = $json;\nconst transaction = event.data;\n\nreturn [{\n  json: {\n    event_type: event.event,\n    transaction_id: transaction.id,\n    amount_rub: (transaction.amount / 100).toFixed(2),\n    direction: transaction.direction,\n    direction_emoji: transaction.direction === 'expense' ? 'üí∏' : 'üí∞',\n    category: transaction.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',\n    account: transaction.account?.name || '–ë–µ–∑ —Å—á—ë—Ç–∞',\n    note: transaction.note || '–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏',\n    date: new Date(transaction.occurred_at).toLocaleString('ru-RU'),\n    timestamp: event.occurred_at\n  }\n}];"
      },
      "id": "validate-and-parse",
      "name": "Validate & Parse",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [470, 300]
    },
    {
      "parameters": {
        "chatId": "={{$env.TELEGRAM_CHAT_ID}}",
        "text": "={{$json.direction_emoji}} **–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!**\n\nüíµ **–°—É–º–º–∞:** {{$json.amount_rub}}‚ÇΩ\nüìÅ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {{$json.category}}\nüí≥ **–°—á—ë—Ç:** {{$json.account}}\nüìù **–ó–∞–º–µ—Ç–∫–∞:** {{$json.note}}\nüìÖ **–î–∞—Ç–∞:** {{$json.date}}\n\nüîî _–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Webhook_",
        "additionalFields": {
          "parseMode": "Markdown"
        }
      },
      "id": "telegram",
      "name": "Send to Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [690, 300],
      "credentials": {
        "telegramApi": {
          "id": "REPLACE_WITH_YOUR_TELEGRAM_CREDENTIAL_ID",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": true, \"message\": \"Webhook received\" } }}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [910, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Validate & Parse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate & Parse": {
      "main": [
        [
          {
            "node": "Send to Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Telegram": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {},
  "tags": [
    {
      "createdAt": "2024-10-23T00:00:00.000Z",
      "updatedAt": "2024-10-23T00:00:00.000Z",
      "id": "finappka",
      "name": "finappka"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-10-23T00:00:00.000Z",
  "versionId": "1"
}

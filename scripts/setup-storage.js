/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase Storage
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/setup-storage.js
 * 
 * –¢—Ä–µ–±—É–µ—Ç—Å—è:
 * - SUPABASE_URL
 * - SUPABASE_SERVICE_ROLE_KEY (–∏–∑ .env.local)
 */

/* eslint-disable @typescript-eslint/no-require-imports */
// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
require('dotenv').config({ path: '.env.local' });

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SERVICE_ROLE_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.error('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ .env.local –µ—Å—Ç—å:');
  console.error('  - NEXT_PUBLIC_SUPABASE_URL');
  console.error('  - SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const PROJECT_REF = SUPABASE_URL.split('//')[1].split('.')[0];

console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase Storage...\n');
console.log(`üì¶ –ü—Ä–æ–µ–∫—Ç: ${PROJECT_REF}`);
console.log(`üîó URL: ${SUPABASE_URL}\n`);

async function createBucket() {
  console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ bucket "attachments"...');
  
  try {
    const response = await fetch(`${SUPABASE_URL}/storage/v1/bucket`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${SERVICE_ROLE_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        id: 'attachments',
        name: 'attachments',
        public: false,
        file_size_limit: 10485760, // 10 MB
        allowed_mime_types: null,
      }),
    });

    if (response.ok) {
      console.log('   ‚úÖ Bucket —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      return true;
    } else if (response.status === 409) {
      console.log('   ‚ÑπÔ∏è  Bucket —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return true;
    } else {
      const error = await response.text();
      console.error('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket:', error);
      return false;
    }
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞:', error.message);
    return false;
  }
}

async function createStoragePolicies() {
  console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ RLS –ø–æ–ª–∏—Ç–∏–∫ –¥–ª—è Storage...');
  
  const policies = [
    {
      name: 'Users can upload own files',
      operation: 'INSERT',
      definition: `bucket_id = 'attachments' AND (storage.foldername(name))[1] = auth.uid()::text`,
    },
    {
      name: 'Users can view own files',
      operation: 'SELECT',
      definition: `bucket_id = 'attachments' AND (storage.foldername(name))[1] = auth.uid()::text`,
    },
    {
      name: 'Users can update own files',
      operation: 'UPDATE',
      definition: `bucket_id = 'attachments' AND (storage.foldername(name))[1] = auth.uid()::text`,
    },
    {
      name: 'Users can delete own files',
      operation: 'DELETE',
      definition: `bucket_id = 'attachments' AND (storage.foldername(name))[1] = auth.uid()::text`,
    },
  ];

  console.log('   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Storage –ø–æ–ª–∏—Ç–∏–∫–∏ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ API');
  console.log('   üìù –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard:\n');
  
  policies.forEach((policy, index) => {
    console.log(`   ${index + 1}. ${policy.name}`);
    console.log(`      Operation: ${policy.operation}`);
    console.log(`      Definition: ${policy.definition}\n`);
  });
  
  console.log('   üîó –û—Ç–∫—Ä–æ–π—Ç–µ: https://supabase.com/dashboard/project/' + PROJECT_REF + '/storage/buckets/attachments');
  console.log('   ‚Üí –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "Policies"');
  console.log('   ‚Üí –ù–∞–∂–º–∏—Ç–µ "New policy" –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –≤—ã—à–µ\n');
}

async function verifySetup() {
  console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
  
  try {
    const response = await fetch(`${SUPABASE_URL}/storage/v1/bucket/attachments`, {
      headers: {
        'Authorization': `Bearer ${SERVICE_ROLE_KEY}`,
      },
    });

    if (response.ok) {
      const bucket = await response.json();
      console.log('   ‚úÖ Bucket –Ω–∞–π–¥–µ–Ω');
      console.log(`   üìä –ü—É–±–ª–∏—á–Ω—ã–π: ${bucket.public ? '–î–∞ ‚ùå' : '–ù–µ—Ç ‚úÖ'}`);
      console.log(`   üìè –õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞: ${(bucket.file_size_limit / 1024 / 1024).toFixed(1)} MB`);
      return true;
    } else {
      console.log('   ‚ùå Bucket –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }
  } catch (error) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
    return false;
  }
}

async function main() {
  const bucketCreated = await createBucket();
  
  if (bucketCreated) {
    await createStoragePolicies();
    await verifySetup();
    
    console.log('\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –°–æ–∑–¥–∞–π—Ç–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –≤—Ä—É—á–Ω—É—é (—Å–º. –≤—ã—à–µ)');
    console.log('   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev');
    console.log('   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤\n');
  } else {
    console.log('\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(1);
  }
}

main().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});

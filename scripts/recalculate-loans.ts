/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ principal_paid –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤
 * –ó–∞–ø—É—Å–∫: npx tsx scripts/recalculate-loans.ts
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è NEXT_PUBLIC_SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function recalculateLoans() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤...\n');

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
  const { data: loans, error } = await supabase
    .from('loans')
    .select('id, issue_date, monthly_payment, principal_amount')
    .is('deleted_at', null);

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤:', error);
    process.exit(1);
  }

  if (!loans || loans.length === 0) {
    console.log('‚ÑπÔ∏è  –ö—Ä–µ–¥–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: ${loans.length}\n`);

  const now = new Date();
  let updated = 0;
  let skipped = 0;

  for (const loan of loans) {
    const issueDate = new Date(loan.issue_date);
    const monthlyPayment = loan.monthly_payment / 100; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫
    const principalAmount = loan.principal_amount;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ —Å –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏
    const monthsPassed = (now.getFullYear() - issueDate.getFullYear()) * 12 + (now.getMonth() - issueDate.getMonth());

    let principalPaid = 0;
    if (monthsPassed > 0 && monthlyPayment > 0) {
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –≤–æ–≤—Ä–µ–º—è
      principalPaid = Math.round(monthlyPayment * monthsPassed * 100);
      
      // –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞
      principalPaid = Math.min(principalPaid, principalAmount);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç
    const { error: updateError } = await supabase
      .from('loans')
      .update({ principal_paid: principalPaid })
      .eq('id', loan.id);

    if (updateError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞ ${loan.id}:`, updateError);
      skipped++;
    } else {
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω –∫—Ä–µ–¥–∏—Ç ${loan.id}: –æ–ø–ª–∞—á–µ–Ω–æ ${(principalPaid / 100).toFixed(2)} ‚ÇΩ (${monthsPassed} –º–µ—Å.)`);
      updated++;
    }
  }

  console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
  console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`);
  console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
  console.log(`\n‚ú® –ì–æ—Ç–æ–≤–æ!`);
}

recalculateLoans().catch((error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});

import { createClient } from "@supabase/supabase-js";
import * as dotenv from "dotenv";
import path from "path";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(process.cwd(), ".env.local") });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY");
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function createAvatarsBucket() {
  console.log("ü™£ –°–æ–∑–¥–∞–Ω–∏–µ bucket 'avatars' –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n");

  // 1. –°–æ–∑–¥–∞—ë–º bucket
  const { error: bucketError } = await supabase.storage.createBucket("avatars", {
    public: true, // –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —á—Ç–µ–Ω–∏—è
    fileSizeLimit: 2097152, // 2MB
    allowedMimeTypes: ["image/png", "image/jpeg", "image/jpg", "image/webp", "image/gif"],
  });

  if (bucketError) {
    if (bucketError.message.includes("already exists")) {
      console.log("‚ÑπÔ∏è  Bucket 'avatars' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket:", bucketError);
      process.exit(1);
    }
  } else {
    console.log("‚úÖ Bucket 'avatars' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
  }

  // 2. –°–æ–∑–¥–∞—ë–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏
  console.log("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ RLS –ø–æ–ª–∏—Ç–∏–∫...\n");

  const policies = [
    {
      name: "Users can upload their own avatar",
      sql: `
        CREATE POLICY "Users can upload their own avatar"
        ON storage.objects FOR INSERT
        TO authenticated
        WITH CHECK (
          bucket_id = 'avatars' AND
          (storage.foldername(name))[1] = auth.uid()::text
        );
      `,
    },
    {
      name: "Users can update their own avatar",
      sql: `
        CREATE POLICY "Users can update their own avatar"
        ON storage.objects FOR UPDATE
        TO authenticated
        USING (
          bucket_id = 'avatars' AND
          (storage.foldername(name))[1] = auth.uid()::text
        );
      `,
    },
    {
      name: "Users can delete their own avatar",
      sql: `
        CREATE POLICY "Users can delete their own avatar"
        ON storage.objects FOR DELETE
        TO authenticated
        USING (
          bucket_id = 'avatars' AND
          (storage.foldername(name))[1] = auth.uid()::text
        );
      `,
    },
    {
      name: "Anyone can view avatars",
      sql: `
        CREATE POLICY "Anyone can view avatars"
        ON storage.objects FOR SELECT
        TO public
        USING (bucket_id = 'avatars');
      `,
    },
  ];

  for (const policy of policies) {
    try {
      const { error } = await supabase.rpc("exec_sql", {
        sql_query: policy.sql,
      });

      if (error) {
        if (error.message && error.message.includes("already exists")) {
          console.log(`   ‚ÑπÔ∏è  –ü–æ–ª–∏—Ç–∏–∫–∞ "${policy.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        } else {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ "${policy.name}":`, error.message);
        }
      } else {
        console.log(`   ‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ "${policy.name}" —Å–æ–∑–¥–∞–Ω–∞`);
      }
    } catch (err) {
      console.error(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ "${policy.name}":`, err);
    }
  }

  console.log("\nüéâ –ì–æ—Ç–æ–≤–æ! Bucket 'avatars' –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
  console.log("\nüí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –∞–≤–∞—Ç–∞—Ä—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ");
}

createAvatarsBucket();

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * 
 * –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */

import { SupabaseClient } from "@supabase/supabase-js";
import { detectSpendingAnomalies, type SpendingAlert } from "./spending-detector";
import { detectInactivity, detectLowActivity, type ActivityAlert } from "./activity-detector";
import { detectUpcomingPayments, type PaymentAlert } from "./payment-detector";
import { detectBudgetAlerts, type BudgetAlert } from "./budget-detector";
import { sendTelegramMessage } from "@/lib/telegram/bot";

export interface NotificationPackage {
  user_id: string;
  spending_alerts: SpendingAlert[];
  activity_alerts: ActivityAlert[];
  payment_alerts: PaymentAlert[];
  budget_alerts: BudgetAlert[];
  summary: {
    total_alerts: number;
    high_priority: number;
    medium_priority: number;
    low_priority: number;
  };
  generated_at: string;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function generateNotifications(
  supabase: SupabaseClient,
  userId: string
): Promise<NotificationPackage> {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  const [spendingAlerts, inactivityAlert, lowActivityAlert, paymentAlerts, budgetAlerts] =
    await Promise.all([
      detectSpendingAnomalies(supabase, userId),
      detectInactivity(supabase, userId),
      detectLowActivity(supabase, userId),
      detectUpcomingPayments(supabase, userId),
      detectBudgetAlerts(supabase, userId),
    ]);

  // –°–æ–±–∏—Ä–∞–µ–º activity alerts
  const activityAlerts: ActivityAlert[] = [];
  if (inactivityAlert) activityAlerts.push(inactivityAlert);
  if (lowActivityAlert) activityAlerts.push(lowActivityAlert);

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
  const allAlerts = [
    ...spendingAlerts.map((a) => a.severity),
    ...activityAlerts.map((a) => a.severity),
    ...paymentAlerts.map((a) => a.severity),
    ...budgetAlerts.map((a) => a.severity),
  ];

  const highPriority = allAlerts.filter((s) => s === "high").length;
  const mediumPriority = allAlerts.filter((s) => s === "medium").length;
  const lowPriority = allAlerts.filter((s) => s === "low").length;

  return {
    user_id: userId,
    spending_alerts: spendingAlerts,
    activity_alerts: activityAlerts,
    payment_alerts: paymentAlerts,
    budget_alerts: budgetAlerts,
    summary: {
      total_alerts: allAlerts.length,
      high_priority: highPriority,
      medium_priority: mediumPriority,
      low_priority: lowPriority,
    },
    generated_at: new Date().toISOString(),
  };
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)
 */
export async function saveNotifications(
  supabase: SupabaseClient,
  notifications: NotificationPackage
): Promise<void> {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É notifications_history, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
  console.log(`Generated ${notifications.summary.total_alerts} notifications for user ${notifications.user_id}`);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (Telegram, email, push, etc.)
 */
export async function sendNotifications(
  supabase: SupabaseClient,
  notifications: NotificationPackage
): Promise<{
  sent: number;
  failed: number;
}> {
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: settings } = await supabase
    .from("notification_preferences")
    .select("*")
    .eq("user_id", notifications.user_id)
    .single();

  if (!settings) {
    console.log(`No notification settings found for user ${notifications.user_id}`);
    return { sent: 0, failed: 0 };
  }

  let sent = 0;
  const failed = 0;

  const botToken = process.env.TELEGRAM_BOT_TOKEN;

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  const alertsToSend: Array<{
    type: string;
    title: string;
    message: string;
    severity: string;
  }> = [];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ —Ç–∏–ø–∞
  const getTitle = (type: string): string => {
    const titles: Record<string, string> = {
      overspending: "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ç—Ä–∞—Ç",
      unusual_category: "–ù–µ–æ–±—ã—á–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
      high_frequency: "–í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–∞—Ç",
      large_transaction: "–ö—Ä—É–ø–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è",
      missing_transactions: "–ó–∞–±—ã–ª–∏ –≤–Ω–µ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏?",
      low_activity: "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
      reminder: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
      upcoming_payment: "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –ø–ª–∞—Ç—ë–∂",
      payment_today: "–ü–ª–∞—Ç—ë–∂ —Å–µ–≥–æ–¥–Ω—è",
      overdue_payment: "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂",
      budget_warning: "–í–Ω–∏–º–∞–Ω–∏–µ: –±—é–¥–∂–µ—Ç",
      budget_critical: "–ö—Ä–∏—Ç–∏—á–Ω–æ: –±—é–¥–∂–µ—Ç",
      budget_exceeded: "–ë—é–¥–∂–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω",
    };
    return titles[type] || "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ";
  };

  if (settings.overspend_alerts && notifications.spending_alerts.length > 0) {
    alertsToSend.push(
      ...notifications.spending_alerts.map((a) => ({
        type: "spending",
        title: getTitle(a.type),
        message: a.message,
        severity: a.severity,
      }))
    );
  }

  if (settings.missing_transaction_reminders && notifications.activity_alerts.length > 0) {
    alertsToSend.push(
      ...notifications.activity_alerts.map((a) => ({
        type: "activity",
        title: getTitle(a.type),
        message: a.message,
        severity: a.severity,
      }))
    );
  }

  if (settings.upcoming_payment_reminders && notifications.payment_alerts.length > 0) {
    alertsToSend.push(
      ...notifications.payment_alerts.map((a) => ({
        type: "payment",
        title: getTitle(a.type),
        message: a.message,
        severity: a.severity,
      }))
    );
  }

  if (settings.budget_warnings && notifications.budget_alerts.length > 0) {
    alertsToSend.push(
      ...notifications.budget_alerts.map((a) => ({
        type: "budget",
        title: getTitle(a.type),
        message: a.message,
        severity: a.severity,
      }))
    );
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
  if (settings.telegram_enabled && settings.telegram_chat_id && botToken && alertsToSend.length > 0) {
    try {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const severityEmoji: Record<string, string> = {
        high: "üö®",
        medium: "‚ö†Ô∏è",
        low: "‚ÑπÔ∏è",
      };

      let telegramMessage = `*üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (${alertsToSend.length})*\n\n`;

      for (const alert of alertsToSend) {
        const emoji = severityEmoji[alert.severity] || "‚Ä¢";
        telegramMessage += `${emoji} *${alert.title}*\n${alert.message}\n\n`;
      }

      telegramMessage += `_–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString("ru-RU")}_`;

      const success = await sendTelegramMessage(botToken, {
        chat_id: settings.telegram_chat_id,
        text: telegramMessage,
        parse_mode: "Markdown",
      });

      if (success) {
        sent += alertsToSend.length;
        console.log(`Sent ${alertsToSend.length} notifications to Telegram chat ${settings.telegram_chat_id}`);
      } else {
        console.error(`Failed to send notifications to Telegram chat ${settings.telegram_chat_id}`);
      }
    } catch (error) {
      console.error("Telegram send error:", error);
    }
  } else if (alertsToSend.length > 0) {
    // –ï—Å–ª–∏ Telegram –Ω–µ –≤–∫–ª—é—á–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.log(`Would send ${alertsToSend.length} notifications (Telegram disabled or not configured)`);
    sent += alertsToSend.length;
  }

  return { sent, failed };
}

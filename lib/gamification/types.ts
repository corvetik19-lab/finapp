/**
 * –¢–∏–ø—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

export type AchievementTier = 'common' | 'rare' | 'epic' | 'legendary';
export type AchievementCategory = 'transactions' | 'savings' | 'streaks' | 'budgets' | 'ai' | 'streak';
export type RequirementType = 'count' | 'amount' | 'streak' | 'specific';
export type StreakType = 'daily_login' | 'daily_transaction' | 'budget_check';

export interface AchievementDefinition {
  id: string;
  title: string;
  description: string;
  icon: string;
  category: AchievementCategory;
  rarity: AchievementTier;
  points: number;
  requirement_type: RequirementType;
  requirement_value: number | null;
  created_at: string;
}

export interface UserAchievement {
  id: string;
  user_id: string;
  achievement_id: string;
  unlocked_at: string;
  progress: number;
  is_notified: boolean;
  achievement?: AchievementDefinition; // Joined data
}

export interface ActivityStreak {
  id: string;
  user_id: string;
  streak_type: StreakType;
  current_streak: number;
  longest_streak: number;
  last_activity_date: string | null;
  started_at: string;
  updated_at: string;
}

export interface UserLevel {
  id: string;
  user_id: string;
  level: number;
  xp: number;
  xp_to_next_level: number;
  total_xp: number;
  created_at: string;
  updated_at: string;
}

export interface AchievementProgress {
  definition: AchievementDefinition;
  unlocked: boolean;
  progress: number;
  maxProgress: number;
  percentage: number;
}

// –î–ª—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export interface AchievementWithProgress extends AchievementDefinition {
  unlocked: boolean;
  unlocked_at?: string;
  progress: number;
  maxProgress: number;
  percentage: number;
}

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è UI
export const ACHIEVEMENT_CATEGORIES: Record<AchievementCategory, { name: string; icon: string; color: string }> = {
  transactions: {
    name: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
    icon: 'üìù',
    color: '#3b82f6',
  },
  savings: {
    name: '–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è',
    icon: 'üí∞',
    color: '#10b981',
  },
  streaks: {
    name: '–°—Ç—Ä–∏–∫–∏',
    icon: 'üî•',
    color: '#f59e0b',
  },
  streak: {
    name: '–°—Ç—Ä–∏–∫',
    icon: 'üî•',
    color: '#f59e0b',
  },
  budgets: {
    name: '–ë—é–¥–∂–µ—Ç—ã',
    icon: 'üíº',
    color: '#8b5cf6',
  },
  ai: {
    name: 'AI',
    icon: 'ü§ñ',
    color: '#ec4899',
  },
};

// –¢–∏—Ä—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è UI
export const ACHIEVEMENT_TIERS: Record<AchievementTier, { name: string; color: string; glow: string }> = {
  common: {
    name: '–û–±—ã—á–Ω–æ–µ',
    color: '#6b7280',
    glow: 'rgba(107, 114, 128, 0.3)',
  },
  rare: {
    name: '–†–µ–¥–∫–æ–µ',
    color: '#3b82f6',
    glow: 'rgba(59, 130, 246, 0.4)',
  },
  epic: {
    name: '–≠–ø–∏—á–µ—Å–∫–æ–µ',
    color: '#8b5cf6',
    glow: 'rgba(139, 92, 246, 0.5)',
  },
  legendary: {
    name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ',
    color: '#f59e0b',
    glow: 'rgba(245, 158, 11, 0.6)',
  },
};

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–∑ XP (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å SQL —Ñ—É–Ω–∫—Ü–∏–µ–π)
export function calculateLevelFromXP(xp: number): number {
  return Math.floor(Math.sqrt(xp / 100)) + 1;
}

// –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π XP –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
export function getXPForNextLevel(currentLevel: number): number {
  return (currentLevel * currentLevel - 2 * currentLevel + 1) * 100;
}

// –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
export function getLevelProgress(xp: number): { current: number; next: number; percentage: number } {
  const currentLevel = calculateLevelFromXP(xp);
  const currentLevelXP = getXPForNextLevel(currentLevel - 1);
  const nextLevelXP = getXPForNextLevel(currentLevel);
  const progressXP = xp - currentLevelXP;
  const requiredXP = nextLevelXP - currentLevelXP;
  const percentage = (progressXP / requiredXP) * 100;

  return {
    current: progressXP,
    next: requiredXP,
    percentage: Math.min(100, Math.max(0, percentage)),
  };
}

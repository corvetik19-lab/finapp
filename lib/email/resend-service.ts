import { Resend } from "resend";
import { render } from "@react-email/render";
import BudgetAlertEmail from "./templates/BudgetAlert";
import LargeTransactionAlert from "./templates/LargeTransactionAlert";
import WeeklySummary from "./templates/WeeklySummary";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Resend
const resend = new Resend(process.env.RESEND_API_KEY);

const FROM_EMAIL = process.env.RESEND_FROM_EMAIL || "Finapp <noreply@finapp.com>";
const APP_URL = process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3000";

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞
 */
export async function sendBudgetAlertEmail(params: {
  to: string;
  userName: string;
  categoryName: string;
  budgetLimit: number;
  currentSpent: number;
  percentage: number;
}) {
  try {
    const emailHtml = (await render(
      BudgetAlertEmail({
        ...params,
        appUrl: APP_URL,
      })
    )) as unknown as string;

    const { data, error } = await resend.emails.send({
      from: FROM_EMAIL,
      to: params.to,
      subject: `‚ö†Ô∏è –ë—é–¥–∂–µ—Ç "${params.categoryName}": ${params.percentage.toFixed(0)}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ`,
      html: emailHtml,
    });

    if (error) {
      console.error("Budget alert email error:", error);
      throw error;
    }

    console.log("Budget alert email sent:", data?.id);
    return { success: true, id: data?.id };
  } catch (error) {
    console.error("Failed to send budget alert email:", error);
    return { success: false, error };
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä—É–ø–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export async function sendLargeTransactionEmail(params: {
  to: string;
  userName: string;
  amount: number;
  categoryName: string;
  description: string;
  date: string;
  averageAmount: number;
}) {
  try {
    const emailHtml = (await render(
      LargeTransactionAlert({
        ...params,
        appUrl: APP_URL,
      })
    )) as unknown as string;

    const { data, error } = await resend.emails.send({
      from: FROM_EMAIL,
      to: params.to,
      subject: `üí∏ –ö—Ä—É–ø–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${(params.amount / 100).toFixed(2)} ‚ÇΩ`,
      html: emailHtml,
    });

    if (error) {
      console.error("Large transaction email error:", error);
      throw error;
    }

    console.log("Large transaction email sent:", data?.id);
    return { success: true, id: data?.id };
  } catch (error) {
    console.error("Failed to send large transaction email:", error);
    return { success: false, error };
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
 */
export async function sendWeeklySummaryEmail(params: {
  to: string;
  userName: string;
  weekStart: string;
  weekEnd: string;
  totalIncome: number;
  totalExpense: number;
  balance: number;
  topCategories: Array<{
    name: string;
    amount: number;
    percentage: number;
  }>;
  transactionCount: number;
}) {
  try {
    const emailHtml = (await render(
      WeeklySummary({
        ...params,
        appUrl: APP_URL,
      })
    )) as unknown as string;

    const { data, error } = await resend.emails.send({
      from: FROM_EMAIL,
      to: params.to,
      subject: `üìä –í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç –∑–∞ ${params.weekStart} - ${params.weekEnd}`,
      html: emailHtml,
    });

    if (error) {
      console.error("Weekly summary email error:", error);
      throw error;
    }

    console.log("Weekly summary email sent:", data?.id);
    return { success: true, id: data?.id };
  } catch (error) {
    console.error("Failed to send weekly summary email:", error);
    return { success: false, error };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function checkEmailPreferences(userId: string, type: "budget" | "transaction" | "weekly"): Promise<boolean> {
  try {
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const { createClient } = await import("@supabase/supabase-js");
    
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );

    const { data, error } = await supabase
      .from("user_email_preferences")
      .select("budget_alerts_enabled, transaction_alerts_enabled, weekly_summary_enabled")
      .eq("user_id", userId)
      .single();

    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (error && error.code === "PGRST116") {
      return type !== "weekly"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—é–¥–∂–µ—Ç –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞
    }

    if (error) {
      console.error("Check email preferences error:", error);
      return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    switch (type) {
      case "budget":
        return data.budget_alerts_enabled ?? true;
      case "transaction":
        return data.transaction_alerts_enabled ?? true;
      case "weekly":
        return data.weekly_summary_enabled ?? false;
      default:
        return true;
    }
  } catch (error) {
    console.error("Check email preferences error:", error);
    return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email
 */
export async function sendTestEmail(to: string) {
  try {
    const { data, error } = await resend.emails.send({
      from: FROM_EMAIL,
      to,
      subject: "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç Finapp",
      html: `
        <h1>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h1>
        <p>Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</p>
        <p>–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö.</p>
      `,
    });

    if (error) throw error;

    return { success: true, id: data?.id };
  } catch (error) {
    console.error("Test email error:", error);
    return { success: false, error };
  }
}

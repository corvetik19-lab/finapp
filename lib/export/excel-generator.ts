/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Excel –æ—Ç—á—ë—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º exceljs
 * 
 * –°–æ–∑–¥–∞—ë—Ç Excel —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏:
 * - –°–≤–æ–¥–∫–∞ (–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
 * - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫)
 * - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
 * - –ë—é–¥–∂–µ—Ç—ã (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—é–¥–∂–µ—Ç–æ–≤)
 */

import ExcelJS from 'exceljs';
import type { SupabaseClient } from '@supabase/supabase-js';

// –¢–∏–ø—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î (Supabase –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤—ã –¥–ª—è nested relations)
interface DbTransaction {
  occurred_at: string;
  direction: string;
  amount: number;
  note?: string | null;
  categories: { name: string }[] | null;
  accounts: { name: string }[] | null;
}

interface DbAccount {
  name: string;
  type?: string;
  balance: number;
  currency: string;
}

interface DbBudget {
  limit_amount: number;
  currency?: string;
  period_start?: string;
  period_end?: string;
  categories: { name: string }[] | null;
}

interface ExcelExportOptions {
  userId: string;
  startDate?: string;
  endDate?: string;
  includeCharts?: boolean;
}

interface TransactionRow {
  date: string;
  direction: string;
  amount: number;
  category: string;
  account: string;
  note: string;
}

interface CategorySummary {
  category: string;
  total: number;
  count: number;
  average: number;
  percentage: number;
}

interface ReportData {
  transactions: TransactionRow[];
  accounts: DbAccount[];
  budgets: DbBudget[];
  categories: CategorySummary[];
  summary: {
    totalIncome: number;
    totalExpense: number;
    balance: number;
    transactionCount: number;
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel –æ—Ç—á—ë—Ç
 */
export async function generateExcelReport(
  supabase: SupabaseClient,
  options: ExcelExportOptions
): Promise<Buffer> {
  const workbook = new ExcelJS.Workbook();
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  workbook.creator = 'FinApp';
  workbook.created = new Date();
  workbook.modified = new Date();

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  const data = await fetchReportData(supabase, options);

  // –°–æ–∑–¥–∞—ë–º –ª–∏—Å—Ç—ã
  await createSummarySheet(workbook, data);
  await createTransactionsSheet(workbook, data.transactions);
  await createCategoriesSheet(workbook, data.categories);
  await createBudgetsSheet(workbook, data.budgets);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—É—Ñ–µ—Ä
  return Buffer.from(await workbook.xlsx.writeBuffer());
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á—ë—Ç–∞
 */
async function fetchReportData(
  supabase: SupabaseClient,
  options: ExcelExportOptions
): Promise<ReportData> {
  const { userId, startDate, endDate } = options;

  // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  let transactionsQuery = supabase
    .from('transactions')
    .select(`
      occurred_at,
      direction,
      amount,
      note,
      categories(name),
      accounts(name)
    `)
    .eq('user_id', userId)
    .order('occurred_at', { ascending: false });

  if (startDate) {
    transactionsQuery = transactionsQuery.gte('occurred_at', startDate);
  }
  if (endDate) {
    transactionsQuery = transactionsQuery.lte('occurred_at', endDate);
  }

  const { data: transactions } = await transactionsQuery;

  // –°—á–µ—Ç–∞
  const { data: accounts } = await supabase
    .from('accounts')
    .select('name, type, balance, currency')
    .eq('user_id', userId)
    .is('deleted_at', null);

  // –ë—é–¥–∂–µ—Ç—ã
  const { data: budgets } = await supabase
    .from('budgets')
    .select(`
      limit_amount,
      currency,
      period_start,
      period_end,
      categories(name)
    `)
    .eq('user_id', userId);

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤)
  const transactionRows: TransactionRow[] = (transactions || []).map((t: DbTransaction) => ({
    date: new Date(t.occurred_at).toLocaleDateString('ru-RU'),
    direction: t.direction === 'income' ? '–î–æ—Ö–æ–¥' : t.direction === 'expense' ? '–†–∞—Å—Ö–æ–¥' : '–ü–µ—Ä–µ–≤–æ–¥',
    amount: t.amount / 100,
    category: (t.categories && t.categories.length > 0) ? t.categories[0].name : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    account: (t.accounts && t.accounts.length > 0) ? t.accounts[0].name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
    note: t.note || '',
  }));

  const totalIncome = transactionRows
    .filter(t => t.direction === '–î–æ—Ö–æ–¥')
    .reduce((sum, t) => sum + t.amount, 0);

  const totalExpense = transactionRows
    .filter(t => t.direction === '–†–∞—Å—Ö–æ–¥')
    .reduce((sum, t) => sum + Math.abs(t.amount), 0);

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const categoryMap = new Map<string, { total: number; count: number }>();
  transactionRows
    .filter(t => t.direction === '–†–∞—Å—Ö–æ–¥')
    .forEach(t => {
      const existing = categoryMap.get(t.category) || { total: 0, count: 0 };
      categoryMap.set(t.category, {
        total: existing.total + Math.abs(t.amount),
        count: existing.count + 1,
      });
    });

  const totalCategoryExpenses = Array.from(categoryMap.values())
    .reduce((sum, cat) => sum + cat.total, 0);

  const categories: CategorySummary[] = Array.from(categoryMap.entries())
    .map(([category, data]) => ({
      category,
      total: data.total,
      count: data.count,
      average: data.total / data.count,
      percentage: totalCategoryExpenses > 0 ? (data.total / totalCategoryExpenses) * 100 : 0,
    }))
    .sort((a, b) => b.total - a.total);

  return {
    transactions: transactionRows,
    accounts: accounts || [],
    budgets: budgets || [],
    categories,
    summary: {
      totalIncome,
      totalExpense,
      balance: totalIncome - totalExpense,
      transactionCount: transactionRows.length,
    },
  };
}

/**
 * –õ–∏—Å—Ç: –°–≤–æ–¥–∫–∞
 */
async function createSummarySheet(
  workbook: ExcelJS.Workbook,
  data: ReportData
): Promise<void> {
  const sheet = workbook.addWorksheet('–°–≤–æ–¥–∫–∞', {
    properties: { tabColor: { argb: 'FF3B82F6' } },
  });

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  sheet.mergeCells('A1:D1');
  const titleCell = sheet.getCell('A1');
  titleCell.value = 'üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞';
  titleCell.font = { size: 18, bold: true, color: { argb: 'FF1F2937' } };
  titleCell.alignment = { vertical: 'middle', horizontal: 'center' };
  sheet.getRow(1).height = 30;

  // –ü–µ—Ä–∏–æ–¥
  sheet.getCell('A2').value = '–ü–µ—Ä–∏–æ–¥:';
  sheet.getCell('B2').value = '–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è';
  sheet.getCell('A2').font = { bold: true };

  // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
  sheet.addRow([]);

  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
  const metricsStartRow = 4;
  const metrics: Array<[string, string | number]> = [
    ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
    ['üí∞ –î–æ—Ö–æ–¥—ã', `${data.summary.totalIncome.toFixed(2)} ‚ÇΩ`],
    ['üí∏ –†–∞—Å—Ö–æ–¥—ã', `${data.summary.totalExpense.toFixed(2)} ‚ÇΩ`],
    ['üíµ –ë–∞–ª–∞–Ω—Å', `${data.summary.balance.toFixed(2)} ‚ÇΩ`],
    ['üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', data.summary.transactionCount],
    ['üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π', data.categories.length],
  ];

  metrics.forEach((row, idx) => {
    const currentRow = sheet.getRow(metricsStartRow + idx);
    currentRow.values = row;
    
    if (idx === 0) {
      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
      currentRow.font = { bold: true };
      currentRow.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFE5E7EB' },
      };
    } else {
      // –î–∞–Ω–Ω—ã–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º includes
      const label = String(row[0]);
      if (label.includes('–î–æ—Ö–æ–¥—ã')) {
        currentRow.getCell(2).font = { color: { argb: 'FF10B981' }, bold: true };
      } else if (label.includes('–†–∞—Å—Ö–æ–¥—ã')) {
        currentRow.getCell(2).font = { color: { argb: 'FFEF4444' }, bold: true };
      } else if (label.includes('–ë–∞–ª–∞–Ω—Å')) {
        currentRow.getCell(2).font = { 
          color: { argb: data.summary.balance >= 0 ? 'FF10B981' : 'FFEF4444' }, 
          bold: true 
        };
      }
    }
  });

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
  sheet.getColumn(1).width = 20;
  sheet.getColumn(2).width = 25;

  // –°—á–µ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (data.accounts.length > 0) {
    const accountsStartRow = metricsStartRow + metrics.length + 2;
    sheet.getCell(`A${accountsStartRow}`).value = 'üí≥ –°—á–µ—Ç–∞:';
    sheet.getCell(`A${accountsStartRow}`).font = { bold: true, size: 14 };

    const accountsHeaderRow = accountsStartRow + 1;
    sheet.getRow(accountsHeaderRow).values = ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∏–ø', '–ë–∞–ª–∞–Ω—Å', '–í–∞–ª—é—Ç–∞'];
    sheet.getRow(accountsHeaderRow).font = { bold: true };
    sheet.getRow(accountsHeaderRow).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFE5E7EB' },
    };

    data.accounts.forEach((acc, idx) => {
      const row = sheet.getRow(accountsHeaderRow + 1 + idx);
      const accountType = acc.type === 'debit_card' ? '–î–µ–±–µ—Ç–æ–≤–∞—è' : 
                         acc.type === 'credit_card' ? '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è' : '–ù–∞–ª–∏—á–Ω—ã–µ';
      row.values = [
        acc.name,
        accountType,
        (acc.balance / 100).toFixed(2),
        acc.currency || 'RUB',
      ];
    });
  }
}

/**
 * –õ–∏—Å—Ç: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
async function createTransactionsSheet(
  workbook: ExcelJS.Workbook,
  transactions: TransactionRow[]
): Promise<void> {
  const sheet = workbook.addWorksheet('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', {
    properties: { tabColor: { argb: 'FF8B5CF6' } },
  });

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = ['–î–∞—Ç–∞', '–¢–∏–ø', '–°—É–º–º–∞ (‚ÇΩ)', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–°—á—ë—Ç', '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ'];
  sheet.addRow(headers);

  const headerRow = sheet.getRow(1);
  headerRow.font = { bold: true, color: { argb: 'FFFFFFFF' } };
  headerRow.fill = {
    type: 'pattern',
    pattern: 'solid',
    fgColor: { argb: 'FF8B5CF6' },
  };
  headerRow.height = 25;
  headerRow.alignment = { vertical: 'middle', horizontal: 'center' };

  // –î–∞–Ω–Ω—ã–µ
  transactions.forEach((t, idx) => {
    const row = sheet.addRow([
      t.date,
      t.direction,
      t.amount,
      t.category,
      t.account,
      t.note,
    ]);

    // –¶–≤–µ—Ç –¥–ª—è —Ç–∏–ø–∞
    if (t.direction === '–î–æ—Ö–æ–¥') {
      row.getCell(3).font = { color: { argb: 'FF10B981' }, bold: true };
    } else if (t.direction === '–†–∞—Å—Ö–æ–¥') {
      row.getCell(3).font = { color: { argb: 'FFEF4444' }, bold: true };
    }

    // –ß–µ—Ä–µ–¥—É—é—â–∏–π—Å—è —Ñ–æ–Ω
    if (idx % 2 === 1) {
      row.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFF9FAFB' },
      };
    }
  });

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
  sheet.getColumn(1).width = 15; // –î–∞—Ç–∞
  sheet.getColumn(2).width = 12; // –¢–∏–ø
  sheet.getColumn(3).width = 15; // –°—É–º–º–∞
  sheet.getColumn(3).numFmt = '#,##0.00';
  sheet.getColumn(4).width = 20; // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
  sheet.getColumn(5).width = 20; // –°—á—ë—Ç
  sheet.getColumn(6).width = 30; // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ

  // –ê–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä
  sheet.autoFilter = {
    from: { row: 1, column: 1 },
    to: { row: 1, column: headers.length },
  };

  // –ó–∞–∫—Ä–µ–ø–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
  sheet.views = [{ state: 'frozen', xSplit: 0, ySplit: 1 }];
}

/**
 * –õ–∏—Å—Ç: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
async function createCategoriesSheet(
  workbook: ExcelJS.Workbook,
  categories: CategorySummary[]
): Promise<void> {
  const sheet = workbook.addWorksheet('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', {
    properties: { tabColor: { argb: 'FFEF4444' } },
  });

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–°—É–º–º–∞ (‚ÇΩ)', '–ö–æ–ª-–≤–æ', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (‚ÇΩ)', '% –æ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤'];
  sheet.addRow(headers);

  const headerRow = sheet.getRow(1);
  headerRow.font = { bold: true, color: { argb: 'FFFFFFFF' } };
  headerRow.fill = {
    type: 'pattern',
    pattern: 'solid',
    fgColor: { argb: 'FFEF4444' },
  };
  headerRow.height = 25;
  headerRow.alignment = { vertical: 'middle', horizontal: 'center' };

  // –î–∞–Ω–Ω—ã–µ
  categories.forEach((cat, idx) => {
    const row = sheet.addRow([
      cat.category,
      cat.total,
      cat.count,
      cat.average,
      cat.percentage.toFixed(1) + '%',
    ]);

    // –ß–µ—Ä–µ–¥—É—é—â–∏–π—Å—è —Ñ–æ–Ω
    if (idx % 2 === 1) {
      row.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFF9FAFB' },
      };
    }
  });

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
  sheet.getColumn(1).width = 25;
  sheet.getColumn(2).width = 15;
  sheet.getColumn(2).numFmt = '#,##0.00';
  sheet.getColumn(3).width = 12;
  sheet.getColumn(4).width = 18;
  sheet.getColumn(4).numFmt = '#,##0.00';
  sheet.getColumn(5).width = 20;

  // –ê–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä
  sheet.autoFilter = {
    from: { row: 1, column: 1 },
    to: { row: 1, column: headers.length },
  };

  // –ó–∞–∫—Ä–µ–ø–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
  sheet.views = [{ state: 'frozen', xSplit: 0, ySplit: 1 }];
}

/**
 * –õ–∏—Å—Ç: –ë—é–¥–∂–µ—Ç—ã
 */
async function createBudgetsSheet(
  workbook: ExcelJS.Workbook,
  budgets: DbBudget[]
): Promise<void> {
  const sheet = workbook.addWorksheet('–ë—é–¥–∂–µ—Ç—ã', {
    properties: { tabColor: { argb: 'FF10B981' } },
  });

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–õ–∏–º–∏—Ç (‚ÇΩ)', '–í–∞–ª—é—Ç–∞', '–ü–µ—Ä–∏–æ–¥ –Ω–∞—á–∞–ª–æ', '–ü–µ—Ä–∏–æ–¥ –∫–æ–Ω–µ—Ü'];
  sheet.addRow(headers);

  const headerRow = sheet.getRow(1);
  headerRow.font = { bold: true, color: { argb: 'FFFFFFFF' } };
  headerRow.fill = {
    type: 'pattern',
    pattern: 'solid',
    fgColor: { argb: 'FF10B981' },
  };
  headerRow.height = 25;
  headerRow.alignment = { vertical: 'middle', horizontal: 'center' };

  // –î–∞–Ω–Ω—ã–µ
  budgets.forEach((budget, idx) => {
    const categoryName = (budget.categories && budget.categories.length > 0) 
      ? budget.categories[0].name 
      : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
    
    const row = sheet.addRow([
      categoryName,
      budget.limit_amount / 100,
      budget.currency || 'RUB',
      budget.period_start ? new Date(budget.period_start).toLocaleDateString('ru-RU') : '',
      budget.period_end ? new Date(budget.period_end).toLocaleDateString('ru-RU') : '',
    ]);

    // –ß–µ—Ä–µ–¥—É—é—â–∏–π—Å—è —Ñ–æ–Ω
    if (idx % 2 === 1) {
      row.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFF9FAFB' },
      };
    }
  });

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
  sheet.getColumn(1).width = 25;
  sheet.getColumn(2).width = 15;
  sheet.getColumn(2).numFmt = '#,##0.00';
  sheet.getColumn(3).width = 10;
  sheet.getColumn(4).width = 15;
  sheet.getColumn(5).width = 15;

  // –ê–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä
  sheet.autoFilter = {
    from: { row: 1, column: 1 },
    to: { row: 1, column: headers.length },
  };

  // –ó–∞–∫—Ä–µ–ø–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
  sheet.views = [{ state: 'frozen', xSplit: 0, ySplit: 1 }];
}

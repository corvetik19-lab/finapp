import { openai } from "@ai-sdk/openai";
import { generateText } from "ai";
import { SupabaseClient } from "@supabase/supabase-js";

/**
 * AI –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫
 */

export type CommandType =
  | "add_transaction"
  | "show_balance"
  | "show_stats"
  | "show_budget"
  | "create_budget"
  | "unknown";

export interface ParsedCommand {
  type: CommandType;
  confidence: number; // 0-100%
  params: {
    amount?: number;
    category?: string;
    description?: string;
    date?: string;
    direction?: "income" | "expense";
    period?: string;
  };
  original: string;
  suggestion?: string;
}

/**
 * AI –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
export async function parseCommand(text: string): Promise<ParsedCommand> {
  try {
    const prompt = `–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å.

–ö–æ–º–∞–Ω–¥–∞: "${text}"

–í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–º–∞–Ω–¥:
- add_transaction: –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥)
- show_balance: –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
- show_stats: –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç
- show_budget: –ø–æ–∫–∞–∑–∞—Ç—å –±—é–¥–∂–µ—Ç
- create_budget: —Å–æ–∑–¥–∞—Ç—å –±—é–¥–∂–µ—Ç
- unknown: –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ —á—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

–í–µ—Ä–Ω–∏ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "type": "—Ç–∏–ø_–∫–æ–º–∞–Ω–¥—ã",
  "confidence": 0-100,
  "params": {
    "amount": —á–∏—Å–ª–æ_–≤_–∫–æ–ø–µ–π–∫–∞—Ö_–∏–ª–∏_null,
    "category": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–∏–ª–∏_null",
    "description": "–æ–ø–∏—Å–∞–Ω–∏–µ_–∏–ª–∏_null",
    "direction": "income_–∏–ª–∏_expense_–∏–ª–∏_null"
  }
}

–ü—Ä–∏–º–µ—Ä—ã:
"–î–æ–±–∞–≤—å 500—Ä –Ω–∞ –∫–æ—Ñ–µ" -> {"type": "add_transaction", "confidence": 95, "params": {"amount": 50000, "category": "–ö–∞—Ñ–µ", "direction": "expense"}}
"–ü–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å" -> {"type": "show_balance", "confidence": 100, "params": {}}
"–°–∫–æ–ª—å–∫–æ —Ç—Ä–∞—á—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã" -> {"type": "show_stats", "confidence": 90, "params": {"category": "–ü—Ä–æ–¥—É–∫—Ç—ã"}}

–¢–æ–ª—å–∫–æ JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.`;

    const { text: response } = await generateText({
      model: openai("gpt-4o-mini"),
      prompt,
      temperature: 0.3,
    });

    // –ü–∞—Ä—Å–∏–º JSON
    const jsonMatch = response.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      const parsed = JSON.parse(jsonMatch[0]);
      return {
        type: parsed.type,
        confidence: parsed.confidence || 50,
        params: parsed.params || {},
        original: text,
      };
    }

    // Fallback
    return simpleParse(text);
  } catch (error) {
    console.error("Command parsing error:", error);
    return simpleParse(text);
  }
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –±–µ–∑ AI (fallback)
 */
function simpleParse(text: string): ParsedCommand {
  const lower = text.toLowerCase();

  // –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  if (
    lower.includes("–¥–æ–±–∞–≤") ||
    lower.includes("–ø–æ—Ç—Ä–∞—Ç") ||
    lower.includes("–∫—É–ø–∏–ª") ||
    lower.includes("–∑–∞–ø–ª–∞—Ç–∏–ª")
  ) {
    // –ò—â–µ–º —Å—É–º–º—É
    const amountMatch = text.match(/(\d+)\s*(—Ä|—Ä—É–±|‚ÇΩ)?/);
    const amount = amountMatch ? parseInt(amountMatch[1]) * 100 : undefined;

    // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ "–Ω–∞")
    const categoryMatch = text.match(/–Ω–∞\s+([–∞-—è—ë]+)/i);
    const category = categoryMatch ? categoryMatch[1] : undefined;

    return {
      type: "add_transaction",
      confidence: 70,
      params: {
        amount,
        category,
        direction: "expense",
      },
      original: text,
      suggestion: amount
        ? `–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ ${amount / 100}‚ÇΩ${category ? ` –Ω–∞ ${category}` : ""}?`
        : "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É",
    };
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
  if (lower.includes("–±–∞–ª–∞–Ω—Å") || lower.includes("–æ—Å—Ç–∞—Ç–æ–∫")) {
    return {
      type: "show_balance",
      confidence: 90,
      params: {},
      original: text,
    };
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  if (
    lower.includes("—Å–∫–æ–ª—å–∫–æ") ||
    lower.includes("—Ç—Ä–∞—á—É") ||
    lower.includes("—Ç—Ä–∞—Ç") ||
    lower.includes("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫")
  ) {
    // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const categoryMatch = text.match(/–Ω–∞\s+([–∞-—è—ë]+)/i);
    const category = categoryMatch ? categoryMatch[1] : undefined;

    return {
      type: "show_stats",
      confidence: 80,
      params: {
        category,
        period: "month",
      },
      original: text,
    };
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –±—é–¥–∂–µ—Ç
  if (lower.includes("–±—é–¥–∂–µ—Ç")) {
    return {
      type: "show_budget",
      confidence: 85,
      params: {},
      original: text,
    };
  }

  return {
    type: "unknown",
    confidence: 0,
    params: {},
    original: text,
    suggestion: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '–î–æ–±–∞–≤—å 500—Ä –Ω–∞ –∫–æ—Ñ–µ' –∏–ª–∏ '–ü–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å'",
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ (–ø–æ–¥—Å–∫–∞–∑–∫–∏)
 */
export function getQuickCommands(): {
  label: string;
  command: string;
  icon: string;
}[] {
  return [
    {
      label: "–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å",
      command: "–ü–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤",
      icon: "üí∞",
    },
    {
      label: "–¢—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü",
      command: "–°–∫–æ–ª—å–∫–æ —è –ø–æ—Ç—Ä–∞—Ç–∏–ª –∑–∞ –º–µ—Å—è—Ü?",
      icon: "üìä",
    },
    {
      label: "–ë—é–¥–∂–µ—Ç—ã",
      command: "–ü–æ–∫–∞–∂–∏ –º–æ–∏ –±—é–¥–∂–µ—Ç—ã",
      icon: "üéØ",
    },
    {
      label: "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥",
      command: "–î–æ–±–∞–≤—å 500—Ä –Ω–∞ –∫–æ—Ñ–µ",
      icon: "‚ûï",
    },
    {
      label: "–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
      command: "–ù–∞ —á—Ç–æ —è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—á—É?",
      icon: "üìà",
    },
    {
      label: "–ü—Ä–æ–≥–Ω–æ–∑",
      command: "–°–∫–æ–ª—å–∫–æ —è –ø–æ—Ç—Ä–∞—á—É –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ?",
      icon: "üîÆ",
    },
  ];
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
 */
export async function executeCommand(
  command: ParsedCommand,
  supabase: SupabaseClient,
  userId: string
): Promise<{
  success: boolean;
  message: string;
  data?: unknown;
}> {
  try {
    switch (command.type) {
      case "add_transaction":
        return await addTransaction(command, supabase, userId);

      case "show_balance":
        return await showBalance(supabase, userId);

      case "show_stats":
        return await showStats(command, supabase, userId);

      case "show_budget":
        return await showBudget(supabase, userId);

      default:
        return {
          success: false,
          message: "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. " + (command.suggestion || ""),
        };
    }
  } catch (error) {
    console.error("Command execution error:", error);
    return {
      success: false,
      message: "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã",
    };
  }
}

async function addTransaction(
  command: ParsedCommand,
  supabase: SupabaseClient,
  userId: string
) {
  const { amount, category, description, direction } = command.params;

  if (!amount) {
    return {
      success: false,
      message: "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
    };
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: accounts } = await supabase
    .from("accounts")
    .select("id")
    .eq("user_id", userId)
    .limit(1);

  if (!accounts || accounts.length === 0) {
    return {
      success: false,
      message: "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å—á—ë—Ç",
    };
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  let categoryId = null;
  if (category) {
    const { data: existingCat } = await supabase
      .from("categories")
      .select("id")
      .eq("user_id", userId)
      .ilike("name", category)
      .limit(1)
      .single();

    if (existingCat) {
      categoryId = existingCat.id;
    } else {
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const { data: newCat } = await supabase
        .from("categories")
        .insert({
          user_id: userId,
          name: category,
          type: direction || "expense",
        })
        .select()
        .single();

      categoryId = newCat?.id;
    }
  }

  // –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  const { error } = await supabase.from("transactions").insert({
    user_id: userId,
    account_id: accounts[0].id,
    category_id: categoryId,
    amount,
    direction: direction || "expense",
    description: description || `–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —á–∞—Ç: ${command.original}`,
    date: new Date().toISOString().split("T")[0],
  });

  if (error) throw error;

  return {
    success: true,
    message: `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${direction === "income" ? "–¥–æ—Ö–æ–¥" : "—Ä–∞—Å—Ö–æ–¥"} ${amount / 100}‚ÇΩ${category ? ` (${category})` : ""}`,
  };
}

async function showBalance(supabase: SupabaseClient, userId: string) {
  const { data: accounts } = await supabase
    .from("accounts")
    .select("name, balance, currency")
    .eq("user_id", userId);

  if (!accounts || accounts.length === 0) {
    return {
      success: false,
      message: "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤",
    };
  }

  const total = accounts.reduce((sum: number, acc: { balance: number }) => sum + acc.balance, 0);
  const formatted = new Intl.NumberFormat("ru-RU", {
    style: "currency",
    currency: "RUB",
    minimumFractionDigits: 0,
  }).format(total / 100);

  const details = accounts
    .map(
      (acc: { name: string; balance: number; currency?: string }) =>
        `${acc.name}: ${new Intl.NumberFormat("ru-RU", { style: "currency", currency: acc.currency || "RUB", minimumFractionDigits: 0 }).format(acc.balance / 100)}`
    )
    .join("\n");

  return {
    success: true,
    message: `üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${formatted}\n\n${details}`,
    data: { accounts, total },
  };
}

async function showStats(command: ParsedCommand, supabase: SupabaseClient, userId: string) {
  const { category } = command.params;

  const startDate = new Date();
  startDate.setMonth(startDate.getMonth() - 1);

  let query = supabase
    .from("transactions")
    .select("amount, categories(name)")
    .eq("user_id", userId)
    .eq("direction", "expense")
    .gte("date", startDate.toISOString().split("T")[0]);

  if (category) {
    query = query.ilike("categories.name", `%${category}%`);
  }

  const { data: transactions } = await query;

  if (!transactions || transactions.length === 0) {
    return {
      success: false,
      message: "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
    };
  }

  const total = transactions.reduce((sum: number, t: { amount: number }) => sum + t.amount, 0);
  const formatted = new Intl.NumberFormat("ru-RU", {
    style: "currency",
    currency: "RUB",
    minimumFractionDigits: 0,
  }).format(total / 100);

  return {
    success: true,
    message: `üìä ${category ? `–†–∞—Å—Ö–æ–¥—ã –Ω–∞ ${category}` : "–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"} –∑–∞ –º–µ—Å—è—Ü: ${formatted}\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`,
    data: { total, count: transactions.length },
  };
}

async function showBudget(supabase: SupabaseClient, userId: string) {
  const { data: budgets } = await supabase
    .from("budgets")
    .select("amount, spent, categories(name)")
    .eq("user_id", userId);

  if (!budgets || budgets.length === 0) {
    return {
      success: false,
      message: "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—é–¥–∂–µ—Ç–æ–≤",
    };
  }

  const details = budgets
    .map((b: { spent: number; amount: number; categories?: { name: string } | { name: string }[] | null }) => {
      const percentage = (b.spent / b.amount) * 100;
      const status = percentage >= 100 ? "‚ùå" : percentage >= 80 ? "‚ö†Ô∏è" : "‚úÖ";
      const categoryName = Array.isArray(b.categories) ? b.categories[0]?.name : b.categories?.name;
      return `${status} ${categoryName || "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}: ${(b.spent / 100).toFixed(0)}‚ÇΩ –∏–∑ ${(b.amount / 100).toFixed(0)}‚ÇΩ (${percentage.toFixed(0)}%)`;
    })
    .join("\n");

  return {
    success: true,
    message: `üéØ –í–∞—à–∏ –±—é–¥–∂–µ—Ç—ã:\n\n${details}`,
    data: { budgets },
  };
}

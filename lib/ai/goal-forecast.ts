/**
 * –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π
 * 
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–ª–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç:
 * - –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å
 * - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤
 * - –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–µ—Å—è—Ü–∞–º
 */

import { SupabaseClient } from "@supabase/supabase-js";

export interface Plan {
  id: string;
  name: string;
  goal_amount: number; // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
  current_amount: number; // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
  monthly_contribution: number; // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
  target_date: string | null;
  created_at: string;
  plan_type: string;
}

export interface PlanTopup {
  amount: number;
  created_at: string;
}

export interface GoalForecast {
  plan_id: string;
  plan_name: string;
  goal_amount: number; // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
  current_amount: number; // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
  remaining_amount: number; // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
  progress_percentage: number;
  
  // –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  current_monthly_contribution: number; // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
  average_monthly_contribution: number; // –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞)
  
  // –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –≤–∑–Ω–æ—Å–∞—Ö
  estimated_completion_date: string | null;
  months_to_goal: number | null;
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  recommended_monthly_contribution: number; // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
  target_date: string | null;
  months_until_target: number | null;
  
  // –°—Ü–µ–Ω–∞—Ä–∏–∏
  scenarios: {
    conservative: GoalScenario; // –ï—Å–ª–∏ —Å–Ω–∏–∑–∏—Ç—å –≤–∑–Ω–æ—Å—ã –Ω–∞ 30%
    current: GoalScenario; // –ü—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –≤–∑–Ω–æ—Å–∞—Ö
    aggressive: GoalScenario; // –ï—Å–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –≤–∑–Ω–æ—Å—ã –Ω–∞ 50%
  };
  
  // –ò—Å—Ç–æ—Ä–∏—è
  topups_history: PlanTopup[];
  topups_count: number;
  
  // AI —Å–æ–≤–µ—Ç
  advice: string;
}

export interface GoalScenario {
  monthly_amount: number; // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
  months_to_goal: number;
  completion_date: string;
}

export interface MonthlyProgress {
  month: string;
  projected_amount: number; // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
  percentage: number;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
 */
export async function calculateGoalForecast(
  supabase: SupabaseClient,
  userId: string,
  planId: string
): Promise<GoalForecast | null> {
  // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
  const { data: plan, error: planError } = await supabase
    .from("plans")
    .select("*")
    .eq("id", planId)
    .eq("user_id", userId)
    .single();

  if (planError || !plan) {
    console.error("Plan not found:", planError);
    return null;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–∑–Ω–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
  const threeMonthsAgo = new Date();
  threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);

  const { data: topups } = await supabase
    .from("plan_topups")
    .select("amount, created_at")
    .eq("plan_id", planId)
    .gte("created_at", threeMonthsAgo.toISOString())
    .order("created_at", { ascending: false });

  const topupsHistory = topups || [];
  const topupsCount = topupsHistory.length;

  // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤–∑–Ω–æ—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
  const avgMonthlyContribution =
    topupsCount > 0
      ? Math.round(
          topupsHistory.reduce((sum, t) => sum + t.amount, 0) / 3
        )
      : plan.monthly_contribution || 0;

  const currentAmount = plan.current_amount || 0;
  const goalAmount = plan.goal_amount || 0;
  const remainingAmount = Math.max(0, goalAmount - currentAmount);
  const progressPercentage = goalAmount > 0 ? (currentAmount / goalAmount) * 100 : 0;

  // –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –≤–∑–Ω–æ—Å–∞—Ö
  const monthsToGoal =
    avgMonthlyContribution > 0
      ? Math.ceil(remainingAmount / avgMonthlyContribution)
      : null;

  const estimatedCompletionDate = monthsToGoal
    ? addMonths(new Date(), monthsToGoal).toISOString().split("T")[0]
    : null;

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ target_date
  let recommendedMonthlyContribution = avgMonthlyContribution;
  let monthsUntilTarget = null;

  if (plan.target_date) {
    const targetDate = new Date(plan.target_date);
    const now = new Date();
    monthsUntilTarget = Math.max(
      1,
      Math.ceil((targetDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24 * 30))
    );

    if (monthsUntilTarget > 0 && remainingAmount > 0) {
      recommendedMonthlyContribution = Math.ceil(remainingAmount / monthsUntilTarget);
    }
  }

  // –°—Ü–µ–Ω–∞—Ä–∏–∏
  const scenarios = {
    conservative: calculateScenario(
      currentAmount,
      goalAmount,
      Math.round(avgMonthlyContribution * 0.7)
    ),
    current: calculateScenario(currentAmount, goalAmount, avgMonthlyContribution),
    aggressive: calculateScenario(
      currentAmount,
      goalAmount,
      Math.round(avgMonthlyContribution * 1.5)
    ),
  };

  // AI —Å–æ–≤–µ—Ç
  const advice = generateAdvice(
    plan,
    currentAmount,
    goalAmount,
    avgMonthlyContribution,
    monthsToGoal,
    monthsUntilTarget
  );

  return {
    plan_id: plan.id,
    plan_name: plan.name,
    goal_amount: goalAmount,
    current_amount: currentAmount,
    remaining_amount: remainingAmount,
    progress_percentage: Math.round(progressPercentage * 10) / 10,
    current_monthly_contribution: plan.monthly_contribution || 0,
    average_monthly_contribution: avgMonthlyContribution,
    estimated_completion_date: estimatedCompletionDate,
    months_to_goal: monthsToGoal,
    recommended_monthly_contribution: recommendedMonthlyContribution,
    target_date: plan.target_date,
    months_until_target: monthsUntilTarget,
    scenarios,
    topups_history: topupsHistory,
    topups_count: topupsCount,
    advice,
  };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getAllGoalForecasts(
  supabase: SupabaseClient,
  userId: string
): Promise<GoalForecast[]> {
  const { data: plans } = await supabase
    .from("plans")
    .select("id")
    .eq("user_id", userId)
    .order("created_at", { ascending: false });

  if (!plans || plans.length === 0) {
    return [];
  }

  const forecasts = await Promise.all(
    plans.map((plan) => calculateGoalForecast(supabase, userId, plan.id))
  );

  return forecasts.filter((f): f is GoalForecast => f !== null);
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–º –µ–∂–µ–º–µ—Å—è—á–Ω–æ–º –≤–∑–Ω–æ—Å–µ
 */
function calculateScenario(
  currentAmount: number,
  goalAmount: number,
  monthlyAmount: number
): GoalScenario {
  const remaining = Math.max(0, goalAmount - currentAmount);
  const monthsToGoal =
    monthlyAmount > 0 ? Math.ceil(remaining / monthlyAmount) : 999;

  const completionDate = addMonths(new Date(), monthsToGoal)
    .toISOString()
    .split("T")[0];

  return {
    monthly_amount: monthlyAmount,
    months_to_goal: monthsToGoal,
    completion_date: completionDate,
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç AI —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–∞
 */
function generateAdvice(
  plan: Plan,
  currentAmount: number,
  goalAmount: number,
  avgMonthlyContribution: number,
  monthsToGoal: number | null,
  monthsUntilTarget: number | null
): string {
  const progressPercentage = goalAmount > 0 ? (currentAmount / goalAmount) * 100 : 0;

  // –ï—Å–ª–∏ —Ü–µ–ª—å –ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
  if (progressPercentage >= 90) {
    return `üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π —Ü–µ–ª–∏ "${plan.name}". –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å –≤—Å–µ–≥–æ ${formatMoney(
      goalAmount - currentAmount
    )}!`;
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å target_date –∏ –Ω–µ —É—Å–ø–µ–≤–∞–µ–º
  if (monthsUntilTarget && monthsToGoal && monthsToGoal > monthsUntilTarget) {
    const diff = Math.round(
      (goalAmount - currentAmount) / monthsUntilTarget - avgMonthlyContribution
    );
    return `‚ö†Ô∏è –ß—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏ "${plan.name}" –∫ ${plan.target_date}, —É–≤–µ–ª–∏—á—å—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤–∑–Ω–æ—Å—ã –Ω–∞ ${formatMoney(
      diff
    )} (–¥–æ ${formatMoney(avgMonthlyContribution + diff)}/–º–µ—Å).`;
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –≤–∑–Ω–æ—Å–æ–≤
  if (avgMonthlyContribution === 0) {
    const recommended = Math.ceil((goalAmount - currentAmount) / 12);
    return `üí° –ù–∞—á–Ω–∏—Ç–µ –¥–µ–ª–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤–∑–Ω–æ—Å—ã! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å ${formatMoney(
      recommended
    )}/–º–µ—Å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ "${plan.name}" –∑–∞ –≥–æ–¥.`;
  }

  // –ï—Å–ª–∏ –≤—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É
  if (monthsToGoal && monthsToGoal <= 12) {
    return `‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –≤–∑–Ω–æ—Å–∞—Ö –≤—ã –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ —Ü–µ–ª–∏ "${plan.name}" —á–µ—Ä–µ–∑ ${monthsToGoal} –º–µ—Å (${
      monthsToGoal === 1 ? "–º–µ—Å—è—Ü" : monthsToGoal < 5 ? "–º–µ—Å—è—Ü–∞" : "–º–µ—Å—è—Ü–µ–≤"
    }).`;
  }

  // –î–æ–ª–≥–∏–π –ø—É—Ç—å
  if (monthsToGoal && monthsToGoal > 24) {
    const increase = Math.round(avgMonthlyContribution * 0.5);
    return `üìà –¶–µ–ª—å "${plan.name}" –¥–∞–ª–µ–∫–∞ (${monthsToGoal} –º–µ—Å). –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å –≤–∑–Ω–æ—Å—ã –Ω–∞ ${formatMoney(
      increase
    )} –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.`;
  }

  return `üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–∏ "${plan.name}".`;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Å—è—Ü—ã –∫ –¥–∞—Ç–µ
 */
function addMonths(date: Date, months: number): Date {
  const result = new Date(date);
  result.setMonth(result.getMonth() + months);
  return result;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–Ω—å–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function formatMoney(kopecks: number): string {
  const rubles = kopecks / 100;
  return new Intl.NumberFormat("ru-RU", {
    style: "currency",
    currency: "RUB",
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(rubles);
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–µ—Å—è—Ü–∞–º
 */
export function generateMonthlyProgress(
  currentAmount: number,
  goalAmount: number,
  monthlyContribution: number,
  months: number = 12
): MonthlyProgress[] {
  const progress: MonthlyProgress[] = [];
  let amount = currentAmount;

  for (let i = 1; i <= months; i++) {
    amount = Math.min(goalAmount, amount + monthlyContribution);
    const percentage = goalAmount > 0 ? (amount / goalAmount) * 100 : 0;
    const date = addMonths(new Date(), i);
    const month = date.toLocaleDateString("ru-RU", {
      year: "numeric",
      month: "short",
    });

    progress.push({
      month,
      projected_amount: Math.round(amount),
      percentage: Math.round(percentage * 10) / 10,
    });

    if (amount >= goalAmount) break;
  }

  return progress;
}

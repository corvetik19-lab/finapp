/**
 * –ü–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è AI —á–∞—Ç–∞
 * –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */

export interface ParsedCommand {
  type: 'add_transaction' | 'show_balance' | 'show_stats' | 'unknown';
  data?: TransactionCommand | { category?: string } | Record<string, never>;
  confidence: number; // 0-1, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏
}

export interface TransactionCommand {
  amount: number;
  description?: string;
  category?: string;
  type: 'income' | 'expense';
}

/**
 * –ü–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * –ü—Ä–∏–º–µ—Ä—ã:
 * - "–î–æ–±–∞–≤—å 500 —Ä—É–±–ª–µ–π –Ω–∞ –∫–æ—Ñ–µ"
 * - "–¢—Ä–∞—Ç–∞ 1200—Ä –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã"
 * - "–î–æ—Ö–æ–¥ 50000 –∑–∞—Ä–ø–ª–∞—Ç–∞"
 * - "–ü–æ—Ç—Ä–∞—Ç–∏–ª 350 —Ä—É–± –Ω–∞ –æ–±–µ–¥"
 */
export function parseAddTransaction(text: string): TransactionCommand | null {
  // –î–µ—Ç–µ–∫—Ç —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const isExpense = /(?:—Ç—Ä–∞—Ç|–ø–æ—Ç—Ä–∞—Ç|–∫—É–ø–∏|–æ–ø–ª–∞—Ç|–∑–∞–ø–ª–∞—Ç|—Å–ø–∏—Å–∞–Ω|—Ä–∞—Å—Ö–æ–¥|–º–∏–Ω—É—Å)/i.test(text);
  const isIncome = /(?:–¥–æ—Ö–æ–¥|–ø–æ–ª—É—á|–∑–∞—Ä–∞–±–æ—Ç|–∑–∞—Ä–ø–ª–∞—Ç|–ø—Ä–∏—Ö–æ–¥|–ø–ª—é—Å|–∑–∞—Ä–∞–±–æ—Ç–∞–ª)/i.test(text);

  // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø —è–≤–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞—Å—Ö–æ–¥
  const type: 'income' | 'expense' = isIncome && !isExpense ? 'income' : 'expense';

  // –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
  const amountPatterns = [
    /(\d+(?:[.,]\d+)?)\s*(?:—Ä—É–±|‚ÇΩ|—Ä|rub)/i, // "500 —Ä—É–±", "1500.50‚ÇΩ"
    /(?:—Ä—É–±|‚ÇΩ|—Ä|rub)\s*(\d+(?:[.,]\d+)?)/i, // "‚ÇΩ500", "—Ä—É–± 1500"
    /(\d+(?:[.,]\d+)?)\s*(?:—Ç—ã—Å—è—á|—Ç—ã—Å|–∫)/i, // "5 —Ç—ã—Å—è—á", "1.5–∫"
    /(\d{3,}(?:[.,]\d+)?)/i, // –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ >= 100
  ];

  let amount: number | null = null;
  let multiplier = 1;

  for (const pattern of amountPatterns) {
    const match = text.match(pattern);
    if (match) {
      amount = parseFloat(match[1].replace(',', '.'));
      
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ —Ç—ã—Å—è—á–∞—Ö
      if (/—Ç—ã—Å—è—á|—Ç—ã—Å|–∫/i.test(match[0])) {
        multiplier = 1000;
      }
      break;
    }
  }

  if (!amount || amount <= 0) {
    return null;
  }

  amount = amount * multiplier;

  // –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
  let cleanText = text
    .replace(/(?:–¥–æ–±–∞–≤|—Ç—Ä–∞—Ç|–ø–æ—Ç—Ä–∞—Ç|–∫—É–ø–∏|–æ–ø–ª–∞—Ç|–∑–∞–ø–ª–∞—Ç|—Å–ø–∏—Å–∞–Ω|—Ä–∞—Å—Ö–æ–¥|–¥–æ—Ö–æ–¥|–ø–æ–ª—É—á|–∑–∞—Ä–∞–±–æ—Ç)/gi, '')
    .replace(/\d+(?:[.,]\d+)?\s*(?:—Ä—É–±|‚ÇΩ|—Ä|rub|—Ç—ã—Å—è—á|—Ç—ã—Å|–∫)?/gi, '')
    .replace(/\s+/g, ' ')
    .trim();

  // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–ª–æ–≥–∏
  cleanText = cleanText.replace(/^(?:–Ω–∞|–≤|–¥–ª—è|–ø–æ|–∑–∞)\s+/i, '');

  // –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ "–Ω–∞", "–≤", "–¥–ª—è")
  let category: string | undefined;
  let description: string | undefined;

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  const categoryKeywords: Record<string, string[]> = {
    '–ü—Ä–æ–¥—É–∫—Ç—ã': ['–ø—Ä–æ–¥—É–∫—Ç', '–µ–¥–∞', '–µ–¥—É', '–ø–∏—â–∞', '–º–∞–≥–∞–∑–∏–Ω', '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç', '–ø—è—Ç—ë—Ä–æ—á–∫–∞', '–º–∞–≥–Ω–∏—Ç'],
    '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã': ['–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–æ–±–µ–¥', '–∑–∞–≤—Ç—Ä–∞–∫', '—É–∂–∏–Ω', '–∫–æ—Ñ–µ', '–ø–∏–≤–æ', '–±–∞—Ä'],
    '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': ['—Ç–∞–∫—Å–∏', 'uber', '—è–Ω–¥–µ–∫—Å', '–º–µ—Ç—Ä–æ', '–∞–≤—Ç–æ–±—É—Å', '–±–µ–Ω–∑–∏–Ω', '–∑–∞–ø—Ä–∞–≤–∫–∞', '—Ç–æ–ø–ª–∏–≤–æ'],
    '–ó–¥–æ—Ä–æ–≤—å–µ': ['–∞–ø—Ç–µ–∫–∞', '–ª–µ–∫–∞—Ä—Å—Ç–≤', '–≤—Ä–∞—á', '–±–æ–ª—å–Ω–∏—Ü', '–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫', '–∞–Ω–∞–ª–∏–∑'],
    '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': ['–∫–∏–Ω–æ', '—Ç–µ–∞—Ç—Ä', '–∫–æ–Ω—Ü–µ—Ä—Ç', '–∏–≥—Ä', '–ø–æ–¥–ø–∏—Å–∫', 'netflix', 'spotify'],
    '–û–¥–µ–∂–¥–∞': ['–æ–¥–µ–∂–¥', '–æ–±—É–≤—å', '–∫—É—Ä—Ç–∫', '–±—Ä—é–∫–∏', '–ø–ª–∞—Ç—å–µ', '—Ñ—É—Ç–±–æ–ª–∫'],
    '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ': ['–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç', '–∫–æ–º–º—É–Ω–∞–ª', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤', '–≥–∞–∑', '–≤–æ–¥–∞', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '—Ç–µ–ª–µ—Ñ–æ–Ω'],
    '–ó–∞—Ä–ø–ª–∞—Ç–∞': ['–∑–∞—Ä–ø–ª–∞—Ç', '–æ–∫–ª–∞–¥', '–∞–≤–∞–Ω—Å', '–ø—Ä–µ–º–∏—è'],
    '–ü—Ä–æ—á–µ–µ': []
  };

  // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const lowerClean = cleanText.toLowerCase();
  for (const [cat, keywords] of Object.entries(categoryKeywords)) {
    if (keywords.some(keyword => lowerClean.includes(keyword))) {
      category = cat;
      break;
    }
  }

  // –û–ø–∏—Å–∞–Ω–∏–µ - –≤–µ—Å—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
  if (cleanText.length > 0) {
    description = cleanText.charAt(0).toUpperCase() + cleanText.slice(1);
  }

  return {
    amount,
    description,
    category,
    type
  };
}

/**
 * –ü–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞
 * –ü—Ä–∏–º–µ—Ä—ã:
 * - "–ü–æ–∫–∞–∂–∏ –±–∞–ª–∞–Ω—Å"
 * - "–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç–∞—Ö"
 * - "–ú–æ–π –±–∞–ª–∞–Ω—Å"
 */
export function isBalanceQuery(text: string): boolean {
  const patterns = [
    /(?:–ø–æ–∫–∞–∂–∏|—Å–∫–∞–∂–∏|–∫–∞–∫–æ–π)\s+(?:–º–æ–π\s+)?–±–∞–ª–∞–Ω—Å/i,
    /—Å–∫–æ–ª—å–∫–æ\s+(?:–¥–µ–Ω–µ–≥|—Å—Ä–µ–¥—Å—Ç–≤|—Ä—É–±–ª–µ–π)(?:\s+–Ω–∞\s+—Å—á–µ—Ç)?/i,
    /(?:–º–æ–π|–æ–±—â–∏–π)\s+–±–∞–ª–∞–Ω—Å/i,
    /–±–∞–ª–∞–Ω—Å\s+—Å—á–µ—Ç/i,
  ];

  return patterns.some(pattern => pattern.test(text));
}

/**
 * –ü–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
 * –ü—Ä–∏–º–µ—Ä—ã:
 * - "–°–∫–æ–ª—å–∫–æ —è —Ç—Ä–∞—á—É –Ω–∞ –µ–¥—É"
 * - "–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
 * - "–¢—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç—ã"
 */
export function parseStatsQuery(text: string): { category?: string } | null {
  const patterns = [
    /(?:—Å–∫–æ–ª—å–∫–æ|—Ç—Ä–∞—Ç—ã|—Ä–∞—Å—Ö–æ–¥[—ã]?)\s+(?:—è\s+)?(?:—Ç—Ä–∞—á[—É]?|–ø–æ—Ç—Ä–∞—Ç|—Ç—Ä–∞—Ç–∏–ª)\s+–Ω–∞\s+([–∞-—è—ë\s]+)/i,
    /(?:—Ä–∞—Å—Ö–æ–¥[—ã]?|—Ç—Ä–∞—Ç—ã)\s+(?:–Ω–∞|–ø–æ)\s+(?:–∫–∞—Ç–µ–≥–æ—Ä–∏[–∏]?\s+)?([–∞-—è—ë\s]+)/i,
    /—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\s+(?:–ø–æ\s+)?([–∞-—è—ë\s]+)/i,
  ];

  for (const pattern of patterns) {
    const match = text.match(pattern);
    if (match) {
      const category = match[1].trim();
      return { category };
    }
  }

  // –û–±—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (/(?:–æ–±—â[–∏–µ]–µ|–≤—Å–µ)\s+(?:—Ä–∞—Å—Ö–æ–¥[—ã]?|—Ç—Ä–∞—Ç—ã)/i.test(text)) {
    return {};
  }

  return null;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã
 */
export function parseCommand(text: string): ParsedCommand {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  if (/(?:–¥–æ–±–∞–≤|—Ç—Ä–∞—Ç|–ø–æ—Ç—Ä–∞—Ç|–∫—É–ø–∏|–æ–ø–ª–∞—Ç|–¥–æ—Ö–æ–¥|–ø–æ–ª—É—á)/i.test(text)) {
    const transaction = parseAddTransaction(text);
    if (transaction && transaction.amount > 0) {
      return {
        type: 'add_transaction',
        data: transaction,
        confidence: transaction.category ? 0.9 : 0.7
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞
  if (isBalanceQuery(text)) {
    return {
      type: 'show_balance',
      confidence: 0.95
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const statsQuery = parseStatsQuery(text);
  if (statsQuery !== null) {
    return {
      type: 'show_stats',
      data: statsQuery,
      confidence: statsQuery.category ? 0.85 : 0.75
    };
  }

  // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø–µ—Ä–µ–¥–∞—ë–º –≤ –æ–±—ã—á–Ω—ã–π AI —á–∞—Ç
  return {
    type: 'unknown',
    confidence: 0
  };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö
 */
export function formatMoney(amount: number): string {
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency: 'RUB',
    minimumFractionDigits: 0,
    maximumFractionDigits: 2
  }).format(amount / 100);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞
 */
export function formatBalanceResponse(accounts: Array<{ name: string; balance: number; currency: string }>): string {
  if (accounts.length === 0) {
    return 'üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å—á—ë—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ "–ö–∞—Ä—Ç—ã".';
  }

  const total = accounts.reduce((sum, acc) => sum + acc.balance, 0);
  
  let response = 'üí∞ **–í–∞—à–∏ —Å—á–µ—Ç–∞:**\n\n';
  
  accounts.forEach(acc => {
    const balance = formatMoney(acc.balance);
    const emoji = acc.balance >= 0 ? 'üí≥' : '‚ö†Ô∏è';
    response += `${emoji} **${acc.name}**: ${balance}\n`;
  });

  response += `\n**–ò—Ç–æ–≥–æ:** ${formatMoney(total)}`;

  return response;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
export function formatStatsResponse(
  category: string | undefined,
  amount: number,
  count: number,
  period: string = '–º–µ—Å—è—Ü'
): string {
  const formattedAmount = formatMoney(amount);
  
  if (category) {
    return `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}"** –∑–∞ ${period}:\n\n` +
           `üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: **${formattedAmount}**\n` +
           `üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: **${count}**\n` +
           `üìà –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: **${formatMoney(count > 0 ? amount / count : 0)}**`;
  } else {
    return `üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤** –∑–∞ ${period}:\n\n` +
           `üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: **${formattedAmount}**\n` +
           `üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: **${count}**`;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export function formatTransactionConfirmation(transaction: TransactionCommand): string {
  const emoji = transaction.type === 'income' ? 'üí∞' : 'üí∏';
  const typeText = transaction.type === 'income' ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥';
  const amount = formatMoney(transaction.amount);
  
  let text = `${emoji} **${typeText}**: ${amount}\n`;
  
  if (transaction.description) {
    text += `üìù ${transaction.description}\n`;
  }
  
  if (transaction.category) {
    text += `üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${transaction.category}\n`;
  }
  
  text += '\n‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!';
  
  return text;
}

-- –ú–∏–≥—Ä–∞—Ü–∏—è: –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è (–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å—Ç—Ä–∏–∫–∏, —É—Ä–æ–≤–Ω–∏)
-- –î–∞—Ç–∞: 2025-10-22
-- –û–ø–∏—Å–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, —Å—Ç—Ä–∏–∫–æ–≤ –∏ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

-- –¢–∞–±–ª–∏—Ü–∞: achievements (—à–∞–±–ª–æ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
CREATE TABLE IF NOT EXISTS achievements (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  code text UNIQUE NOT NULL, -- —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ (first_transaction, budget_master, etc.)
  title text NOT NULL,
  description text NOT NULL,
  icon text NOT NULL, -- —ç–º–æ–¥–∑–∏ –∏–ª–∏ –∏–∫–æ–Ω–∫–∞
  category text NOT NULL, -- transactions, budgets, savings, ai, streak
  requirement_type text NOT NULL, -- count, amount, streak, specific
  requirement_value integer, -- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  points integer DEFAULT 10, -- XP points –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
  rarity text DEFAULT 'common', -- common, rare, epic, legendary
  created_at timestamptz DEFAULT now()
);

-- –¢–∞–±–ª–∏—Ü–∞: user_achievements (–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
CREATE TABLE IF NOT EXISTS user_achievements (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  achievement_id uuid NOT NULL REFERENCES achievements(id) ON DELETE CASCADE,
  unlocked_at timestamptz DEFAULT now(),
  progress integer DEFAULT 0, -- —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
  UNIQUE(user_id, achievement_id)
);

-- –¢–∞–±–ª–∏—Ü–∞: user_streaks (—Å—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
CREATE TABLE IF NOT EXISTS user_streaks (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid UNIQUE NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  current_streak integer DEFAULT 0, -- —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫ (–¥–Ω–∏ –ø–æ–¥—Ä—è–¥)
  longest_streak integer DEFAULT 0, -- –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–∫
  last_activity_date date, -- –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  total_active_days integer DEFAULT 0, -- –≤—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- –¢–∞–±–ª–∏—Ü–∞: user_levels (—É—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
CREATE TABLE IF NOT EXISTS user_levels (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid UNIQUE NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  level integer DEFAULT 1,
  xp integer DEFAULT 0, -- –æ–ø—ã—Ç
  xp_to_next_level integer DEFAULT 100, -- –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  total_xp integer DEFAULT 0, -- –≤—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–ø—ã—Ç–∞
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- –¢–∞–±–ª–∏—Ü–∞: challenges (—á–µ–ª–ª–µ–Ω–¥–∂–∏)
CREATE TABLE IF NOT EXISTS challenges (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  code text UNIQUE NOT NULL,
  title text NOT NULL,
  description text NOT NULL,
  icon text NOT NULL,
  challenge_type text NOT NULL, -- daily, weekly, monthly
  requirement_type text NOT NULL,
  requirement_value integer NOT NULL,
  reward_xp integer DEFAULT 50,
  starts_at timestamptz DEFAULT now(),
  ends_at timestamptz,
  is_active boolean DEFAULT true,
  created_at timestamptz DEFAULT now()
);

-- –¢–∞–±–ª–∏—Ü–∞: user_challenges (–ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ–ª–ª–µ–Ω–¥–∂–µ–π)
CREATE TABLE IF NOT EXISTS user_challenges (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  challenge_id uuid NOT NULL REFERENCES challenges(id) ON DELETE CASCADE,
  progress integer DEFAULT 0,
  completed boolean DEFAULT false,
  completed_at timestamptz,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  UNIQUE(user_id, challenge_id)
);

-- –ò–Ω–¥–µ–∫—Å—ã
CREATE INDEX IF NOT EXISTS idx_user_achievements_user_id ON user_achievements(user_id);
CREATE INDEX IF NOT EXISTS idx_user_achievements_achievement_id ON user_achievements(achievement_id);
CREATE INDEX IF NOT EXISTS idx_user_streaks_user_id ON user_streaks(user_id);
CREATE INDEX IF NOT EXISTS idx_user_levels_user_id ON user_levels(user_id);
CREATE INDEX IF NOT EXISTS idx_user_challenges_user_id ON user_challenges(user_id);
CREATE INDEX IF NOT EXISTS idx_user_challenges_challenge_id ON user_challenges(challenge_id);
CREATE INDEX IF NOT EXISTS idx_challenges_active ON challenges(is_active) WHERE is_active = true;

-- RLS –ø–æ–ª–∏—Ç–∏–∫–∏
ALTER TABLE achievements ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_achievements ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_streaks ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_levels ENABLE ROW LEVEL SECURITY;
ALTER TABLE challenges ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_challenges ENABLE ROW LEVEL SECURITY;

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è achievements (–≤—Å–µ –º–æ–≥—É—Ç —á–∏—Ç–∞—Ç—å)
CREATE POLICY "Anyone can view achievements"
  ON achievements FOR SELECT
  TO authenticated
  USING (true);

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è user_achievements
CREATE POLICY "Users can view their own achievements"
  ON user_achievements FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Users can insert their own achievements"
  ON user_achievements FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è user_streaks
CREATE POLICY "Users can view their own streaks"
  ON user_streaks FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Users can insert their own streaks"
  ON user_streaks FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update their own streaks"
  ON user_streaks FOR UPDATE
  TO authenticated
  USING (user_id = auth.uid());

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è user_levels
CREATE POLICY "Users can view their own levels"
  ON user_levels FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Users can insert their own levels"
  ON user_levels FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update their own levels"
  ON user_levels FOR UPDATE
  TO authenticated
  USING (user_id = auth.uid());

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è challenges (–≤—Å–µ –º–æ–≥—É—Ç —á–∏—Ç–∞—Ç—å)
CREATE POLICY "Anyone can view challenges"
  ON challenges FOR SELECT
  TO authenticated
  USING (true);

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è user_challenges
CREATE POLICY "Users can view their own challenge progress"
  ON user_challenges FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Users can insert their own challenge progress"
  ON user_challenges FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update their own challenge progress"
  ON user_challenges FOR UPDATE
  TO authenticated
  USING (user_id = auth.uid());

-- –§—É–Ω–∫—Ü–∏—è: –†–∞—Å—á—ë—Ç XP –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
CREATE OR REPLACE FUNCTION calculate_xp_for_level(level integer)
RETURNS integer AS $$
BEGIN
  -- –§–æ—Ä–º—É–ª–∞: 100 * level^1.5 (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç)
  RETURN FLOOR(100 * POWER(level, 1.5));
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- –§—É–Ω–∫—Ü–∏—è: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ XP
CREATE OR REPLACE FUNCTION update_user_level()
RETURNS TRIGGER AS $$
DECLARE
  new_level integer;
  xp_needed integer;
BEGIN
  -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ XP –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
  WHILE NEW.xp >= NEW.xp_to_next_level LOOP
    NEW.xp := NEW.xp - NEW.xp_to_next_level;
    NEW.level := NEW.level + 1;
    NEW.xp_to_next_level := calculate_xp_for_level(NEW.level);
  END LOOP;

  NEW.updated_at := now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- –¢—Ä–∏–≥–≥–µ—Ä: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
CREATE TRIGGER trigger_update_user_level
  BEFORE UPDATE OF xp ON user_levels
  FOR EACH ROW
  EXECUTE FUNCTION update_user_level();

-- –°–∏–¥—ã: –ë–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
INSERT INTO achievements (code, title, description, icon, category, requirement_type, requirement_value, points, rarity) VALUES
  -- –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  ('first_transaction', '–ü–µ—Ä–≤—ã–π —à–∞–≥', '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', 'üéØ', 'transactions', 'count', 1, 10, 'common'),
  ('transactions_10', '–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–î–æ–±–∞–≤—å—Ç–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', 'üìù', 'transactions', 'count', 10, 25, 'common'),
  ('transactions_50', '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π', '–î–æ–±–∞–≤—å—Ç–µ 50 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', 'üìä', 'transactions', 'count', 50, 50, 'rare'),
  ('transactions_100', '–ú–∞—Å—Ç–µ—Ä —É—á—ë—Ç–∞', '–î–æ–±–∞–≤—å—Ç–µ 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', 'üèÜ', 'transactions', 'count', 100, 100, 'epic'),
  ('transactions_500', '–õ–µ–≥–µ–Ω–¥–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤', '–î–æ–±–∞–≤—å—Ç–µ 500 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', 'üëë', 'transactions', 'count', 500, 250, 'legendary'),
  
  -- –ë—é–¥–∂–µ—Ç—ã
  ('first_budget', '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –±—é–¥–∂–µ—Ç', 'üéØ', 'budgets', 'count', 1, 15, 'common'),
  ('budget_keeper', '–ë—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å', '–ù–µ –ø—Ä–µ–≤—ã—Å—å—Ç–µ –±—é–¥–∂–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞', '‚úÖ', 'budgets', 'specific', 1, 50, 'rare'),
  ('budget_master', '–ú–∞—Å—Ç–µ—Ä –±—é–¥–∂–µ—Ç–æ–≤', '–°–æ–∑–¥–∞–π—Ç–µ 5 –±—é–¥–∂–µ—Ç–æ–≤', 'üíé', 'budgets', 'count', 5, 75, 'epic'),
  
  -- –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è
  ('first_goal', '–ú–µ—á—Ç–∞—Ç–µ–ª—å', '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ü–µ–ª—å', 'üåü', 'savings', 'count', 1, 15, 'common'),
  ('goal_achieved', '–î–æ—Å—Ç–∏–≥–∞—Ç–æ—Ä', '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏', 'üéâ', 'savings', 'specific', 1, 100, 'epic'),
  ('saver_1000', '–ö–æ–ø–∏–ª–∫–∞', '–ù–∞–∫–æ–ø–∏—Ç–µ 1000‚ÇΩ', 'üê∑', 'savings', 'amount', 100000, 50, 'rare'),
  
  -- AI
  ('ai_first_chat', 'AI –ù–æ–≤–∏—á–æ–∫', '–ó–∞–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å AI –ø–æ–º–æ—â–Ω–∏–∫—É', 'ü§ñ', 'ai', 'count', 1, 20, 'common'),
  ('ai_categorization', '–£–º–Ω—ã–π —É—á—ë—Ç', '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AI –∞–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é', 'üß†', 'ai', 'specific', 1, 30, 'rare'),
  
  -- –°—Ç—Ä–∏–∫–∏
  ('streak_7', '–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥', '–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', 'üî•', 'streak', 'streak', 7, 50, 'rare'),
  ('streak_30', '–ú–µ—Å—è—Ü –ø–æ–¥—Ä—è–¥', '–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', '‚ö°', 'streak', 'streak', 30, 150, 'epic'),
  ('streak_100', '–ù–µ—Å–≥–∏–±–∞–µ–º—ã–π', '–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ 100 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', 'üí™', 'streak', 'streak', 100, 500, 'legendary')
ON CONFLICT (code) DO NOTHING;

-- –°–∏–¥—ã: –ë–∞–∑–æ–≤—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏
INSERT INTO challenges (code, title, description, icon, challenge_type, requirement_type, requirement_value, reward_xp, is_active) VALUES
  ('daily_transaction', '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å', '–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–µ–≥–æ–¥–Ω—è', 'üìù', 'daily', 'count', 1, 10, true),
  ('weekly_budget_check', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ', 'üéØ', 'weekly', 'specific', 1, 25, true),
  ('monthly_savings', '–ú–µ—Å—è—á–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è', '–û—Ç–ª–æ–∂–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ü–µ–ª—å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ', 'üí∞', 'monthly', 'specific', 1, 50, true)
ON CONFLICT (code) DO NOTHING;

"use client";

import { useEffect, useState } from "react";
import { syncService } from "@/lib/offline/sync";
import styles from "./OfflineIndicator.module.css";

export default function OfflineIndicator() {
  const [isOnline, setIsOnline] = useState(true);
  const [pendingCount, setPendingCount] = useState(0);
  const [isSyncing, setIsSyncing] = useState(false);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    syncService.startAutoSync();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);

    // –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(async () => {
      const status = await syncService.getStatus();
      setIsOnline(status.isOnline);
      setPendingCount(status.pendingCount);
      setIsSyncing(status.isSyncing);
    }, 5000);

    // –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    syncService.getStatus().then((status) => {
      setIsOnline(status.isOnline);
      setPendingCount(status.pendingCount);
      setIsSyncing(status.isSyncing);
    });

    return () => {
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);
      clearInterval(interval);
      syncService.stopAutoSync();
    };
  }, []);

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –µ—Å–ª–∏ –æ–Ω–ª–∞–π–Ω –∏ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
  if (isOnline && pendingCount === 0 && !isSyncing) {
    return null;
  }

  return (
    <div className={styles.container}>
      {!isOnline && (
        <div className={`${styles.indicator} ${styles.offline}`}>
          <span className={styles.icon}>üì¥</span>
          <span className={styles.text}>–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º</span>
          {pendingCount > 0 && (
            <span className={styles.badge}>{pendingCount}</span>
          )}
        </div>
      )}

      {isOnline && isSyncing && (
        <div className={`${styles.indicator} ${styles.syncing}`}>
          <span className={styles.icon}>üîÑ</span>
          <span className={styles.text}>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...</span>
        </div>
      )}

      {isOnline && !isSyncing && pendingCount > 0 && (
        <div className={`${styles.indicator} ${styles.pending}`}>
          <span className={styles.icon}>‚è≥</span>
          <span className={styles.text}>
            –û–∂–∏–¥–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {pendingCount}
          </span>
        </div>
      )}
    </div>
  );
}

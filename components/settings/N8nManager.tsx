"use client";

import { useState, useEffect } from "react";
import baseStyles from "@/components/settings/Settings.module.css";
import styles from "@/components/settings/N8nManager.module.css";

type Workflow = {
  id: string;
  name: string;
  active: boolean;
  description: string;
  lastRun?: string;
  tags?: string[];
};

type WorkflowTemplate = {
  id: string;
  name: string;
  description: string;
  category: string;
  icon: string;
};

const WORKFLOW_TEMPLATES: WorkflowTemplate[] = [
  {
    id: "telegram-receipt-parser",
    name: "–ü–∞—Ä—Å–∏–Ω–≥ —á–µ–∫–æ–≤ –∏–∑ Telegram",
    description: "‚úÖ –£–ñ–ï –£–°–¢–ê–ù–û–í–õ–ï–ù! Workflow '–§–ù–° ‚Üí AI ‚Üí Finappka' –ø–∞—Ä—Å–∏—Ç —á–µ–∫–∏ –æ—Ç @Cheki_FNS_bot",
    category: "Telegram",
    icon: "üßæ",
  },
  {
    id: "expense-categorization",
    name: "AI –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤",
    description: "–î–æ–±–∞–≤—å—Ç–µ OpenAI node –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é",
    category: "AI",
    icon: "ü§ñ",
  },
  {
    id: "budget-alerts",
    name: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ",
    description: "Schedule Trigger + HTTP Request –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—é–¥–∂–µ—Ç–∞ + Telegram –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
    category: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    icon: "üí∞",
  },
  {
    id: "recurring-transactions",
    name: "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–ª–∞—Ç–µ–∂–∏",
    description: "Schedule Trigger (–µ–∂–µ–º–µ—Å—è—á–Ω–æ) + HTTP Request –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
    category: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
    icon: "üîÑ",
  },
  {
    id: "report-generator",
    name: "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã",
    description: "Schedule Trigger (–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫) + HTTP Request + Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤",
    category: "–û—Ç—á–µ—Ç—ã",
    icon: "üìä",
  },
];

export default function N8nManager() {
  const [workflows, setWorkflows] = useState<Workflow[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [connectionStatus, setConnectionStatus] = useState<"connected" | "disconnected" | "checking">("checking");
  const [n8nUrl, setN8nUrl] = useState("https://domik1.app.n8n.cloud");
  const [webhookUrl, setWebhookUrl] = useState("");
  const [workflowId, setWorkflowId] = useState("");
  const [isSaving, setIsSaving] = useState(false);
  const [message, setMessage] = useState<{ type: "success" | "error"; text: string } | null>(null);

  useEffect(() => {
    loadN8nSettings();
  }, []);

  const loadN8nSettings = async () => {
    try {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –Ω–∞–ª–∏—á–∏—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow
      setWorkflowId("jCIMMDna127FKh3K");
      setWebhookUrl("https://domik1.app.n8n.cloud/webhook/cf135bc5-aedb-4d05-8743-67db3a0f3304");
      setWorkflows([{
        id: "jCIMMDna127FKh3K",
        name: "–§–ù–° ‚Üí AI ‚Üí Finappka",
        active: true,
        description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ–∫–æ–≤ –æ—Ç @Cheki_FNS_bot",
        tags: ["Telegram", "–§–ù–°", "–ß–µ–∫–∏"]
      }]);
      setConnectionStatus("connected");
    } catch (error) {
      console.error("Error loading n8n settings:", error);
      setConnectionStatus("disconnected");
    } finally {
      setIsLoading(false);
    }
  };

  const saveSettings = async () => {
    setMessage({ type: "success", text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã" });
  };

  const testConnection = async () => {
    setConnectionStatus("checking");
    setTimeout(() => {
      setConnectionStatus("connected");
      setMessage({ type: "success", text: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ! Workflow —Ä–∞–±–æ—Ç–∞–µ—Ç." });
    }, 500);
  };

  const toggleWorkflow = async (workflowId: string, active: boolean) => {
    try {
      const response = await fetch(`/api/settings/n8n/workflows/${workflowId}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ active }),
      });

      if (response.ok) {
        setWorkflows((prev) =>
          prev.map((w) => (w.id === workflowId ? { ...w, active } : w))
        );
        setMessage({
          type: "success",
          text: `–í–æ—Ä–∫—Ñ–ª–æ—É ${active ? "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"}`,
        });
      }
    } catch (error) {
      console.error("Error toggling workflow:", error);
      setMessage({ type: "error", text: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫—Ñ–ª–æ—É" });
    }
  };

  const installTemplate = async (templateId: string) => {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º n8n Cloud –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ workflow –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
    const templateUrls: Record<string, string> = {
      "telegram-receipt-parser": "https://domik1.app.n8n.cloud/workflow/new?projectId=w3uNDZy0VqziINFF",
      "expense-categorization": "https://domik1.app.n8n.cloud/workflow/new?projectId=w3uNDZy0VqziINFF",
      "budget-alerts": "https://domik1.app.n8n.cloud/workflow/new?projectId=w3uNDZy0VqziINFF",
      "recurring-transactions": "https://domik1.app.n8n.cloud/workflow/new?projectId=w3uNDZy0VqziINFF",
      "report-generator": "https://domik1.app.n8n.cloud/workflow/new?projectId=w3uNDZy0VqziINFF",
    };

    const url = templateUrls[templateId];
    if (url) {
      window.open(url, "_blank");
      setMessage({ 
        type: "success", 
        text: "–û—Ç–∫—Ä—ã—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä n8n. –°–æ–∑–¥–∞–π—Ç–µ workflow –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞." 
      });
    } else {
      setMessage({ type: "error", text: "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
  };

  if (isLoading) {
    return (
      <div className={baseStyles.settingsCard}>
        <div className={baseStyles.cardContent}>
          <div className={styles.loadingState}>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ n8n...</div>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      <section className={styles.card}>
        <div className={styles.cardHeader}>
          <div className={styles.cardTitle}>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ n8n</div>
          <div className={styles.cardDescription}>
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∞—à–µ–º—É —ç–∫–∑–µ–º–ø–ª—è—Ä—É n8n –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
          </div>
        </div>

        <div className={styles.cardBody}>
          <div className={styles.statusRow}>
            <div className={styles.statusInfo}>
              <span
                className={`${styles.statusDot} ${
                  connectionStatus === "connected"
                    ? styles.statusDotConnected
                    : connectionStatus === "checking"
                    ? styles.statusDotChecking
                    : styles.statusDotDisconnected
                }`}
              />
              <span className={styles.statusLabel}>
                {connectionStatus === "connected"
                  ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ"
                  : connectionStatus === "checking"
                  ? "–ü—Ä–æ–≤–µ—Ä–∫–∞..."
                  : "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"}
              </span>
            </div>
            <span className={styles.statusNote}>
              {connectionStatus === "connected"
                ? "–í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
                : "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –∫–ª—é—á API, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"}
            </span>
          </div>

          <div className={styles.formGrid}>
            <div className={styles.inputGroup}>
              <label className={styles.fieldLabel}>URL –∞–¥—Ä–µ—Å n8n</label>
              <input
                type="url"
                className={styles.textField}
                value={n8nUrl}
                readOnly
                placeholder="https://n8n.yourdomain.com"
              />
            </div>

            <div className={styles.inputGroup}>
              <label className={styles.fieldLabel}>Workflow ID</label>
              <input
                type="text"
                className={styles.textField}
                value={workflowId}
                readOnly
                placeholder="workflow-id"
              />
            </div>

            <div className={styles.buttonRow}>
              <button onClick={testConnection} className={`${styles.button} ${styles.secondaryButton}`}>
                <span className="material-icons" style={{ fontSize: "18px" }}>wifi_tethering</span>
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
              </button>
              <button
                onClick={saveSettings}
                className={`${styles.button} ${styles.primaryButton}`}
                disabled={isSaving}
              >
                <span className="material-icons" style={{ fontSize: "18px" }}>save</span>
                {isSaving ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}
              </button>
            </div>
          </div>

          {message && (
            <div
              className={`${baseStyles.message} ${
                message.type === "success" ? baseStyles.messageSuccess : baseStyles.messageError
              } ${styles.feedbackMessage}`}
            >
              {message.text}
            </div>
          )}
        </div>
      </section>

      {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ—Ä–∫—Ñ–ª–æ—É */}
      {connectionStatus === "connected" && workflows.length > 0 && (
        <section className={styles.card}>
          <div className={styles.cardHeader}>
            <div className={styles.cardTitle}>–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤–æ—Ä–∫—Ñ–ª–æ—É</div>
            <div className={styles.cardDescription}>
              –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤–æ—Ä–∫—Ñ–ª–æ—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            </div>
          </div>

          <div className={styles.cardBody}>
            <div className={styles.workflowList}>
              {workflows.map((workflow) => (
                <div className={styles.workflowItem} key={workflow.id}>
                  <div className={styles.workflowTopRow}>
                    <div className={styles.workflowMain}>
                      <div className={styles.workflowName}>{workflow.name}</div>
                      <div className={styles.workflowDescription}>{workflow.description}</div>
                    </div>
                    <label className={styles.workflowToggle}>
                      <input
                        type="checkbox"
                        checked={workflow.active}
                        onChange={(e) => toggleWorkflow(workflow.id, e.target.checked)}
                      />
                      {workflow.active ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–í—ã–∫–ª—é—á–µ–Ω"}
                    </label>
                  </div>
                  {workflow.tags && workflow.tags.length > 0 && (
                    <div className={styles.workflowTags}>
                      {workflow.tags.map((tag) => (
                        <span className={styles.workflowTag} key={tag}>
                          {tag}
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </section>
      )}

      {/* –®–∞–±–ª–æ–Ω—ã */}
      {connectionStatus === "connected" && (
        <section className={styles.card}>
          <div className={styles.cardHeader}>
            <div className={styles.cardTitle}>–®–∞–±–ª–æ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</div>
            <div className={styles.cardDescription}>
              –ì–æ—Ç–æ–≤—ã–µ –≤–æ—Ä–∫—Ñ–ª–æ—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
            </div>
          </div>

          <div className={styles.cardBody}>
            <div className={styles.templateGrid}>
              {WORKFLOW_TEMPLATES.map((template) => (
                <article className={styles.templateCard} key={template.id}>
                  <div className={styles.templateIcon}>{template.icon}</div>
                  <div className={styles.templateTitle}>{template.name}</div>
                  <div className={styles.templateDescription}>{template.description}</div>
                  <div className={styles.templateMeta}>
                    <span className={styles.templateCategory}>{template.category}</span>
                    <button
                      onClick={() => installTemplate(template.id)}
                      className={styles.templateInstallButton}
                    >
                      <span className="material-icons" style={{ fontSize: "16px" }}>download</span>
                      –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                    </button>
                  </div>
                </article>
              ))}
            </div>
          </div>
        </section>
      )}

      {/* –ü–æ–º–æ—â—å */}
      <section className={styles.helpCard}>
        <p>
          <strong>n8n</strong> ‚Äî –≤–∏–∑—É–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –°–æ–µ–¥–∏–Ω—è–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Å—Ç—Ä–æ–π—Ç–µ —Ü–µ–ø–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏
          –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è–º.
        </p>
        <p>–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:</p>
        <ol className={styles.helpList}>
          <li>–†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ —Å–≤–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä n8n (–æ–±–ª–∞–∫–æ –∏–ª–∏ self-hosted)</li>
          <li>–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö n8n</li>
          <li>–£–∫–∞–∂–∏—Ç–µ URL –∏ API –∫–ª—é—á –≤—ã—à–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</li>
          <li>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —à–∞–±–ª–æ–Ω—ã –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ—Ä–∫—Ñ–ª–æ—É</li>
        </ol>
        <p>
          üìö <a className={styles.helpLink} href="https://docs.n8n.io" target="_blank" rel="noopener noreferrer">
            –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è n8n
          </a>
        </p>
      </section>
    </div>
  );
}

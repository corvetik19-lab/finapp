"use client";

import { useState, useEffect } from "react";
import baseStyles from "@/components/settings/Settings.module.css";
import styles from "@/components/settings/N8nManager.module.css";

type Workflow = {
  id: string;
  name: string;
  active: boolean;
  description: string;
  lastRun?: string;
  tags?: string[];
};

type WorkflowTemplate = {
  id: string;
  name: string;
  description: string;
  category: string;
  icon: string;
};

const WORKFLOW_TEMPLATES: WorkflowTemplate[] = [
  {
    id: "telegram-receipt-parser",
    name: "–ü–∞—Ä—Å–∏–Ω–≥ —á–µ–∫–æ–≤ –∏–∑ Telegram",
    description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–∞—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –±–æ—Ç–µ",
    category: "Telegram",
    icon: "üßæ",
  },
  {
    id: "expense-categorization",
    name: "–ê–≤—Ç–æ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤",
    description: "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
    category: "AI",
    icon: "ü§ñ",
  },
  {
    id: "budget-alerts",
    name: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ",
    description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤ –±—é–¥–∂–µ—Ç–∞",
    category: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    icon: "üí∞",
  },
  {
    id: "recurring-transactions",
    name: "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
    description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é",
    category: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
    icon: "üîÑ",
  },
  {
    id: "report-generator",
    name: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤",
    description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã",
    category: "–û—Ç—á–µ—Ç—ã",
    icon: "üìä",
  },
];

export default function N8nManager() {
  const [workflows, setWorkflows] = useState<Workflow[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [connectionStatus, setConnectionStatus] = useState<"connected" | "disconnected" | "checking">("checking");
  const [n8nUrl, setN8nUrl] = useState("");
  const [apiKey, setApiKey] = useState("");
  const [showApiKey, setShowApiKey] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [message, setMessage] = useState<{ type: "success" | "error"; text: string } | null>(null);

  useEffect(() => {
    loadN8nSettings();
  }, []);

  const loadN8nSettings = async () => {
    try {
      const response = await fetch("/api/settings/n8n");
      if (response.ok) {
        const data = await response.json();
        setN8nUrl(data.url || "");
        setApiKey(data.apiKey || "");
        setWorkflows(data.workflows || []);
        setConnectionStatus(data.connected ? "connected" : "disconnected");
      }
    } catch (error) {
      console.error("Error loading n8n settings:", error);
      setConnectionStatus("disconnected");
    } finally {
      setIsLoading(false);
    }
  };

  const saveSettings = async () => {
    setIsSaving(true);
    setMessage(null);

    try {
      const response = await fetch("/api/settings/n8n", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          url: n8nUrl,
          apiKey: apiKey,
        }),
      });

      if (!response.ok) throw new Error("Failed to save settings");

      setMessage({ type: "success", text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã" });
      await loadN8nSettings();
    } catch (error) {
      console.error("Error saving settings:", error);
      setMessage({ type: "error", text: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" });
    } finally {
      setIsSaving(false);
    }
  };

  const testConnection = async () => {
    setConnectionStatus("checking");
    setMessage(null);

    try {
      const response = await fetch("/api/settings/n8n/test", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ url: n8nUrl, apiKey }),
      });

      if (response.ok) {
        setConnectionStatus("connected");
        setMessage({ type: "success", text: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!" });
        await loadN8nSettings();
      } else {
        setConnectionStatus("disconnected");
        setMessage({ type: "error", text: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ n8n" });
      }
    } catch (error) {
      console.error("Error testing connection:", error);
      setConnectionStatus("disconnected");
      setMessage({ type: "error", text: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" });
    }
  };

  const toggleWorkflow = async (workflowId: string, active: boolean) => {
    try {
      const response = await fetch(`/api/settings/n8n/workflows/${workflowId}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ active }),
      });

      if (response.ok) {
        setWorkflows((prev) =>
          prev.map((w) => (w.id === workflowId ? { ...w, active } : w))
        );
        setMessage({
          type: "success",
          text: `–í–æ—Ä–∫—Ñ–ª–æ—É ${active ? "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"}`,
        });
      }
    } catch (error) {
      console.error("Error toggling workflow:", error);
      setMessage({ type: "error", text: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫—Ñ–ª–æ—É" });
    }
  };

  const installTemplate = async (templateId: string) => {
    try {
      const response = await fetch("/api/settings/n8n/templates/install", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ templateId }),
      });

      if (response.ok) {
        setMessage({ type: "success", text: "–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" });
        await loadN8nSettings();
      } else {
        setMessage({ type: "error", text: "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω" });
      }
    } catch (error) {
      console.error("Error installing template:", error);
      setMessage({ type: "error", text: "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞" });
    }
  };

  if (isLoading) {
    return (
      <div className={baseStyles.settingsCard}>
        <div className={baseStyles.cardContent}>
          <div className={styles.loadingState}>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ n8n...</div>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      <section className={styles.card}>
        <div className={styles.cardHeader}>
          <div className={styles.cardTitle}>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ n8n</div>
          <div className={styles.cardDescription}>
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∞—à–µ–º—É —ç–∫–∑–µ–º–ø–ª—è—Ä—É n8n –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
          </div>
        </div>

        <div className={styles.cardBody}>
          <div className={styles.statusRow}>
            <div className={styles.statusInfo}>
              <span
                className={`${styles.statusDot} ${
                  connectionStatus === "connected"
                    ? styles.statusDotConnected
                    : connectionStatus === "checking"
                    ? styles.statusDotChecking
                    : styles.statusDotDisconnected
                }`}
              />
              <span className={styles.statusLabel}>
                {connectionStatus === "connected"
                  ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ"
                  : connectionStatus === "checking"
                  ? "–ü—Ä–æ–≤–µ—Ä–∫–∞..."
                  : "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"}
              </span>
            </div>
            <span className={styles.statusNote}>
              {connectionStatus === "connected"
                ? "–í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
                : "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –∫–ª—é—á API, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"}
            </span>
          </div>

          <div className={styles.formGrid}>
            <div className={styles.inputGroup}>
              <label className={styles.fieldLabel}>URL –∞–¥—Ä–µ—Å n8n</label>
              <input
                type="url"
                className={styles.textField}
                value={n8nUrl}
                onChange={(e) => setN8nUrl(e.target.value)}
                placeholder="https://n8n.yourdomain.com"
              />
            </div>

            <div className={styles.inputGroup}>
              <label className={styles.fieldLabel}>API Key</label>
              <div className={styles.secretFieldWrapper}>
                <input
                  type={showApiKey ? "text" : "password"}
                  className={styles.textField}
                  value={apiKey}
                  onChange={(e) => setApiKey(e.target.value)}
                  placeholder="n8n_api_key_..."
                />
                <button
                  type="button"
                  onClick={() => setShowApiKey(!showApiKey)}
                  className={styles.secretToggle}
                >
                  <span className="material-icons" style={{ fontSize: "20px" }}>
                    {showApiKey ? "visibility_off" : "visibility"}
                  </span>
                </button>
              </div>
            </div>

            <div className={styles.buttonRow}>
              <button onClick={testConnection} className={`${styles.button} ${styles.secondaryButton}`}>
                <span className="material-icons" style={{ fontSize: "18px" }}>wifi_tethering</span>
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
              </button>
              <button
                onClick={saveSettings}
                className={`${styles.button} ${styles.primaryButton}`}
                disabled={isSaving}
              >
                <span className="material-icons" style={{ fontSize: "18px" }}>save</span>
                {isSaving ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}
              </button>
            </div>
          </div>

          {message && (
            <div
              className={`${baseStyles.message} ${
                message.type === "success" ? baseStyles.messageSuccess : baseStyles.messageError
              } ${styles.feedbackMessage}`}
            >
              {message.text}
            </div>
          )}
        </div>
      </section>

      {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ—Ä–∫—Ñ–ª–æ—É */}
      {connectionStatus === "connected" && workflows.length > 0 && (
        <section className={styles.card}>
          <div className={styles.cardHeader}>
            <div className={styles.cardTitle}>–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤–æ—Ä–∫—Ñ–ª–æ—É</div>
            <div className={styles.cardDescription}>
              –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤–æ—Ä–∫—Ñ–ª–æ—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            </div>
          </div>

          <div className={styles.cardBody}>
            <div className={styles.workflowList}>
              {workflows.map((workflow) => (
                <div className={styles.workflowItem} key={workflow.id}>
                  <div className={styles.workflowTopRow}>
                    <div className={styles.workflowMain}>
                      <div className={styles.workflowName}>{workflow.name}</div>
                      <div className={styles.workflowDescription}>{workflow.description}</div>
                    </div>
                    <label className={styles.workflowToggle}>
                      <input
                        type="checkbox"
                        checked={workflow.active}
                        onChange={(e) => toggleWorkflow(workflow.id, e.target.checked)}
                      />
                      {workflow.active ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–í—ã–∫–ª—é—á–µ–Ω"}
                    </label>
                  </div>
                  {workflow.tags && workflow.tags.length > 0 && (
                    <div className={styles.workflowTags}>
                      {workflow.tags.map((tag) => (
                        <span className={styles.workflowTag} key={tag}>
                          {tag}
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </section>
      )}

      {/* –®–∞–±–ª–æ–Ω—ã */}
      {connectionStatus === "connected" && (
        <section className={styles.card}>
          <div className={styles.cardHeader}>
            <div className={styles.cardTitle}>–®–∞–±–ª–æ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</div>
            <div className={styles.cardDescription}>
              –ì–æ—Ç–æ–≤—ã–µ –≤–æ—Ä–∫—Ñ–ª–æ—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
            </div>
          </div>

          <div className={styles.cardBody}>
            <div className={styles.templateGrid}>
              {WORKFLOW_TEMPLATES.map((template) => (
                <article className={styles.templateCard} key={template.id}>
                  <div className={styles.templateIcon}>{template.icon}</div>
                  <div className={styles.templateTitle}>{template.name}</div>
                  <div className={styles.templateDescription}>{template.description}</div>
                  <div className={styles.templateMeta}>
                    <span className={styles.templateCategory}>{template.category}</span>
                    <button
                      onClick={() => installTemplate(template.id)}
                      className={styles.templateInstallButton}
                    >
                      <span className="material-icons" style={{ fontSize: "16px" }}>download</span>
                      –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                    </button>
                  </div>
                </article>
              ))}
            </div>
          </div>
        </section>
      )}

      {/* –ü–æ–º–æ—â—å */}
      <section className={styles.helpCard}>
        <p>
          <strong>n8n</strong> ‚Äî –≤–∏–∑—É–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –°–æ–µ–¥–∏–Ω—è–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Å—Ç—Ä–æ–π—Ç–µ —Ü–µ–ø–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏
          –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è–º.
        </p>
        <p>–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:</p>
        <ol className={styles.helpList}>
          <li>–†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ —Å–≤–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä n8n (–æ–±–ª–∞–∫–æ –∏–ª–∏ self-hosted)</li>
          <li>–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö n8n</li>
          <li>–£–∫–∞–∂–∏—Ç–µ URL –∏ API –∫–ª—é—á –≤—ã—à–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</li>
          <li>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —à–∞–±–ª–æ–Ω—ã –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ—Ä–∫—Ñ–ª–æ—É</li>
        </ol>
        <p>
          üìö <a className={styles.helpLink} href="https://docs.n8n.io" target="_blank" rel="noopener noreferrer">
            –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è n8n
          </a>
        </p>
      </section>
    </div>
  );
}

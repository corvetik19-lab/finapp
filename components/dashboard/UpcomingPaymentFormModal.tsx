"use client";

import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";

import styles from "@/components/dashboard/Dashboard.module.css";
import {
  upcomingPaymentFormSchema,
  type UpcomingPaymentFormInput,
} from "@/lib/dashboard/upcoming-payments/schema";

type Account = {
  id: string;
  name: string;
  type: string;
  credit_limit?: number | null;
};

const getAccountTypeLabel = (account: Account): string => {
  if (account.type === "card") {
    // –†–∞–∑–ª–∏—á–∞–µ–º –¥–µ–±–µ—Ç–æ–≤—ã–µ –∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã
    if (account.credit_limit && account.credit_limit > 0) {
      return "üí≥ –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞";
    }
    return "üí≥ –î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞";
  }
  
  const accountTypeLabels: Record<string, string> = {
    cash: "üíµ –ù–∞–ª–∏—á–Ω—ã–µ",
    bank: "üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç",
    savings: "üè¶ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á—ë—Ç",
    investment: "üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á—ë—Ç",
    loan: "üí∞ –ö—Ä–µ–¥–∏—Ç",
    other: "üìä –î—Ä—É–≥–æ–π —Å—á—ë—Ç",
  };
  return accountTypeLabels[account.type] || "üìä –°—á—ë—Ç";
};

export type UpcomingPaymentFormModalProps = {
  open: boolean;
  onClose: () => void;
  onSubmit: (values: UpcomingPaymentFormInput) => void;
  pending?: boolean;
  title?: string;
  subtitle?: string;
  defaultValues?: Partial<UpcomingPaymentFormInput>;
  error?: string | null;
  isPaid?: boolean;
  hasLinkedTransaction?: boolean;
  onUnlinkTransaction?: () => Promise<void> | void;
  unlinkPending?: boolean;
};

const DEFAULT_VALUES: Partial<UpcomingPaymentFormInput> = {
  id: undefined,
  name: "",
  dueDate: new Date().toISOString().slice(0, 10),
  direction: "expense",
  accountName: undefined,
};

export default function UpcomingPaymentFormModal({
  open,
  onClose,
  onSubmit,
  pending = false,
  title = "–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂",
  subtitle = "–°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –ø–ª–∞—Ç–µ–∂–µ",
  defaultValues,
  error,
  isPaid = false,
  hasLinkedTransaction = false,
  onUnlinkTransaction,
  unlinkPending = false,
}: UpcomingPaymentFormModalProps) {
  const [accounts, setAccounts] = useState<Account[]>([]);

  const form = useForm<UpcomingPaymentFormInput>({
    resolver: zodResolver(upcomingPaymentFormSchema),
    defaultValues: {
      ...DEFAULT_VALUES,
      ...defaultValues,
    },
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤
  useEffect(() => {
    const loadAccounts = async () => {
      try {
        const response = await fetch("/api/accounts");
        if (response.ok) {
          const data = await response.json();
          setAccounts(data.accounts || []);
        }
      } catch (error) {
        console.error("Failed to load accounts:", error);
      }
    };

    if (open) {
      loadAccounts();
    }
  }, [open]);

  useEffect(() => {
    if (open) {
      form.reset({
        ...DEFAULT_VALUES,
        ...defaultValues,
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [open, defaultValues?.id, defaultValues?.dueDate]);

  const handleSubmitClick = () => {
    form.handleSubmit((values) => {
      const normalized: UpcomingPaymentFormInput = {
        ...values,
        id: values.id && values.id.length > 0 ? values.id : undefined,
      };
      onSubmit(normalized);
    })();
  };

  const handleFormSubmit = form.handleSubmit((values) => {
    const normalized: UpcomingPaymentFormInput = {
      ...values,
      id: values.id && values.id.length > 0 ? values.id : undefined,
    };
    onSubmit(normalized);
  });

  const handleClose = () => {
    if (pending || unlinkPending) return;
    onClose();
  };

  if (!open) {
    return null;
  }

  return (
    <div className={styles.modalRoot} role="presentation" onClick={handleClose}>
      <div className={styles.modal} role="dialog" aria-modal onClick={(e) => e.stopPropagation()}>
        <header className={styles.modalHeader}>
          <div>
            <div className={styles.modalTitle}>{title}</div>
            <div className={styles.modalSubtitle}>{subtitle}</div>
          </div>
          <button type="button" className={styles.modalClose} onClick={handleClose} aria-label="–ó–∞–∫—Ä—ã—Ç—å">
            <span className="material-icons" aria-hidden>
              close
            </span>
          </button>
        </header>
        <div className={styles.modalContent}>
          {error && <div className={styles.modalError}>{error}</div>}
          <form id="upcomingPaymentForm" className={styles.modalForm} onSubmit={handleFormSubmit} noValidate>
            <input type="hidden" {...form.register("id")} />
            <div className={styles.modalFormGrid}>
              <label className={styles.formGroup}>
                <span className={styles.formLabel}>–ù–∞–∑–≤–∞–Ω–∏–µ</span>
                <input
                  type="text"
                  className={styles.formInput}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, –∞—Ä–µ–Ω–¥–∞"
                  {...form.register("name")}
                  autoFocus
                  disabled={pending}
                />
                {form.formState.errors.name && (
                  <span className={styles.fieldError}>{form.formState.errors.name.message}</span>
                )}
              </label>
              <label className={styles.formGroup}>
                <span className={styles.formLabel}>–î–∞—Ç–∞</span>
                <input
                  type="date"
                  className={styles.formInput}
                  {...form.register("dueDate")}
                  disabled={pending}
                />
                {form.formState.errors.dueDate && (
                  <span className={styles.fieldError}>{form.formState.errors.dueDate.message}</span>
                )}
                <span style={{ fontSize: 12, color: "var(--text-secondary)" }}>–§–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î</span>
              </label>
              <label className={styles.formGroup}>
                <span className={styles.formLabel}>–°—É–º–º–∞</span>
                <input
                  type="number"
                  step="0.01"
                  min="0.01"
                  className={styles.formInput}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                  {...form.register("amountMajor")}
                  disabled={pending}
                  required
                />
                {form.formState.errors.amountMajor && (
                  <span className={styles.fieldError}>{form.formState.errors.amountMajor.message}</span>
                )}
              </label>
              <label className={styles.formGroup}>
                <span className={styles.formLabel}>–¢–∏–ø</span>
                <select className={styles.formSelect} {...form.register("direction")} disabled={pending}>
                  <option value="expense">–†–∞—Å—Ö–æ–¥</option>
                  <option value="income">–î–æ—Ö–æ–¥</option>
                </select>
                {form.formState.errors.direction && (
                  <span className={styles.fieldError}>{form.formState.errors.direction.message}</span>
                )}
              </label>
              {isPaid && hasLinkedTransaction && (
                <label className={styles.formGroupFull}>
                  <span className={styles.formLabel}>–°—á—ë—Ç</span>
                  <select
                    className={styles.formSelect}
                    {...form.register("accountName")}
                    disabled={true}
                  >
                    <option value="">–ù–µ –≤—ã–±—Ä–∞–Ω</option>
                    {accounts.map((account) => (
                      <option key={account.id} value={account.name}>
                        {getAccountTypeLabel(account)} ‚Äî {account.name}
                      </option>
                    ))}
                  </select>
                  {form.formState.errors.accountName && (
                    <span className={styles.fieldError}>{form.formState.errors.accountName.message}</span>
                  )}
                  <span style={{ fontSize: 12, color: "var(--primary-color)", display: "flex", alignItems: "center", gap: "6px" }}>
                    <span className="material-icons" style={{ fontSize: 16 }}>info</span>
                    –°—á—ë—Ç —É–∫–∞–∑–∞–Ω –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                  </span>
                </label>
              )}
            </div>
            <div className={styles.modalFooter}>
              <button type="button" className={styles.btnSecondary} onClick={handleClose} disabled={pending}>
                –û—Ç–º–µ–Ω–∞
              </button>
              {isPaid && (
                <button
                  type="button"
                  className={styles.btnDanger}
                  onClick={() => onUnlinkTransaction?.()}
                  disabled={pending || unlinkPending || !onUnlinkTransaction || !hasLinkedTransaction}
                >
                  {unlinkPending ? "–û—Ç–º–µ–Ω—è–µ–º —Å–≤—è–∑—å‚Ä¶" : "–£–±—Ä–∞—Ç—å —Å–≤—è–∑—å —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π"}
                </button>
              )}
              <button
                type="button"
                onClick={handleSubmitClick}
                className={styles.btnPrimary}
                disabled={pending || unlinkPending}
              >
                {pending ? "–°–æ—Ö—Ä–∞–Ω—è–µ–º‚Ä¶" : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

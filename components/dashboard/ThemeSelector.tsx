"use client";

import styles from "./ThemeSelector.module.css";

interface ThemeSelectorProps {
  value: "light" | "dark" | "auto";
  onChange: (theme: "light" | "dark" | "auto") => void;
}

const THEMES = [
  {
    value: "light" as const,
    name: "–°–≤–µ—Ç–ª–∞—è",
    icon: "‚òÄÔ∏è",
    description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞",
  },
  {
    value: "dark" as const,
    name: "–¢—ë–º–Ω–∞—è",
    icon: "üåô",
    description: "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–æ—á—å—é",
  },
  {
    value: "auto" as const,
    name: "–ê–≤—Ç–æ",
    icon: "üîÑ",
    description: "–°–ª–µ–¥—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
  },
];

export function ThemeSelector({ value, onChange }: ThemeSelectorProps) {
  return (
    <div className={styles.themeSelector}>
      {THEMES.map((theme) => (
        <button
          key={theme.value}
          className={`${styles.themeCard} ${
            value === theme.value ? styles.active : ""
          }`}
          onClick={() => onChange(theme.value)}
        >
          <div className={styles.icon}>{theme.icon}</div>
          <div className={styles.info}>
            <div className={styles.name}>{theme.name}</div>
            <div className={styles.description}>{theme.description}</div>
          </div>
          {value === theme.value && (
            <div className={styles.checkmark}>‚úì</div>
          )}
        </button>
      ))}
    </div>
  );
}

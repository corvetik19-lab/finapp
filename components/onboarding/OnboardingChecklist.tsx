"use client";

import { useState, useEffect } from 'react';
import styles from './OnboardingChecklist.module.css';

interface ChecklistItem {
  id: string;
  title: string;
  description: string;
  icon: string;
  link?: string;
  completed: boolean;
}

/**
 * –ß–µ–∫-–ª–∏—Å—Ç "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏" –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –ø—É–Ω–∫—Ç—ã
 */
export default function OnboardingChecklist() {
  const [items, setItems] = useState<ChecklistItem[]>([]);
  const [isVisible, setIsVisible] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    const checkTourSettings = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É—Ä–∞ –∏–∑ API
        const response = await fetch('/api/settings/tour');
        if (response.ok) {
          const settings = await response.json();
          
          // –ï—Å–ª–∏ —Ç—É—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç
          if (!settings.enabled) {
            setIsVisible(false);
            setIsMounted(true);
            return;
          }
        }
      } catch (error) {
        console.error('Failed to load tour settings for checklist:', error);
      }
      
      // –ï—Å–ª–∏ —Ç—É—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
      const hidden = localStorage.getItem('onboarding_checklist_hidden') === 'true';
      
      if (!hidden) {
        setIsVisible(true);
      }
      
      setIsMounted(true);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      loadChecklist();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
      const interval = setInterval(loadChecklist, 2000);
      return () => clearInterval(interval);
    };
    
    checkTourSettings();
  }, []);

  const loadChecklist = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ localStorage
      const saved = JSON.parse(localStorage.getItem('onboarding_checklist') || '{}');
      const hidden = localStorage.getItem('onboarding_checklist_hidden') === 'true';
      
      if (hidden) {
        setIsVisible(false);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ –ë–î
      const response = await fetch('/api/onboarding/progress');
      if (!response.ok) return;
      
      const progress = await response.json();

      const checklistItems: ChecklistItem[] = [
        {
          id: 'tour_completed',
          title: '–ü—Ä–æ–π—Ç–∏ —Ç—É—Ä –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é',
          description: '–£–∑–Ω–∞–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ FinApp',
          icon: 'üó∫Ô∏è',
          completed: saved.tour_completed || false,
        },
        {
          id: 'account_created',
          title: '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á—ë—Ç',
          description: '–î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç—É –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–µ',
          icon: 'üí≥',
          link: '/cards',
          completed: progress.accounts > 0,
        },
        {
          id: 'transaction_created',
          title: '–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é',
          description: '–ó–∞–ø–∏—à–∏—Ç–µ –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥',
          icon: 'üí∏',
          link: '/transactions',
          completed: progress.transactions > 0,
        },
        {
          id: 'category_created',
          title: '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
          description: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥ —Å–µ–±—è',
          icon: 'üìÇ',
          link: '/budgets',
          completed: progress.categories > 0,
        },
        {
          id: 'budget_created',
          title: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç',
          description: '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
          icon: 'üéØ',
          link: '/budgets',
          completed: progress.budgets > 0,
        },
        {
          id: 'ai_chat_used',
          title: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å AI —á–∞—Ç',
          description: '–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É',
          icon: 'ü§ñ',
          link: '/ai-chat',
          completed: progress.ai_messages > 0,
        },
      ];

      setItems(checklistItems);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç –µ—Å–ª–∏ –≤—Å—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      const allCompleted = checklistItems.every(item => item.completed);
      if (allCompleted && !hidden) {
        setTimeout(() => {
          setIsVisible(false);
          localStorage.setItem('onboarding_checklist_hidden', 'true');
        }, 3000); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!" 3 —Å–µ–∫—É–Ω–¥—ã
      }
    } catch (error) {
      console.error('Failed to load checklist:', error);
    }
  };

  const handleItemClick = (item: ChecklistItem) => {
    if (item.link && !item.completed) {
      window.location.href = item.link;
    }
  };

  const handleHide = () => {
    setIsVisible(false);
    localStorage.setItem('onboarding_checklist_hidden', 'true');
  };

  const completedCount = items.filter(item => item.completed).length;
  const totalCount = items.length;
  const progress = totalCount > 0 ? (completedCount / totalCount) * 100 : 0;
  const allCompleted = completedCount === totalCount;

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ localStorage (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –º–∏–≥–∞–Ω–∏–µ)
  if (!isMounted || !isVisible) {
    return null;
  }

  return (
    <div className={`${styles.container} ${isMinimized ? styles.minimized : ''}`}>
      <div className={styles.header}>
        <div className={styles.headerLeft}>
          <h3>üöÄ –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏</h3>
          {!allCompleted && (
            <span className={styles.progress}>
              {completedCount} –∏–∑ {totalCount}
            </span>
          )}
        </div>
        <div className={styles.headerRight}>
          <button
            className={styles.minimizeBtn}
            onClick={() => setIsMinimized(!isMinimized)}
            title={isMinimized ? '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å' : '–°–≤–µ—Ä–Ω—É—Ç—å'}
          >
            {isMinimized ? '‚ñº' : '‚ñ≤'}
          </button>
          <button
            className={styles.closeBtn}
            onClick={handleHide}
            title="–°–∫—Ä—ã—Ç—å —á–µ–∫-–ª–∏—Å—Ç"
          >
            ‚úï
          </button>
        </div>
      </div>

      {!isMinimized && (
        <>
          {allCompleted ? (
            <div className={styles.congratulations}>
              <div className={styles.congratsIcon}>üéâ</div>
              <h4>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h4>
              <p>–í—ã –æ—Å–≤–æ–∏–ª–∏ –æ—Å–Ω–æ–≤—ã FinApp –∏ –≥–æ—Ç–æ–≤—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏!</p>
              <button className={styles.congratsBtn} onClick={handleHide}>
                –û—Ç–ª–∏—á–Ω–æ!
              </button>
            </div>
          ) : (
            <>
              <div className={styles.progressBar}>
                <div 
                  className={styles.progressFill} 
                  style={{ width: `${progress}%` }}
                />
              </div>

              <div className={styles.list}>
                {items.map(item => (
                  <div
                    key={item.id}
                    className={`${styles.item} ${item.completed ? styles.completed : ''} ${item.link ? styles.clickable : ''}`}
                    onClick={() => handleItemClick(item)}
                  >
                    <div className={styles.itemIcon}>
                      {item.completed ? (
                        <span className={styles.checkmark}>‚úì</span>
                      ) : (
                        <span>{item.icon}</span>
                      )}
                    </div>
                    <div className={styles.itemContent}>
                      <div className={styles.itemTitle}>{item.title}</div>
                      <div className={styles.itemDescription}>{item.description}</div>
                    </div>
                    {item.link && !item.completed && (
                      <div className={styles.itemArrow}>‚Üí</div>
                    )}
                  </div>
                ))}
              </div>

              <div className={styles.footer}>
                <p className={styles.footerText}>
                  üí° <strong>–°–æ–≤–µ—Ç:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AI —á–∞—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –≤—Ä–æ–¥–µ &ldquo;–î–æ–±–∞–≤—å 500—Ä –Ω–∞ –∫–æ—Ñ–µ&rdquo;
                </p>
              </div>
            </>
          )}
        </>
      )}
    </div>
  );
}

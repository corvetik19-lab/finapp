"use client";

import { useEffect, useState } from "react";
import { Line } from "react-chartjs-2";
import styles from "./Forecasts.module.css";
import { generateMonthlyProgress, type GoalForecast } from "@/lib/ai/goal-forecast";

export default function GoalForecastView() {
  const [loading, setLoading] = useState(true);
  const [forecasts, setForecasts] = useState<GoalForecast[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [selectedPlan, setSelectedPlan] = useState<GoalForecast | null>(null);

  useEffect(() => {
    loadForecasts();
  }, []);

  async function loadForecasts() {
    try {
      const res = await fetch("/api/ai/goal-forecast");
      if (!res.ok) {
        throw new Error("Failed to load forecasts");
      }
      const data = await res.json();
      setForecasts(data.forecasts || []);
      if (data.forecasts && data.forecasts.length > 0) {
        setSelectedPlan(data.forecasts[0]);
      }
    } catch (err) {
      console.error("Error loading goal forecasts:", err);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã —Ü–µ–ª–µ–π");
    } finally {
      setLoading(false);
    }
  }

  const formatMoney = (kopecks: number) => {
    const rubles = kopecks / 100;
    return new Intl.NumberFormat("ru-RU", {
      style: "currency",
      currency: "RUB",
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(rubles);
  };

  const formatDate = (dateStr: string) => {
    return new Date(dateStr).toLocaleDateString("ru-RU", {
      year: "numeric",
      month: "long",
    });
  };

  if (loading) {
    return (
      <div className={styles.loading}>
        <div className={styles.spinner}></div>
        <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –ø–ª–∞–Ω—ã...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.error}>
        <div className={styles.errorIcon}>‚ö†Ô∏è</div>
        <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
        <p>{error}</p>
      </div>
    );
  }

  if (forecasts.length === 0) {
    return (
      <div className={styles.error}>
        <div className={styles.errorIcon}>üìä</div>
        <h2>–ù–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–ª–∞–Ω–æ–≤</h2>
        <p>–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–ü–ª–∞–Ω—ã" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π</p>
      </div>
    );
  }

  // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
  const chartData = selectedPlan
    ? (() => {
        const progress = generateMonthlyProgress(
          selectedPlan.current_amount,
          selectedPlan.goal_amount,
          selectedPlan.average_monthly_contribution,
          Math.min(selectedPlan.months_to_goal || 12, 24)
        );

        return {
          labels: progress.map((p) => p.month),
          datasets: [
            {
              label: "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Å—É–º–º–∞",
              data: progress.map((p) => p.projected_amount / 100),
              borderColor: "#10b981",
              backgroundColor: "rgba(16, 185, 129, 0.1)",
              fill: true,
              tension: 0.4,
            },
            {
              label: "–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞",
              data: progress.map(() => selectedPlan.goal_amount / 100),
              borderColor: "#ef4444",
              borderDash: [5, 5],
              fill: false,
            },
          ],
        };
      })()
    : null;

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: "top" as const,
      },
      tooltip: {
        callbacks: {
          label: (context: any) => {
            return `${context.dataset.label}: ${context.parsed.y.toLocaleString("ru-RU")} ‚ÇΩ`;
          },
        },
      },
    },
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          callback: (value: any) => `${value.toLocaleString("ru-RU")} ‚ÇΩ`,
        },
      },
    },
  };

  return (
    <div className={styles.goalForecastView}>
      {/* –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ */}
      <div className={styles.plansList}>
        <h3>–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–ª–∞–Ω—ã</h3>
        {forecasts.map((forecast) => (
          <div
            key={forecast.plan_id}
            className={`${styles.planCard} ${
              selectedPlan?.plan_id === forecast.plan_id ? styles.selected : ""
            }`}
            onClick={() => setSelectedPlan(forecast)}
          >
            <div className={styles.planHeader}>
              <h4>{forecast.plan_name}</h4>
              <span className={styles.progress}>{forecast.progress_percentage.toFixed(1)}%</span>
            </div>
            <div className={styles.planAmount}>
              {formatMoney(forecast.current_amount)} / {formatMoney(forecast.goal_amount)}
            </div>
            <div className={styles.progressBar}>
              <div
                className={styles.progressFill}
                style={{ width: `${Math.min(100, forecast.progress_percentage)}%` }}
              ></div>
            </div>
            {forecast.estimated_completion_date && (
              <div className={styles.planEta}>
                üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {formatDate(forecast.estimated_completion_date)}
              </div>
            )}
          </div>
        ))}
      </div>

      {/* –î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ */}
      {selectedPlan && (
        <div className={styles.planDetails}>
          <div className={styles.detailsHeader}>
            <h2>{selectedPlan.plan_name}</h2>
            <p className={styles.advice}>{selectedPlan.advice}</p>
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className={styles.statsGrid}>
            <div className={styles.statCard}>
              <div className={styles.statLabel}>–ù–∞–∫–æ–ø–ª–µ–Ω–æ</div>
              <div className={styles.statValue}>{formatMoney(selectedPlan.current_amount)}</div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statLabel}>–¶–µ–ª—å</div>
              <div className={styles.statValue}>{formatMoney(selectedPlan.goal_amount)}</div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statLabel}>–û—Å—Ç–∞–ª–æ—Å—å</div>
              <div className={styles.statValue}>{formatMoney(selectedPlan.remaining_amount)}</div>
            </div>
            <div className={styles.statCard}>
              <div className={styles.statLabel}>–°—Ä–µ–¥–Ω–∏–π –≤–∑–Ω–æ—Å</div>
              <div className={styles.statValue}>
                {formatMoney(selectedPlan.average_monthly_contribution)}/–º–µ—Å
              </div>
            </div>
          </div>

          {/* –°—Ü–µ–Ω–∞—Ä–∏–∏ */}
          <div className={styles.scenariosSection}>
            <h3>–°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏</h3>
            <div className={styles.scenariosGrid}>
              <div className={styles.scenarioCard}>
                <div className={styles.scenarioName}>üê¢ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π</div>
                <div className={styles.scenarioAmount}>
                  {formatMoney(selectedPlan.scenarios.conservative.monthly_amount)}/–º–µ—Å
                </div>
                <div className={styles.scenarioTime}>
                  {selectedPlan.scenarios.conservative.months_to_goal} –º–µ—Å
                </div>
                <div className={styles.scenarioDate}>
                  {formatDate(selectedPlan.scenarios.conservative.completion_date)}
                </div>
              </div>

              <div className={`${styles.scenarioCard} ${styles.current}`}>
                <div className={styles.scenarioName}>üéØ –¢–µ–∫—É—â–∏–π —Ç–µ–º–ø</div>
                <div className={styles.scenarioAmount}>
                  {formatMoney(selectedPlan.scenarios.current.monthly_amount)}/–º–µ—Å
                </div>
                <div className={styles.scenarioTime}>
                  {selectedPlan.scenarios.current.months_to_goal} –º–µ—Å
                </div>
                <div className={styles.scenarioDate}>
                  {formatDate(selectedPlan.scenarios.current.completion_date)}
                </div>
              </div>

              <div className={styles.scenarioCard}>
                <div className={styles.scenarioName}>üöÄ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π</div>
                <div className={styles.scenarioAmount}>
                  {formatMoney(selectedPlan.scenarios.aggressive.monthly_amount)}/–º–µ—Å
                </div>
                <div className={styles.scenarioTime}>
                  {selectedPlan.scenarios.aggressive.months_to_goal} –º–µ—Å
                </div>
                <div className={styles.scenarioDate}>
                  {formatDate(selectedPlan.scenarios.aggressive.completion_date)}
                </div>
              </div>
            </div>
          </div>

          {/* –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
          {chartData && (
            <div className={styles.chartSection}>
              <h3>–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏</h3>
              <div className={styles.chartContainer}>
                <Line data={chartData} options={chartOptions} />
              </div>
            </div>
          )}

          {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
          {selectedPlan.target_date && selectedPlan.recommended_monthly_contribution && (
            <div className={styles.recommendationCard}>
              <h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</h4>
              <p>
                –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –∫ <strong>{formatDate(selectedPlan.target_date)}</strong>{" "}
                —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å{" "}
                <strong>{formatMoney(selectedPlan.recommended_monthly_contribution)}</strong> –≤ –º–µ—Å—è—Ü.
              </p>
              {selectedPlan.average_monthly_contribution <
                selectedPlan.recommended_monthly_contribution && (
                <p className={styles.warning}>
                  ‚ö†Ô∏è –¢–µ–∫—É—â–∏–µ –≤–∑–Ω–æ—Å—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã. –£–≤–µ–ª–∏—á—å—Ç–µ –Ω–∞{" "}
                  {formatMoney(
                    selectedPlan.recommended_monthly_contribution -
                      selectedPlan.average_monthly_contribution
                  )}
                  /–º–µ—Å.
                </p>
              )}
            </div>
          )}

          {/* –ò—Å—Ç–æ—Ä–∏—è –≤–∑–Ω–æ—Å–æ–≤ */}
          {selectedPlan.topups_history.length > 0 && (
            <div className={styles.historySection}>
              <h4>
                üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∑–Ω–æ—Å—ã <span>({selectedPlan.topups_count} –≤—Å–µ–≥–æ)</span>
              </h4>
              <div className={styles.topupsList}>
                {selectedPlan.topups_history.slice(0, 5).map((topup, idx) => (
                  <div key={idx} className={styles.topupItem}>
                    <span className={styles.topupDate}>
                      {new Date(topup.created_at).toLocaleDateString("ru-RU")}
                    </span>
                    <span className={styles.topupAmount}>{formatMoney(topup.amount)}</span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

"use client";

import { useState, useRef } from 'react';
import styles from './FileUploader.module.css';

interface FileUploaderProps {
  transactionId: string;
  existingFiles?: Attachment[];
  onUploadComplete?: (file: Attachment) => void;
  onDeleteComplete?: (fileId: string) => void;
}

interface Attachment {
  id: string;
  file_name: string;
  file_size: number;
  file_type: string;
  storage_path: string;
  created_at: string;
}

const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB
const ALLOWED_TYPES = [
  'image/jpeg',
  'image/jpg',
  'image/png',
  'image/gif',
  'image/webp',
  'application/pdf',
];

export default function FileUploader({
  transactionId,
  existingFiles = [],
  onUploadComplete,
  onDeleteComplete,
}: FileUploaderProps) {
  const [files, setFiles] = useState<Attachment[]>(existingFiles);
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = e.target.files;
    if (!selectedFiles || selectedFiles.length === 0) return;

    const file = selectedFiles[0]; // –ü–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
    if (file.size > MAX_FILE_SIZE) {
      setError('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 10 –ú–ë');
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞
    if (!ALLOWED_TYPES.includes(file.type)) {
      setError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ PDF');
      return;
    }

    setError(null);
    setUploading(true);

    try {
      // –°–æ–∑–¥–∞—ë–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const formData = new FormData();
      formData.append('file', file);
      formData.append('transactionId', transactionId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await fetch('/api/attachments/upload', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
      }

      const attachment: Attachment = await response.json();
      
      setFiles(prev => [...prev, attachment]);
      
      if (onUploadComplete) {
        onUploadComplete(attachment);
      }

      // –û—á–∏—â–∞–µ–º input
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    } finally {
      setUploading(false);
    }
  };

  const handleDelete = async (fileId: string, storagePath: string) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª?')) return;

    try {
      const response = await fetch('/api/attachments/delete', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ fileId, storagePath }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
      }

      setFiles(prev => prev.filter(f => f.id !== fileId));
      
      if (onDeleteComplete) {
        onDeleteComplete(fileId);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
    }
  };

  const handlePreview = (file: Attachment) => {
    // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    if (file.file_type.startsWith('image/')) {
      const url = `/api/attachments/view?path=${encodeURIComponent(file.storage_path)}`;
      setPreviewUrl(url);
    }
  };

  const formatFileSize = (bytes: number): string => {
    if (bytes < 1024) return bytes + ' B';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
  };

  const getFileIcon = (type: string): string => {
    if (type.startsWith('image/')) return 'üñºÔ∏è';
    if (type === 'application/pdf') return 'üìÑ';
    return 'üìé';
  };

  return (
    <div className={styles.container}>
      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      <div className={styles.uploadSection}>
        <input
          ref={fileInputRef}
          type="file"
          accept={ALLOWED_TYPES.join(',')}
          onChange={handleFileSelect}
          className={styles.fileInput}
          id="file-upload"
          disabled={uploading}
        />
        <label htmlFor="file-upload" className={styles.uploadButton}>
          {uploading ? (
            <>
              <span className={styles.spinner}></span>
              –ó–∞–≥—Ä—É–∑–∫–∞...
            </>
          ) : (
            <>
              <span className="material-icons">attach_file</span>
              –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª
            </>
          )}
        </label>
        <span className={styles.uploadHint}>
          –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ PDF, –¥–æ 10 –ú–ë
        </span>
      </div>

      {/* –û—à–∏–±–∫–∞ */}
      {error && (
        <div className={styles.error}>
          <span className="material-icons">error</span>
          {error}
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ */}
      {files.length > 0 && (
        <div className={styles.filesList}>
          {files.map((file) => (
            <div key={file.id} className={styles.fileItem}>
              <div className={styles.fileIcon}>
                {getFileIcon(file.file_type)}
              </div>
              
              <div className={styles.fileInfo}>
                <div className={styles.fileName}>{file.file_name}</div>
                <div className={styles.fileSize}>
                  {formatFileSize(file.file_size)}
                </div>
              </div>

              <div className={styles.fileActions}>
                {file.file_type.startsWith('image/') && (
                  <button
                    type="button"
                    className={styles.actionButton}
                    onClick={() => handlePreview(file)}
                    title="–ü—Ä–æ—Å–º–æ—Ç—Ä"
                  >
                    <span className="material-icons">visibility</span>
                  </button>
                )}
                
                <a
                  href={`/api/attachments/download?path=${encodeURIComponent(file.storage_path)}&name=${encodeURIComponent(file.file_name)}`}
                  download
                  className={styles.actionButton}
                  title="–°–∫–∞—á–∞—Ç—å"
                >
                  <span className="material-icons">download</span>
                </a>
                
                <button
                  type="button"
                  className={styles.actionButton}
                  onClick={() => handleDelete(file.id, file.storage_path)}
                  title="–£–¥–∞–ª–∏—Ç—å"
                >
                  <span className="material-icons">delete</span>
                </button>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–µ–≤—å—é */}
      {previewUrl && (
        <div className={styles.modal} onClick={() => setPreviewUrl(null)}>
          <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
            <button
              className={styles.modalClose}
              onClick={() => setPreviewUrl(null)}
            >
              <span className="material-icons">close</span>
            </button>
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img src={previewUrl} alt="Preview" className={styles.previewImage} />
          </div>
        </div>
      )}
    </div>
  );
}
